
SensorDemo_BLE_l476rg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae0  0800e460  0800e460  0001e460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef40  0800ef40  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef40  0800ef40  0001ef40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef48  0800ef48  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef48  0800ef48  0001ef48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef4c  0800ef4c  0001ef4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800ef50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e18  200001ec  0800f13c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20001004  0800f13c  00021004  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 13 .debug_line   00025908  00000000  00000000  0002025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000093  00000000  00000000  00045b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00026205  00000000  00000000  00045bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00004808  00000000  00000000  0006bdff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001f40  00000000  00000000  00070608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe843  00000000  00000000  00072548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001841  00000000  00000000  00170d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002c94a  00000000  00000000  001725cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000097a0  00000000  00000000  0019ef18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e448 	.word	0x0800e448

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800e448 	.word	0x0800e448

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f48:	f003 f924 	bl	8004194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f4c:	480c      	ldr	r0, [pc, #48]	; (8000f80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f4e:	490d      	ldr	r1, [pc, #52]	; (8000f84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <LoopForever+0xe>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f54:	e002      	b.n	8000f5c <LoopCopyDataInit>

08000f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5a:	3304      	adds	r3, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f60:	d3f9      	bcc.n	8000f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f64:	4c0a      	ldr	r4, [pc, #40]	; (8000f90 <LoopForever+0x16>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f68:	e001      	b.n	8000f6e <LoopFillZerobss>

08000f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f6c:	3204      	adds	r2, #4

08000f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f70:	d3fb      	bcc.n	8000f6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f72:	f00b fa5d 	bl	800c430 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f76:	f002 fbb9 	bl	80036ec <main>

08000f7a <LoopForever>:

LoopForever:
    b LoopForever
 8000f7a:	e7fe      	b.n	8000f7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f7c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f84:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8000f88:	0800ef50 	.word	0x0800ef50
  ldr r2, =_sbss
 8000f8c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8000f90:	20001004 	.word	0x20001004

08000f94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC1_2_IRQHandler>

08000f96 <linear_interpolation>:
  float x1;
  float y1;
} lin_t;

float linear_interpolation(lin_t *lin, int16_t x)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	807b      	strh	r3, [r7, #2]
  return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	ed93 7a03 	vldr	s14, [r3, #12]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000fb6:	ee07 3a90 	vmov	s15, r3
 8000fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	edd3 6a02 	vldr	s13, [r3, #8]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fce:	ee66 6aa7 	vmul.f32	s13, s13, s15
                                     (lin->x0 * lin->y1)))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	ed93 6a00 	vldr	s12, [r3]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fde:	ee66 7a27 	vmul.f32	s15, s12, s15
  return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 8000fe2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000fe6:	ee37 7a27 	vadd.f32	s14, s14, s15
         / (lin->x1 - lin->x0);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	edd3 6a02 	vldr	s13, [r3, #8]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	edd3 7a00 	vldr	s15, [r3]
 8000ff6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000ffa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000ffe:	eef0 7a66 	vmov.f32	s15, s13
}
 8001002:	eeb0 0a67 	vmov.f32	s0, s15
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <MX_BlueNRG_2_Init>:
  PRINT_CSV("%02d:%02d:%02d.%03d", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_BlueNRG_2_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE END BlueNRG_2_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t ret;

  User_Init();
 8001016:	f000 f8b1 	bl	800117c <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 800101a:	2000      	movs	r0, #0
 800101c:	f002 ffa4 	bl	8003f68 <BSP_PB_GetState>
 8001020:	4603      	mov	r3, r0
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <MX_BlueNRG_2_Init+0x104>)
 8001026:	701a      	strb	r2, [r3, #0]

  hci_init(APP_UserEvtRx, NULL);
 8001028:	2100      	movs	r1, #0
 800102a:	483b      	ldr	r0, [pc, #236]	; (8001118 <MX_BlueNRG_2_Init+0x108>)
 800102c:	f009 ffa4 	bl	800af78 <hci_init>

  PRINT_DBG("BlueNRG-2 SensorDemo_BLESensor-App Application\r\n");
 8001030:	483a      	ldr	r0, [pc, #232]	; (800111c <MX_BlueNRG_2_Init+0x10c>)
 8001032:	f00b f8a5 	bl	800c180 <puts>

  /* Init Sensor Device */
  ret = Sensor_DeviceInit();
 8001036:	f000 f8af 	bl	8001198 <Sensor_DeviceInit>
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS)
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d008      	beq.n	8001056 <MX_BlueNRG_2_Init+0x46>
  {
    BSP_LED_On(LED2);
 8001044:	2000      	movs	r0, #0
 8001046:	f002 fef1 	bl	8003e2c <BSP_LED_On>
    PRINT_DBG("SensorDeviceInit()--> Failed 0x%02x\r\n", ret);
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	4619      	mov	r1, r3
 800104e:	4834      	ldr	r0, [pc, #208]	; (8001120 <MX_BlueNRG_2_Init+0x110>)
 8001050:	f00b f830 	bl	800c0b4 <iprintf>
    while(1);
 8001054:	e7fe      	b.n	8001054 <MX_BlueNRG_2_Init+0x44>
  }

  PRINT_DBG("BLE Stack Initialized & Device Configured\r\n");
 8001056:	4833      	ldr	r0, [pc, #204]	; (8001124 <MX_BlueNRG_2_Init+0x114>)
 8001058:	f00b f892 	bl	800c180 <puts>

  /* USER CODE BEGIN BlueNRG_2_Init_PostTreatment */
  /* Initialize mems driver interface */

      dev_ctx.write_reg = platform_write;
 800105c:	4b32      	ldr	r3, [pc, #200]	; (8001128 <MX_BlueNRG_2_Init+0x118>)
 800105e:	4a33      	ldr	r2, [pc, #204]	; (800112c <MX_BlueNRG_2_Init+0x11c>)
 8001060:	601a      	str	r2, [r3, #0]
      dev_ctx.read_reg = platform_read;
 8001062:	4b31      	ldr	r3, [pc, #196]	; (8001128 <MX_BlueNRG_2_Init+0x118>)
 8001064:	4a32      	ldr	r2, [pc, #200]	; (8001130 <MX_BlueNRG_2_Init+0x120>)
 8001066:	605a      	str	r2, [r3, #4]
      dev_ctx.mdelay = HAL_Delay;
 8001068:	4b2f      	ldr	r3, [pc, #188]	; (8001128 <MX_BlueNRG_2_Init+0x118>)
 800106a:	4a32      	ldr	r2, [pc, #200]	; (8001134 <MX_BlueNRG_2_Init+0x124>)
 800106c:	609a      	str	r2, [r3, #8]
      dev_ctx.handle = &hi2c1;
 800106e:	4b2e      	ldr	r3, [pc, #184]	; (8001128 <MX_BlueNRG_2_Init+0x118>)
 8001070:	4a31      	ldr	r2, [pc, #196]	; (8001138 <MX_BlueNRG_2_Init+0x128>)
 8001072:	60da      	str	r2, [r3, #12]
      /* Check device ID */
      whoamI = 0;
 8001074:	4b31      	ldr	r3, [pc, #196]	; (800113c <MX_BlueNRG_2_Init+0x12c>)
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
      hts221_device_id_get(&dev_ctx, &whoamI);
 800107a:	4930      	ldr	r1, [pc, #192]	; (800113c <MX_BlueNRG_2_Init+0x12c>)
 800107c:	482a      	ldr	r0, [pc, #168]	; (8001128 <MX_BlueNRG_2_Init+0x118>)
 800107e:	f003 f8f9 	bl	8004274 <hts221_device_id_get>

      if ( whoamI != HTS221_ID )
 8001082:	4b2e      	ldr	r3, [pc, #184]	; (800113c <MX_BlueNRG_2_Init+0x12c>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2bbc      	cmp	r3, #188	; 0xbc
 8001088:	d000      	beq.n	800108c <MX_BlueNRG_2_Init+0x7c>
        while (1); /*manage here device not found */
 800108a:	e7fe      	b.n	800108a <MX_BlueNRG_2_Init+0x7a>

      /* Read humidity calibration coefficient */
      hts221_hum_adc_point_0_get(&dev_ctx, &lin_hum.x0);
 800108c:	492c      	ldr	r1, [pc, #176]	; (8001140 <MX_BlueNRG_2_Init+0x130>)
 800108e:	4826      	ldr	r0, [pc, #152]	; (8001128 <MX_BlueNRG_2_Init+0x118>)
 8001090:	f003 f9b0 	bl	80043f4 <hts221_hum_adc_point_0_get>
      hts221_hum_rh_point_0_get(&dev_ctx, &lin_hum.y0);
 8001094:	492b      	ldr	r1, [pc, #172]	; (8001144 <MX_BlueNRG_2_Init+0x134>)
 8001096:	4824      	ldr	r0, [pc, #144]	; (8001128 <MX_BlueNRG_2_Init+0x118>)
 8001098:	f003 f90e 	bl	80042b8 <hts221_hum_rh_point_0_get>
      hts221_hum_adc_point_1_get(&dev_ctx, &lin_hum.x1);
 800109c:	492a      	ldr	r1, [pc, #168]	; (8001148 <MX_BlueNRG_2_Init+0x138>)
 800109e:	4822      	ldr	r0, [pc, #136]	; (8001128 <MX_BlueNRG_2_Init+0x118>)
 80010a0:	f003 f9cc 	bl	800443c <hts221_hum_adc_point_1_get>
      hts221_hum_rh_point_1_get(&dev_ctx, &lin_hum.y1);
 80010a4:	4929      	ldr	r1, [pc, #164]	; (800114c <MX_BlueNRG_2_Init+0x13c>)
 80010a6:	4820      	ldr	r0, [pc, #128]	; (8001128 <MX_BlueNRG_2_Init+0x118>)
 80010a8:	f003 f924 	bl	80042f4 <hts221_hum_rh_point_1_get>
      /* Read temperature calibration coefficient */
      hts221_temp_adc_point_0_get(&dev_ctx, &lin_temp.x0);
 80010ac:	4928      	ldr	r1, [pc, #160]	; (8001150 <MX_BlueNRG_2_Init+0x140>)
 80010ae:	481e      	ldr	r0, [pc, #120]	; (8001128 <MX_BlueNRG_2_Init+0x118>)
 80010b0:	f003 f9e8 	bl	8004484 <hts221_temp_adc_point_0_get>
      hts221_temp_deg_point_0_get(&dev_ctx, &lin_temp.y0);
 80010b4:	4927      	ldr	r1, [pc, #156]	; (8001154 <MX_BlueNRG_2_Init+0x144>)
 80010b6:	481c      	ldr	r0, [pc, #112]	; (8001128 <MX_BlueNRG_2_Init+0x118>)
 80010b8:	f003 f93a 	bl	8004330 <hts221_temp_deg_point_0_get>
      hts221_temp_adc_point_1_get(&dev_ctx, &lin_temp.x1);
 80010bc:	4926      	ldr	r1, [pc, #152]	; (8001158 <MX_BlueNRG_2_Init+0x148>)
 80010be:	481a      	ldr	r0, [pc, #104]	; (8001128 <MX_BlueNRG_2_Init+0x118>)
 80010c0:	f003 fa04 	bl	80044cc <hts221_temp_adc_point_1_get>
      hts221_temp_deg_point_1_get(&dev_ctx, &lin_temp.y1);
 80010c4:	4925      	ldr	r1, [pc, #148]	; (800115c <MX_BlueNRG_2_Init+0x14c>)
 80010c6:	4818      	ldr	r0, [pc, #96]	; (8001128 <MX_BlueNRG_2_Init+0x118>)
 80010c8:	f003 f963 	bl	8004392 <hts221_temp_deg_point_1_get>


      whoamI1 = 0;
 80010cc:	4b24      	ldr	r3, [pc, #144]	; (8001160 <MX_BlueNRG_2_Init+0x150>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
         lps22hh_device_id_get(&dev_ctx, &whoamI1);
 80010d2:	4923      	ldr	r1, [pc, #140]	; (8001160 <MX_BlueNRG_2_Init+0x150>)
 80010d4:	4814      	ldr	r0, [pc, #80]	; (8001128 <MX_BlueNRG_2_Init+0x118>)
 80010d6:	f003 fb02 	bl	80046de <lps22hh_device_id_get>

         if ( whoamI1 != LPS22HH_ID )
 80010da:	4b21      	ldr	r3, [pc, #132]	; (8001160 <MX_BlueNRG_2_Init+0x150>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2bb3      	cmp	r3, #179	; 0xb3
 80010e0:	d000      	beq.n	80010e4 <MX_BlueNRG_2_Init+0xd4>
           while (1); /*manage here device not found */
 80010e2:	e7fe      	b.n	80010e2 <MX_BlueNRG_2_Init+0xd2>

         /* Restore default configuration */
         lps22hh_reset_set(&dev_ctx, PROPERTY_ENABLE);
 80010e4:	2101      	movs	r1, #1
 80010e6:	4810      	ldr	r0, [pc, #64]	; (8001128 <MX_BlueNRG_2_Init+0x118>)
 80010e8:	f003 fb0a 	bl	8004700 <lps22hh_reset_set>

         do {
           lps22hh_reset_get(&dev_ctx1, &rst);
 80010ec:	491d      	ldr	r1, [pc, #116]	; (8001164 <MX_BlueNRG_2_Init+0x154>)
 80010ee:	481e      	ldr	r0, [pc, #120]	; (8001168 <MX_BlueNRG_2_Init+0x158>)
 80010f0:	f003 fb2c 	bl	800474c <lps22hh_reset_get>
         } while (rst);
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <MX_BlueNRG_2_Init+0x154>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1f7      	bne.n	80010ec <MX_BlueNRG_2_Init+0xdc>

         /* Enable Block Data Update */
         lps22hh_block_data_update_set(&dev_ctx1, PROPERTY_ENABLE);
 80010fc:	2101      	movs	r1, #1
 80010fe:	481a      	ldr	r0, [pc, #104]	; (8001168 <MX_BlueNRG_2_Init+0x158>)
 8001100:	f003 fa50 	bl	80045a4 <lps22hh_block_data_update_set>
         /* Set Output Data Rate */
         lps22hh_data_rate_set(&dev_ctx1, LPS22HH_10_Hz_LOW_NOISE);
 8001104:	2112      	movs	r1, #18
 8001106:	4818      	ldr	r0, [pc, #96]	; (8001168 <MX_BlueNRG_2_Init+0x158>)
 8001108:	f003 fa72 	bl	80045f0 <lps22hh_data_rate_set>



  /* USER CODE END BlueNRG_2_Init_PostTreatment */
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000000 	.word	0x20000000
 8001118:	080038d1 	.word	0x080038d1
 800111c:	0800e460 	.word	0x0800e460
 8001120:	0800e490 	.word	0x0800e490
 8001124:	0800e4b8 	.word	0x0800e4b8
 8001128:	20000610 	.word	0x20000610
 800112c:	08002941 	.word	0x08002941
 8001130:	08002983 	.word	0x08002983
 8001134:	08004879 	.word	0x08004879
 8001138:	20000788 	.word	0x20000788
 800113c:	2000060c 	.word	0x2000060c
 8001140:	20000630 	.word	0x20000630
 8001144:	20000634 	.word	0x20000634
 8001148:	20000638 	.word	0x20000638
 800114c:	2000063c 	.word	0x2000063c
 8001150:	20000640 	.word	0x20000640
 8001154:	20000644 	.word	0x20000644
 8001158:	20000648 	.word	0x20000648
 800115c:	2000064c 	.word	0x2000064c
 8001160:	2000060d 	.word	0x2000060d
 8001164:	2000060e 	.word	0x2000060e
 8001168:	20000620 	.word	0x20000620

0800116c <MX_BlueNRG_2_Process>:

/*
 * BlueNRG-2 background task
 */
void MX_BlueNRG_2_Process(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_2_Process_PreTreatment */

  /* USER CODE END BlueNRG_2_Process_PreTreatment */

  hci_user_evt_proc();
 8001170:	f00a f87c 	bl	800b26c <hci_user_evt_proc>
  User_Process();
 8001174:	f000 f914 	bl	80013a0 <User_Process>

  /* USER CODE BEGIN BlueNRG_2_Process_PostTreatment */

  /* USER CODE END BlueNRG_2_Process_PostTreatment */
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}

0800117c <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8001180:	2101      	movs	r1, #1
 8001182:	2000      	movs	r0, #0
 8001184:	f002 fe9c 	bl	8003ec0 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8001188:	2000      	movs	r0, #0
 800118a:	f002 fe3d 	bl	8003e08 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 800118e:	2000      	movs	r0, #0
 8001190:	f002 ff14 	bl	8003fbc <BSP_COM_Init>
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <Sensor_DeviceInit>:
 *
 * @param  None
 * @retval None
 */
uint8_t Sensor_DeviceInit(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08c      	sub	sp, #48	; 0x30
 800119c:	af06      	add	r7, sp, #24
  uint8_t ret;
  uint16_t service_handle, dev_name_char_handle, appearance_char_handle;
  uint8_t device_name[] = {SENSOR_DEMO_NAME};
 800119e:	4a6c      	ldr	r2, [pc, #432]	; (8001350 <Sensor_DeviceInit+0x1b8>)
 80011a0:	f107 0308 	add.w	r3, r7, #8
 80011a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011a8:	6018      	str	r0, [r3, #0]
 80011aa:	3304      	adds	r3, #4
 80011ac:	8019      	strh	r1, [r3, #0]
 80011ae:	3302      	adds	r3, #2
 80011b0:	0c0a      	lsrs	r2, r1, #16
 80011b2:	701a      	strb	r2, [r3, #0]
  uint8_t  hwVersion;
  uint16_t fwVersion;
  uint8_t  bdaddr_len_out;
  uint8_t  config_data_stored_static_random_address = 0x80; /* Offset of the static random address stored in NVM */
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	75fb      	strb	r3, [r7, #23]

  /* Sw reset of the device */
  hci_reset();
 80011b8:	f009 fd5c 	bl	800ac74 <hci_reset>
  /**
   *  To support both the BlueNRG-2 and the BlueNRG-2N a minimum delay of 2000ms is required at device boot
   */
  HAL_Delay(2000);
 80011bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011c0:	f003 fb5a 	bl	8004878 <HAL_Delay>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 80011c4:	1d3a      	adds	r2, r7, #4
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	4611      	mov	r1, r2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 fb64 	bl	8002898 <getBlueNRGVersion>

  PRINT_DBG("HWver %d\nFWver %d\r\n", hwVersion, fwVersion);
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	4619      	mov	r1, r3
 80011d4:	88bb      	ldrh	r3, [r7, #4]
 80011d6:	461a      	mov	r2, r3
 80011d8:	485e      	ldr	r0, [pc, #376]	; (8001354 <Sensor_DeviceInit+0x1bc>)
 80011da:	f00a ff6b 	bl	800c0b4 <iprintf>

  ret = aci_hal_read_config_data(config_data_stored_static_random_address,
 80011de:	1cf9      	adds	r1, r7, #3
 80011e0:	7dfb      	ldrb	r3, [r7, #23]
 80011e2:	4a5d      	ldr	r2, [pc, #372]	; (8001358 <Sensor_DeviceInit+0x1c0>)
 80011e4:	4618      	mov	r0, r3
 80011e6:	f008 f930 	bl	800944a <aci_hal_read_config_data>
 80011ea:	4603      	mov	r3, r0
 80011ec:	75bb      	strb	r3, [r7, #22]
                                 &bdaddr_len_out, bdaddr);

  if (ret) {
 80011ee:	7dbb      	ldrb	r3, [r7, #22]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d002      	beq.n	80011fa <Sensor_DeviceInit+0x62>
    PRINT_DBG("Read Static Random address failed.\r\n");
 80011f4:	4859      	ldr	r0, [pc, #356]	; (800135c <Sensor_DeviceInit+0x1c4>)
 80011f6:	f00a ffc3 	bl	800c180 <puts>
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 80011fa:	4b57      	ldr	r3, [pc, #348]	; (8001358 <Sensor_DeviceInit+0x1c0>)
 80011fc:	795b      	ldrb	r3, [r3, #5]
 80011fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001202:	2bc0      	cmp	r3, #192	; 0xc0
 8001204:	d003      	beq.n	800120e <Sensor_DeviceInit+0x76>
    PRINT_DBG("Static Random address not well formed.\r\n");
 8001206:	4856      	ldr	r0, [pc, #344]	; (8001360 <Sensor_DeviceInit+0x1c8>)
 8001208:	f00a ffba 	bl	800c180 <puts>
    while(1);
 800120c:	e7fe      	b.n	800120c <Sensor_DeviceInit+0x74>
  }

  /* Set the TX power -2 dBm */
  aci_hal_set_tx_power_level(1, 4);
 800120e:	2104      	movs	r1, #4
 8001210:	2001      	movs	r0, #1
 8001212:	f008 f99e 	bl	8009552 <aci_hal_set_tx_power_level>
  if (ret != BLE_STATUS_SUCCESS)
 8001216:	7dbb      	ldrb	r3, [r7, #22]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d006      	beq.n	800122a <Sensor_DeviceInit+0x92>
  {
    PRINT_DBG("Error in aci_hal_set_tx_power_level() 0x%04x\r\n", ret);
 800121c:	7dbb      	ldrb	r3, [r7, #22]
 800121e:	4619      	mov	r1, r3
 8001220:	4850      	ldr	r0, [pc, #320]	; (8001364 <Sensor_DeviceInit+0x1cc>)
 8001222:	f00a ff47 	bl	800c0b4 <iprintf>
    return ret;
 8001226:	7dbb      	ldrb	r3, [r7, #22]
 8001228:	e08d      	b.n	8001346 <Sensor_DeviceInit+0x1ae>
  }
  else
  {
    PRINT_DBG("aci_hal_set_tx_power_level() --> SUCCESS\r\n");
 800122a:	484f      	ldr	r0, [pc, #316]	; (8001368 <Sensor_DeviceInit+0x1d0>)
 800122c:	f00a ffa8 	bl	800c180 <puts>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 8001230:	f007 fdf3 	bl	8008e1a <aci_gatt_init>
 8001234:	4603      	mov	r3, r0
 8001236:	75bb      	strb	r3, [r7, #22]
  if (ret != BLE_STATUS_SUCCESS)
 8001238:	7dbb      	ldrb	r3, [r7, #22]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d006      	beq.n	800124c <Sensor_DeviceInit+0xb4>
  {
    PRINT_DBG("aci_gatt_init() failed: 0x%02x\r\n", ret);
 800123e:	7dbb      	ldrb	r3, [r7, #22]
 8001240:	4619      	mov	r1, r3
 8001242:	484a      	ldr	r0, [pc, #296]	; (800136c <Sensor_DeviceInit+0x1d4>)
 8001244:	f00a ff36 	bl	800c0b4 <iprintf>
    return ret;
 8001248:	7dbb      	ldrb	r3, [r7, #22]
 800124a:	e07c      	b.n	8001346 <Sensor_DeviceInit+0x1ae>
  }
  else
  {
    PRINT_DBG("aci_gatt_init() --> SUCCESS\r\n");
 800124c:	4848      	ldr	r0, [pc, #288]	; (8001370 <Sensor_DeviceInit+0x1d8>)
 800124e:	f00a ff97 	bl	800c180 <puts>
  }

  /* GAP Init */
  ret = aci_gap_init(GAP_PERIPHERAL_ROLE, 0, 0x07, &service_handle, &dev_name_char_handle,
 8001252:	f107 0214 	add.w	r2, r7, #20
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	f107 0312 	add.w	r3, r7, #18
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	4613      	mov	r3, r2
 8001264:	2207      	movs	r2, #7
 8001266:	2100      	movs	r1, #0
 8001268:	2001      	movs	r0, #1
 800126a:	f007 fcae 	bl	8008bca <aci_gap_init>
 800126e:	4603      	mov	r3, r0
 8001270:	75bb      	strb	r3, [r7, #22]
                     &appearance_char_handle);
  if (ret != BLE_STATUS_SUCCESS)
 8001272:	7dbb      	ldrb	r3, [r7, #22]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d006      	beq.n	8001286 <Sensor_DeviceInit+0xee>
  {
    PRINT_DBG("aci_gap_init() failed: 0x%02x\r\n", ret);
 8001278:	7dbb      	ldrb	r3, [r7, #22]
 800127a:	4619      	mov	r1, r3
 800127c:	483d      	ldr	r0, [pc, #244]	; (8001374 <Sensor_DeviceInit+0x1dc>)
 800127e:	f00a ff19 	bl	800c0b4 <iprintf>
    return ret;
 8001282:	7dbb      	ldrb	r3, [r7, #22]
 8001284:	e05f      	b.n	8001346 <Sensor_DeviceInit+0x1ae>
  }
  else
  {
    PRINT_DBG("aci_gap_init() --> SUCCESS\r\n");
 8001286:	483c      	ldr	r0, [pc, #240]	; (8001378 <Sensor_DeviceInit+0x1e0>)
 8001288:	f00a ff7a 	bl	800c180 <puts>
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, sizeof(device_name),
 800128c:	8ab8      	ldrh	r0, [r7, #20]
 800128e:	8a79      	ldrh	r1, [r7, #18]
 8001290:	f107 0308 	add.w	r3, r7, #8
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2307      	movs	r3, #7
 8001298:	2200      	movs	r2, #0
 800129a:	f007 ffc6 	bl	800922a <aci_gatt_update_char_value>
 800129e:	4603      	mov	r3, r0
 80012a0:	75bb      	strb	r3, [r7, #22]
                                   device_name);
  if(ret != BLE_STATUS_SUCCESS)
 80012a2:	7dbb      	ldrb	r3, [r7, #22]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d006      	beq.n	80012b6 <Sensor_DeviceInit+0x11e>
  {
    PRINT_DBG("aci_gatt_update_char_value() failed: 0x%02x\r\n", ret);
 80012a8:	7dbb      	ldrb	r3, [r7, #22]
 80012aa:	4619      	mov	r1, r3
 80012ac:	4833      	ldr	r0, [pc, #204]	; (800137c <Sensor_DeviceInit+0x1e4>)
 80012ae:	f00a ff01 	bl	800c0b4 <iprintf>
    return ret;
 80012b2:	7dbb      	ldrb	r3, [r7, #22]
 80012b4:	e047      	b.n	8001346 <Sensor_DeviceInit+0x1ae>
  }
  else
  {
    PRINT_DBG("aci_gatt_update_char_value() --> SUCCESS\r\n");
 80012b6:	4832      	ldr	r0, [pc, #200]	; (8001380 <Sensor_DeviceInit+0x1e8>)
 80012b8:	f00a ff62 	bl	800c180 <puts>
  }

  /* BLE Security v4.2 is supported: BLE stack FW version >= 2.x (new API prototype) */
  ret = aci_gap_set_authentication_requirement(BONDING,
 80012bc:	2300      	movs	r3, #0
 80012be:	9304      	str	r3, [sp, #16]
 80012c0:	4b30      	ldr	r3, [pc, #192]	; (8001384 <Sensor_DeviceInit+0x1ec>)
 80012c2:	9303      	str	r3, [sp, #12]
 80012c4:	2300      	movs	r3, #0
 80012c6:	9302      	str	r3, [sp, #8]
 80012c8:	2310      	movs	r3, #16
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	2307      	movs	r3, #7
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2300      	movs	r3, #0
 80012d2:	2201      	movs	r2, #1
 80012d4:	2101      	movs	r1, #1
 80012d6:	2001      	movs	r0, #1
 80012d8:	f007 fbaa 	bl	8008a30 <aci_gap_set_authentication_requirement>
 80012dc:	4603      	mov	r3, r0
 80012de:	75bb      	strb	r3, [r7, #22]
                                               7,
                                               16,
                                               USE_FIXED_PIN_FOR_PAIRING,
                                               123456,
                                               0x00);
  if(ret != BLE_STATUS_SUCCESS)
 80012e0:	7dbb      	ldrb	r3, [r7, #22]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d006      	beq.n	80012f4 <Sensor_DeviceInit+0x15c>
  {
    PRINT_DBG("aci_gap_set_authentication_requirement()failed: 0x%02x\r\n", ret);
 80012e6:	7dbb      	ldrb	r3, [r7, #22]
 80012e8:	4619      	mov	r1, r3
 80012ea:	4827      	ldr	r0, [pc, #156]	; (8001388 <Sensor_DeviceInit+0x1f0>)
 80012ec:	f00a fee2 	bl	800c0b4 <iprintf>
    return ret;
 80012f0:	7dbb      	ldrb	r3, [r7, #22]
 80012f2:	e028      	b.n	8001346 <Sensor_DeviceInit+0x1ae>
  }
  else
  {
    PRINT_DBG("aci_gap_set_authentication_requirement() --> SUCCESS\r\n");
 80012f4:	4825      	ldr	r0, [pc, #148]	; (800138c <Sensor_DeviceInit+0x1f4>)
 80012f6:	f00a ff43 	bl	800c180 <puts>
  }

  PRINT_DBG("BLE Stack Initialized with SUCCESS\r\n");
 80012fa:	4825      	ldr	r0, [pc, #148]	; (8001390 <Sensor_DeviceInit+0x1f8>)
 80012fc:	f00a ff40 	bl	800c180 <puts>

  ret = Add_HWServW2ST_Service();
 8001300:	f001 fbb6 	bl	8002a70 <Add_HWServW2ST_Service>
 8001304:	4603      	mov	r3, r0
 8001306:	75bb      	strb	r3, [r7, #22]
  if(ret == BLE_STATUS_SUCCESS)
 8001308:	7dbb      	ldrb	r3, [r7, #22]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d10a      	bne.n	8001324 <Sensor_DeviceInit+0x18c>
  {
    PRINT_DBG("BlueNRG2 HW service added successfully.\r\n");
 800130e:	4821      	ldr	r0, [pc, #132]	; (8001394 <Sensor_DeviceInit+0x1fc>)
 8001310:	f00a ff36 	bl	800c180 <puts>
  {
    PRINT_DBG("Error while adding BlueNRG2 HW service: 0x%02x\r\n", ret);
    while(1);
  }

  ret = Add_SWServW2ST_Service();
 8001314:	f001 fc86 	bl	8002c24 <Add_SWServW2ST_Service>
 8001318:	4603      	mov	r3, r0
 800131a:	75bb      	strb	r3, [r7, #22]
  if(ret == BLE_STATUS_SUCCESS)
 800131c:	7dbb      	ldrb	r3, [r7, #22]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10b      	bne.n	800133a <Sensor_DeviceInit+0x1a2>
 8001322:	e005      	b.n	8001330 <Sensor_DeviceInit+0x198>
    PRINT_DBG("Error while adding BlueNRG2 HW service: 0x%02x\r\n", ret);
 8001324:	7dbb      	ldrb	r3, [r7, #22]
 8001326:	4619      	mov	r1, r3
 8001328:	481b      	ldr	r0, [pc, #108]	; (8001398 <Sensor_DeviceInit+0x200>)
 800132a:	f00a fec3 	bl	800c0b4 <iprintf>
    while(1);
 800132e:	e7fe      	b.n	800132e <Sensor_DeviceInit+0x196>
  {
     PRINT_DBG("BlueNRG2 SW service added successfully.\r\n");
 8001330:	481a      	ldr	r0, [pc, #104]	; (800139c <Sensor_DeviceInit+0x204>)
 8001332:	f00a ff25 	bl	800c180 <puts>
  {
     PRINT_DBG("Error while adding BlueNRG2 HW service: 0x%02x\r\n", ret);
     while(1);
  }

  return BLE_STATUS_SUCCESS;
 8001336:	2300      	movs	r3, #0
 8001338:	e005      	b.n	8001346 <Sensor_DeviceInit+0x1ae>
     PRINT_DBG("Error while adding BlueNRG2 HW service: 0x%02x\r\n", ret);
 800133a:	7dbb      	ldrb	r3, [r7, #22]
 800133c:	4619      	mov	r1, r3
 800133e:	4816      	ldr	r0, [pc, #88]	; (8001398 <Sensor_DeviceInit+0x200>)
 8001340:	f00a feb8 	bl	800c0b4 <iprintf>
     while(1);
 8001344:	e7fe      	b.n	8001344 <Sensor_DeviceInit+0x1ac>
}
 8001346:	4618      	mov	r0, r3
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	0800e7a0 	.word	0x0800e7a0
 8001354:	0800e4e4 	.word	0x0800e4e4
 8001358:	20000208 	.word	0x20000208
 800135c:	0800e4f8 	.word	0x0800e4f8
 8001360:	0800e51c 	.word	0x0800e51c
 8001364:	0800e544 	.word	0x0800e544
 8001368:	0800e574 	.word	0x0800e574
 800136c:	0800e5a0 	.word	0x0800e5a0
 8001370:	0800e5c4 	.word	0x0800e5c4
 8001374:	0800e5e4 	.word	0x0800e5e4
 8001378:	0800e604 	.word	0x0800e604
 800137c:	0800e620 	.word	0x0800e620
 8001380:	0800e650 	.word	0x0800e650
 8001384:	0001e240 	.word	0x0001e240
 8001388:	0800e67c 	.word	0x0800e67c
 800138c:	0800e6b8 	.word	0x0800e6b8
 8001390:	0800e6f0 	.word	0x0800e6f0
 8001394:	0800e714 	.word	0x0800e714
 8001398:	0800e740 	.word	0x0800e740
 800139c:	0800e774 	.word	0x0800e774

080013a0 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  /* Make the device discoverable */
  if(set_connectable)
 80013a6:	4b2d      	ldr	r3, [pc, #180]	; (800145c <User_Process+0xbc>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d007      	beq.n	80013c0 <User_Process+0x20>
  {
	  PRINT_DBG("connected");
 80013b0:	482b      	ldr	r0, [pc, #172]	; (8001460 <User_Process+0xc0>)
 80013b2:	f00a fe7f 	bl	800c0b4 <iprintf>
    Set_DeviceConnectable();
 80013b6:	f002 f9ff 	bl	80037b8 <Set_DeviceConnectable>
    set_connectable = FALSE;
 80013ba:	4b28      	ldr	r3, [pc, #160]	; (800145c <User_Process+0xbc>)
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);

    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 80013c0:	2000      	movs	r0, #0
 80013c2:	f002 fd5f 	bl	8003e84 <BSP_LED_Toggle>

    if (connected)
 80013c6:	4b27      	ldr	r3, [pc, #156]	; (8001464 <User_Process+0xc4>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d042      	beq.n	8001454 <User_Process+0xb4>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 80013ce:	f003 fa47 	bl	8004860 <HAL_GetTick>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f00a f8d9 	bl	800b58c <srand>

      read_temperature_and_pression(&data_t, &data_p);
 80013da:	463a      	mov	r2, r7
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 f84d 	bl	8001480 <read_temperature_and_pression>
      /* Update emulated Environmental data */
      //Set_Random_Environmental_Values(&data_t, &data_p);
      Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 80013e6:	edd7 7a00 	vldr	s15, [r7]
 80013ea:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001468 <User_Process+0xc8>
 80013ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f2:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80013f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013fa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001402:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001406:	ee17 3a90 	vmov	r3, s15
 800140a:	b21b      	sxth	r3, r3
 800140c:	4619      	mov	r1, r3
 800140e:	ee16 0a90 	vmov	r0, s13
 8001412:	f001 fe4d 	bl	80030b0 <Environmental_Update>

      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
      Set_Random_Motion_Values(counter);
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <User_Process+0xcc>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f8e4 	bl	80015e8 <Set_Random_Motion_Values>
      Acc_Update(&x_axes, &g_axes, &m_axes);
 8001420:	4a13      	ldr	r2, [pc, #76]	; (8001470 <User_Process+0xd0>)
 8001422:	4914      	ldr	r1, [pc, #80]	; (8001474 <User_Process+0xd4>)
 8001424:	4814      	ldr	r0, [pc, #80]	; (8001478 <User_Process+0xd8>)
 8001426:	f001 fc8d 	bl	8002d44 <Acc_Update>
      Quat_Update(&q_axes);
 800142a:	4814      	ldr	r0, [pc, #80]	; (800147c <User_Process+0xdc>)
 800142c:	f001 fd1c 	bl	8002e68 <Quat_Update>

      counter ++;
 8001430:	4b0e      	ldr	r3, [pc, #56]	; (800146c <User_Process+0xcc>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	3301      	adds	r3, #1
 8001436:	4a0d      	ldr	r2, [pc, #52]	; (800146c <User_Process+0xcc>)
 8001438:	6013      	str	r3, [r2, #0]
      if (counter == 40) {
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <User_Process+0xcc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b28      	cmp	r3, #40	; 0x28
 8001440:	d104      	bne.n	800144c <User_Process+0xac>
        counter = 0;
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <User_Process+0xcc>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
        Reset_Motion_Values();
 8001448:	f001 f93c 	bl	80026c4 <Reset_Motion_Values>
      }
#if !USE_BUTTON
      HAL_Delay(1000); /* wait 1 sec before sending new data */
 800144c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001450:	f003 fa12 	bl	8004878 <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000001 	.word	0x20000001
 8001460:	0800e7a8 	.word	0x0800e7a8
 8001464:	200007e0 	.word	0x200007e0
 8001468:	42c80000 	.word	0x42c80000
 800146c:	20000650 	.word	0x20000650
 8001470:	200007fc 	.word	0x200007fc
 8001474:	200007f0 	.word	0x200007f0
 8001478:	200007e4 	.word	0x200007e4
 800147c:	20000808 	.word	0x20000808

08001480 <read_temperature_and_pression>:
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
}

void read_temperature_and_pression(float *data_t, float *data_p)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  hts221_reg_t reg;
  hts221_status_get(&dev_ctx, &reg.status_reg);
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	4619      	mov	r1, r3
 8001490:	4846      	ldr	r0, [pc, #280]	; (80015ac <read_temperature_and_pression+0x12c>)
 8001492:	f002 ff00 	bl	8004296 <hts221_status_get>

  if (reg.status_reg.h_da) {
 8001496:	7b3b      	ldrb	r3, [r7, #12]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d02b      	beq.n	80014fa <read_temperature_and_pression+0x7a>
 80014a2:	4b43      	ldr	r3, [pc, #268]	; (80015b0 <read_temperature_and_pression+0x130>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	801a      	strh	r2, [r3, #0]
    /* Read humidity data */
    memset(&data_raw_humidity, 0x00, sizeof(int16_t));
    hts221_humidity_raw_get(&dev_ctx, &data_raw_humidity);
 80014a8:	4941      	ldr	r1, [pc, #260]	; (80015b0 <read_temperature_and_pression+0x130>)
 80014aa:	4840      	ldr	r0, [pc, #256]	; (80015ac <read_temperature_and_pression+0x12c>)
 80014ac:	f002 fe9c 	bl	80041e8 <hts221_humidity_raw_get>
    humidity_perc = linear_interpolation(&lin_hum, data_raw_humidity);
 80014b0:	4b3f      	ldr	r3, [pc, #252]	; (80015b0 <read_temperature_and_pression+0x130>)
 80014b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b6:	4619      	mov	r1, r3
 80014b8:	483e      	ldr	r0, [pc, #248]	; (80015b4 <read_temperature_and_pression+0x134>)
 80014ba:	f7ff fd6c 	bl	8000f96 <linear_interpolation>
 80014be:	eef0 7a40 	vmov.f32	s15, s0
 80014c2:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <read_temperature_and_pression+0x138>)
 80014c4:	edc3 7a00 	vstr	s15, [r3]

    if (humidity_perc < 0) {
 80014c8:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <read_temperature_and_pression+0x138>)
 80014ca:	edd3 7a00 	vldr	s15, [r3]
 80014ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	d503      	bpl.n	80014e0 <read_temperature_and_pression+0x60>
      humidity_perc = 0;
 80014d8:	4b37      	ldr	r3, [pc, #220]	; (80015b8 <read_temperature_and_pression+0x138>)
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
    }

    if (humidity_perc > 100) {
 80014e0:	4b35      	ldr	r3, [pc, #212]	; (80015b8 <read_temperature_and_pression+0x138>)
 80014e2:	edd3 7a00 	vldr	s15, [r3]
 80014e6:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80015bc <read_temperature_and_pression+0x13c>
 80014ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	dd02      	ble.n	80014fa <read_temperature_and_pression+0x7a>
      humidity_perc = 100;
 80014f4:	4b30      	ldr	r3, [pc, #192]	; (80015b8 <read_temperature_and_pression+0x138>)
 80014f6:	4a32      	ldr	r2, [pc, #200]	; (80015c0 <read_temperature_and_pression+0x140>)
 80014f8:	601a      	str	r2, [r3, #0]
    }


  }

  if (reg.status_reg.t_da) {
 80014fa:	7b3b      	ldrb	r3, [r7, #12]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d016      	beq.n	8001534 <read_temperature_and_pression+0xb4>
 8001506:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <read_temperature_and_pression+0x144>)
 8001508:	2200      	movs	r2, #0
 800150a:	801a      	strh	r2, [r3, #0]
    /* Read temperature data */
    memset(&data_raw_temperature, 0x00, sizeof(int16_t));
    hts221_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 800150c:	492d      	ldr	r1, [pc, #180]	; (80015c4 <read_temperature_and_pression+0x144>)
 800150e:	4827      	ldr	r0, [pc, #156]	; (80015ac <read_temperature_and_pression+0x12c>)
 8001510:	f002 fe8d 	bl	800422e <hts221_temperature_raw_get>
    temperature_degC = linear_interpolation(&lin_temp,
 8001514:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <read_temperature_and_pression+0x144>)
 8001516:	f9b3 3000 	ldrsh.w	r3, [r3]
 800151a:	4619      	mov	r1, r3
 800151c:	482a      	ldr	r0, [pc, #168]	; (80015c8 <read_temperature_and_pression+0x148>)
 800151e:	f7ff fd3a 	bl	8000f96 <linear_interpolation>
 8001522:	eef0 7a40 	vmov.f32	s15, s0
 8001526:	4b29      	ldr	r3, [pc, #164]	; (80015cc <read_temperature_and_pression+0x14c>)
 8001528:	edc3 7a00 	vstr	s15, [r3]
                                            data_raw_temperature);
    *data_t = temperature_degC;
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <read_temperature_and_pression+0x14c>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	601a      	str	r2, [r3, #0]
  }

	lps22hh_reg_t reg1;

  lps22hh_read_reg(&dev_ctx1, LPS22HH_STATUS, (uint8_t *)&reg1, 1);
 8001534:	f107 0208 	add.w	r2, r7, #8
 8001538:	2301      	movs	r3, #1
 800153a:	2127      	movs	r1, #39	; 0x27
 800153c:	4824      	ldr	r0, [pc, #144]	; (80015d0 <read_temperature_and_pression+0x150>)
 800153e:	f002 ffe9 	bl	8004514 <lps22hh_read_reg>

  	 if (reg1.status.p_da) {
 8001542:	7a3b      	ldrb	r3, [r7, #8]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d026      	beq.n	800159c <read_temperature_and_pression+0x11c>
 800154e:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <read_temperature_and_pression+0x154>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
  	   memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
  	   lps22hh_pressure_raw_get(&dev_ctx1, &data_raw_pressure);
 8001554:	491f      	ldr	r1, [pc, #124]	; (80015d4 <read_temperature_and_pression+0x154>)
 8001556:	481e      	ldr	r0, [pc, #120]	; (80015d0 <read_temperature_and_pression+0x150>)
 8001558:	f003 f898 	bl	800468c <lps22hh_pressure_raw_get>
  	   pressure_hPa = lps22hh_from_lsb_to_hpa( data_raw_pressure);
 800155c:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <read_temperature_and_pression+0x154>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f003 f807 	bl	8004574 <lps22hh_from_lsb_to_hpa>
 8001566:	eef0 7a40 	vmov.f32	s15, s0
 800156a:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <read_temperature_and_pression+0x158>)
 800156c:	edc3 7a00 	vstr	s15, [r3]
  	   sprintf((char *)tx_buffer, "pressure [hPa]:%6.2f\r\n", pressure_hPa);
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <read_temperature_and_pression+0x158>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe ffe7 	bl	8000548 <__aeabi_f2d>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4917      	ldr	r1, [pc, #92]	; (80015dc <read_temperature_and_pression+0x15c>)
 8001580:	4817      	ldr	r0, [pc, #92]	; (80015e0 <read_temperature_and_pression+0x160>)
 8001582:	f00a fe05 	bl	800c190 <siprintf>
  	   HAL_UART_Transmit(&huart2, tx_buffer, strlen((char const *)tx_buffer), 1000);
 8001586:	4816      	ldr	r0, [pc, #88]	; (80015e0 <read_temperature_and_pression+0x160>)
 8001588:	f7fe fe72 	bl	8000270 <strlen>
 800158c:	4603      	mov	r3, r0
 800158e:	b29a      	uxth	r2, r3
 8001590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001594:	4912      	ldr	r1, [pc, #72]	; (80015e0 <read_temperature_and_pression+0x160>)
 8001596:	4813      	ldr	r0, [pc, #76]	; (80015e4 <read_temperature_and_pression+0x164>)
 8001598:	f006 fbf0 	bl	8007d7c <HAL_UART_Transmit>
  	 }

  	*data_p = pressure_hPa;
 800159c:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <read_temperature_and_pression+0x158>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	601a      	str	r2, [r3, #0]
}
 80015a4:	bf00      	nop
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000610 	.word	0x20000610
 80015b0:	20000210 	.word	0x20000210
 80015b4:	20000630 	.word	0x20000630
 80015b8:	20000214 	.word	0x20000214
 80015bc:	42c80000 	.word	0x42c80000
 80015c0:	42c80000 	.word	0x42c80000
 80015c4:	20000212 	.word	0x20000212
 80015c8:	20000640 	.word	0x20000640
 80015cc:	20000218 	.word	0x20000218
 80015d0:	20000620 	.word	0x20000620
 80015d4:	20000604 	.word	0x20000604
 80015d8:	20000608 	.word	0x20000608
 80015dc:	0800e7b4 	.word	0x0800e7b4
 80015e0:	2000021c 	.word	0x2000021c
 80015e4:	20000880 	.word	0x20000880

080015e8 <Set_Random_Motion_Values>:
 *
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{
 80015e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015ec:	f5ad 7d7a 	sub.w	sp, sp, #1000	; 0x3e8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	f8c7 03e4 	str.w	r0, [r7, #996]	; 0x3e4
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 80015f6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80015fa:	2b13      	cmp	r3, #19
 80015fc:	f200 8426 	bhi.w	8001e4c <Set_Random_Motion_Values+0x864>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001600:	f009 fff2 	bl	800b5e8 <rand>
 8001604:	4603      	mov	r3, r0
 8001606:	17da      	asrs	r2, r3, #31
 8001608:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 800160c:	f8c7 232c 	str.w	r2, [r7, #812]	; 0x32c
 8001610:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001614:	2200      	movs	r2, #0
 8001616:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 800161a:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 800161e:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	; 0x328
 8001622:	462b      	mov	r3, r5
 8001624:	e9d7 abc8 	ldrd	sl, fp, [r7, #800]	; 0x320
 8001628:	4652      	mov	r2, sl
 800162a:	fb02 f203 	mul.w	r2, r2, r3
 800162e:	465b      	mov	r3, fp
 8001630:	4621      	mov	r1, r4
 8001632:	fb01 f303 	mul.w	r3, r1, r3
 8001636:	4413      	add	r3, r2
 8001638:	4622      	mov	r2, r4
 800163a:	4651      	mov	r1, sl
 800163c:	fba2 8901 	umull	r8, r9, r2, r1
 8001640:	444b      	add	r3, r9
 8001642:	4699      	mov	r9, r3
 8001644:	4642      	mov	r2, r8
 8001646:	464b      	mov	r3, r9
 8001648:	1891      	adds	r1, r2, r2
 800164a:	66b9      	str	r1, [r7, #104]	; 0x68
 800164c:	415b      	adcs	r3, r3
 800164e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001650:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001654:	eb12 0108 	adds.w	r1, r2, r8
 8001658:	f8c7 1318 	str.w	r1, [r7, #792]	; 0x318
 800165c:	eb43 0309 	adc.w	r3, r3, r9
 8001660:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8001664:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	; 0x318
 8001670:	f7ff faea 	bl	8000c48 <__aeabi_uldivmod>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	f112 010a 	adds.w	r1, r2, #10
 800167c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8001680:	f143 0300 	adc.w	r3, r3, #0
 8001684:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001688:	4bec      	ldr	r3, [pc, #944]	; (8001a3c <Set_Random_Motion_Values+0x454>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001692:	4413      	add	r3, r2
 8001694:	461a      	mov	r2, r3
 8001696:	4be9      	ldr	r3, [pc, #932]	; (8001a3c <Set_Random_Motion_Values+0x454>)
 8001698:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800169a:	f009 ffa5 	bl	800b5e8 <rand>
 800169e:	4603      	mov	r3, r0
 80016a0:	17da      	asrs	r2, r3, #31
 80016a2:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 80016a6:	f8c7 2314 	str.w	r2, [r7, #788]	; 0x314
 80016aa:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80016ae:	2200      	movs	r2, #0
 80016b0:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 80016b4:	f8c7 230c 	str.w	r2, [r7, #780]	; 0x30c
 80016b8:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	; 0x310
 80016bc:	462b      	mov	r3, r5
 80016be:	e9d7 89c2 	ldrd	r8, r9, [r7, #776]	; 0x308
 80016c2:	4642      	mov	r2, r8
 80016c4:	fb02 f203 	mul.w	r2, r2, r3
 80016c8:	464b      	mov	r3, r9
 80016ca:	4621      	mov	r1, r4
 80016cc:	fb01 f303 	mul.w	r3, r1, r3
 80016d0:	4413      	add	r3, r2
 80016d2:	4622      	mov	r2, r4
 80016d4:	4641      	mov	r1, r8
 80016d6:	fba2 1201 	umull	r1, r2, r2, r1
 80016da:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 80016de:	460a      	mov	r2, r1
 80016e0:	f8c7 23d8 	str.w	r2, [r7, #984]	; 0x3d8
 80016e4:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 80016e8:	4413      	add	r3, r2
 80016ea:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 80016ee:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	; 0x3d8
 80016f2:	4622      	mov	r2, r4
 80016f4:	462b      	mov	r3, r5
 80016f6:	f04f 0000 	mov.w	r0, #0
 80016fa:	f04f 0100 	mov.w	r1, #0
 80016fe:	0099      	lsls	r1, r3, #2
 8001700:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001704:	0090      	lsls	r0, r2, #2
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4621      	mov	r1, r4
 800170c:	1851      	adds	r1, r2, r1
 800170e:	f8c7 1300 	str.w	r1, [r7, #768]	; 0x300
 8001712:	4629      	mov	r1, r5
 8001714:	eb43 0101 	adc.w	r1, r3, r1
 8001718:	f8c7 1304 	str.w	r1, [r7, #772]	; 0x304
 800171c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	; 0x300
 8001728:	f7ff fa8e 	bl	8000c48 <__aeabi_uldivmod>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	f06f 0009 	mvn.w	r0, #9
 8001734:	f04f 31ff 	mov.w	r1, #4294967295
 8001738:	1a80      	subs	r0, r0, r2
 800173a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800173e:	eb61 0303 	sbc.w	r3, r1, r3
 8001742:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001746:	4bbd      	ldr	r3, [pc, #756]	; (8001a3c <Set_Random_Motion_Values+0x454>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	461a      	mov	r2, r3
 800174c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001750:	4413      	add	r3, r2
 8001752:	461a      	mov	r2, r3
 8001754:	4bb9      	ldr	r3, [pc, #740]	; (8001a3c <Set_Random_Motion_Values+0x454>)
 8001756:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001758:	f009 ff46 	bl	800b5e8 <rand>
 800175c:	4603      	mov	r3, r0
 800175e:	17da      	asrs	r2, r3, #31
 8001760:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 8001764:	f8c7 22fc 	str.w	r2, [r7, #764]	; 0x2fc
 8001768:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800176c:	2200      	movs	r2, #0
 800176e:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 8001772:	f8c7 22f4 	str.w	r2, [r7, #756]	; 0x2f4
 8001776:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	; 0x2f8
 800177a:	462b      	mov	r3, r5
 800177c:	e9d7 89bc 	ldrd	r8, r9, [r7, #752]	; 0x2f0
 8001780:	4642      	mov	r2, r8
 8001782:	fb02 f203 	mul.w	r2, r2, r3
 8001786:	464b      	mov	r3, r9
 8001788:	4621      	mov	r1, r4
 800178a:	fb01 f303 	mul.w	r3, r1, r3
 800178e:	4413      	add	r3, r2
 8001790:	4622      	mov	r2, r4
 8001792:	4641      	mov	r1, r8
 8001794:	fba2 1201 	umull	r1, r2, r2, r1
 8001798:	f8c7 23d4 	str.w	r2, [r7, #980]	; 0x3d4
 800179c:	460a      	mov	r2, r1
 800179e:	f8c7 23d0 	str.w	r2, [r7, #976]	; 0x3d0
 80017a2:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 80017a6:	4413      	add	r3, r2
 80017a8:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 80017ac:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	; 0x3d0
 80017b0:	4622      	mov	r2, r4
 80017b2:	462b      	mov	r3, r5
 80017b4:	f04f 0000 	mov.w	r0, #0
 80017b8:	f04f 0100 	mov.w	r1, #0
 80017bc:	00d9      	lsls	r1, r3, #3
 80017be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017c2:	00d0      	lsls	r0, r2, #3
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4621      	mov	r1, r4
 80017ca:	1a51      	subs	r1, r2, r1
 80017cc:	f8c7 12e8 	str.w	r1, [r7, #744]	; 0x2e8
 80017d0:	4629      	mov	r1, r5
 80017d2:	eb63 0301 	sbc.w	r3, r3, r1
 80017d6:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80017da:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	; 0x2e8
 80017e6:	f7ff fa2f 	bl	8000c48 <__aeabi_uldivmod>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	f112 010a 	adds.w	r1, r2, #10
 80017f2:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80017f6:	f143 0300 	adc.w	r3, r3, #0
 80017fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80017fe:	4b8f      	ldr	r3, [pc, #572]	; (8001a3c <Set_Random_Motion_Values+0x454>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	461a      	mov	r2, r3
 8001804:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001808:	4413      	add	r3, r2
 800180a:	461a      	mov	r2, r3
 800180c:	4b8b      	ldr	r3, [pc, #556]	; (8001a3c <Set_Random_Motion_Values+0x454>)
 800180e:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8001810:	f009 feea 	bl	800b5e8 <rand>
 8001814:	4603      	mov	r3, r0
 8001816:	17da      	asrs	r2, r3, #31
 8001818:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800181c:	f8c7 22e4 	str.w	r2, [r7, #740]	; 0x2e4
 8001820:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001824:	2200      	movs	r2, #0
 8001826:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 800182a:	f8c7 22dc 	str.w	r2, [r7, #732]	; 0x2dc
 800182e:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	; 0x2e0
 8001832:	462b      	mov	r3, r5
 8001834:	e9d7 89b6 	ldrd	r8, r9, [r7, #728]	; 0x2d8
 8001838:	4642      	mov	r2, r8
 800183a:	fb02 f203 	mul.w	r2, r2, r3
 800183e:	464b      	mov	r3, r9
 8001840:	4621      	mov	r1, r4
 8001842:	fb01 f303 	mul.w	r3, r1, r3
 8001846:	4413      	add	r3, r2
 8001848:	4622      	mov	r2, r4
 800184a:	4641      	mov	r1, r8
 800184c:	fba2 1201 	umull	r1, r2, r2, r1
 8001850:	f8c7 23cc 	str.w	r2, [r7, #972]	; 0x3cc
 8001854:	460a      	mov	r2, r1
 8001856:	f8c7 23c8 	str.w	r2, [r7, #968]	; 0x3c8
 800185a:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 800185e:	4413      	add	r3, r2
 8001860:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8001864:	e9d7 12f2 	ldrd	r1, r2, [r7, #968]	; 0x3c8
 8001868:	460b      	mov	r3, r1
 800186a:	18db      	adds	r3, r3, r3
 800186c:	663b      	str	r3, [r7, #96]	; 0x60
 800186e:	4613      	mov	r3, r2
 8001870:	eb42 0303 	adc.w	r3, r2, r3
 8001874:	667b      	str	r3, [r7, #100]	; 0x64
 8001876:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800187a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	f7ff f9e1 	bl	8000c48 <__aeabi_uldivmod>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 800188e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8001892:	f143 0300 	adc.w	r3, r3, #0
 8001896:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800189a:	4b69      	ldr	r3, [pc, #420]	; (8001a40 <Set_Random_Motion_Values+0x458>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018a4:	4413      	add	r3, r2
 80018a6:	461a      	mov	r2, r3
 80018a8:	4b65      	ldr	r3, [pc, #404]	; (8001a40 <Set_Random_Motion_Values+0x458>)
 80018aa:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 80018ac:	f009 fe9c 	bl	800b5e8 <rand>
 80018b0:	4603      	mov	r3, r0
 80018b2:	17da      	asrs	r2, r3, #31
 80018b4:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 80018b8:	f8c7 22d4 	str.w	r2, [r7, #724]	; 0x2d4
 80018bc:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80018c0:	2200      	movs	r2, #0
 80018c2:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 80018c6:	f8c7 22cc 	str.w	r2, [r7, #716]	; 0x2cc
 80018ca:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	; 0x2d0
 80018ce:	462b      	mov	r3, r5
 80018d0:	e9d7 89b2 	ldrd	r8, r9, [r7, #712]	; 0x2c8
 80018d4:	4642      	mov	r2, r8
 80018d6:	fb02 f203 	mul.w	r2, r2, r3
 80018da:	464b      	mov	r3, r9
 80018dc:	4621      	mov	r1, r4
 80018de:	fb01 f303 	mul.w	r3, r1, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	4622      	mov	r2, r4
 80018e6:	4641      	mov	r1, r8
 80018e8:	fba2 1201 	umull	r1, r2, r2, r1
 80018ec:	f8c7 23c4 	str.w	r2, [r7, #964]	; 0x3c4
 80018f0:	460a      	mov	r2, r1
 80018f2:	f8c7 23c0 	str.w	r2, [r7, #960]	; 0x3c0
 80018f6:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 80018fa:	4413      	add	r3, r2
 80018fc:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8001900:	f04f 0000 	mov.w	r0, #0
 8001904:	f04f 0100 	mov.w	r1, #0
 8001908:	e9d7 45f0 	ldrd	r4, r5, [r7, #960]	; 0x3c0
 800190c:	462b      	mov	r3, r5
 800190e:	0099      	lsls	r1, r3, #2
 8001910:	4623      	mov	r3, r4
 8001912:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001916:	4623      	mov	r3, r4
 8001918:	0098      	lsls	r0, r3, #2
 800191a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	f7ff f991 	bl	8000c48 <__aeabi_uldivmod>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800192e:	f04f 31ff 	mov.w	r1, #4294967295
 8001932:	1a80      	subs	r0, r0, r2
 8001934:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8001938:	eb61 0303 	sbc.w	r3, r1, r3
 800193c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001940:	4b3f      	ldr	r3, [pc, #252]	; (8001a40 <Set_Random_Motion_Values+0x458>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	461a      	mov	r2, r3
 8001946:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800194a:	4413      	add	r3, r2
 800194c:	461a      	mov	r2, r3
 800194e:	4b3c      	ldr	r3, [pc, #240]	; (8001a40 <Set_Random_Motion_Values+0x458>)
 8001950:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8001952:	f009 fe49 	bl	800b5e8 <rand>
 8001956:	4603      	mov	r3, r0
 8001958:	17da      	asrs	r2, r3, #31
 800195a:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 800195e:	f8c7 22c4 	str.w	r2, [r7, #708]	; 0x2c4
 8001962:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001966:	2200      	movs	r2, #0
 8001968:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 800196c:	f8c7 22bc 	str.w	r2, [r7, #700]	; 0x2bc
 8001970:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	; 0x2c0
 8001974:	462b      	mov	r3, r5
 8001976:	e9d7 89ae 	ldrd	r8, r9, [r7, #696]	; 0x2b8
 800197a:	4642      	mov	r2, r8
 800197c:	fb02 f203 	mul.w	r2, r2, r3
 8001980:	464b      	mov	r3, r9
 8001982:	4621      	mov	r1, r4
 8001984:	fb01 f303 	mul.w	r3, r1, r3
 8001988:	4413      	add	r3, r2
 800198a:	4622      	mov	r2, r4
 800198c:	4641      	mov	r1, r8
 800198e:	fba2 1201 	umull	r1, r2, r2, r1
 8001992:	f8c7 23bc 	str.w	r2, [r7, #956]	; 0x3bc
 8001996:	460a      	mov	r2, r1
 8001998:	f8c7 23b8 	str.w	r2, [r7, #952]	; 0x3b8
 800199c:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 80019a0:	4413      	add	r3, r2
 80019a2:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 80019a6:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	; 0x3b8
 80019aa:	4622      	mov	r2, r4
 80019ac:	462b      	mov	r3, r5
 80019ae:	1891      	adds	r1, r2, r2
 80019b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80019b2:	415b      	adcs	r3, r3
 80019b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80019ba:	4621      	mov	r1, r4
 80019bc:	1851      	adds	r1, r2, r1
 80019be:	6539      	str	r1, [r7, #80]	; 0x50
 80019c0:	4629      	mov	r1, r5
 80019c2:	eb43 0101 	adc.w	r1, r3, r1
 80019c6:	6579      	str	r1, [r7, #84]	; 0x54
 80019c8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80019cc:	460b      	mov	r3, r1
 80019ce:	18db      	adds	r3, r3, r3
 80019d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80019d2:	4613      	mov	r3, r2
 80019d4:	eb42 0303 	adc.w	r3, r2, r3
 80019d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019da:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80019de:	4618      	mov	r0, r3
 80019e0:	4621      	mov	r1, r4
 80019e2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	f7ff f92d 	bl	8000c48 <__aeabi_uldivmod>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 80019f6:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80019fa:	f143 0300 	adc.w	r3, r3, #0
 80019fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001a02:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <Set_Random_Motion_Values+0x458>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	461a      	mov	r2, r3
 8001a08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a0c:	4413      	add	r3, r2
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <Set_Random_Motion_Values+0x458>)
 8001a12:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001a14:	f009 fde8 	bl	800b5e8 <rand>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	17da      	asrs	r2, r3, #31
 8001a1c:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8001a20:	f8c7 22b4 	str.w	r2, [r7, #692]	; 0x2b4
 8001a24:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 8001a2e:	f8c7 22ac 	str.w	r2, [r7, #684]	; 0x2ac
 8001a32:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	; 0x2b0
 8001a36:	462b      	mov	r3, r5
 8001a38:	e004      	b.n	8001a44 <Set_Random_Motion_Values+0x45c>
 8001a3a:	bf00      	nop
 8001a3c:	200007e4 	.word	0x200007e4
 8001a40:	200007f0 	.word	0x200007f0
 8001a44:	e9d7 89aa 	ldrd	r8, r9, [r7, #680]	; 0x2a8
 8001a48:	4642      	mov	r2, r8
 8001a4a:	fb02 f203 	mul.w	r2, r2, r3
 8001a4e:	464b      	mov	r3, r9
 8001a50:	4621      	mov	r1, r4
 8001a52:	fb01 f303 	mul.w	r3, r1, r3
 8001a56:	4413      	add	r3, r2
 8001a58:	4622      	mov	r2, r4
 8001a5a:	4641      	mov	r1, r8
 8001a5c:	fba2 1201 	umull	r1, r2, r2, r1
 8001a60:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
 8001a64:	460a      	mov	r2, r1
 8001a66:	f8c7 23b0 	str.w	r2, [r7, #944]	; 0x3b0
 8001a6a:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 8001a6e:	4413      	add	r3, r2
 8001a70:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8001a74:	e9d7 45ec 	ldrd	r4, r5, [r7, #944]	; 0x3b0
 8001a78:	4622      	mov	r2, r4
 8001a7a:	462b      	mov	r3, r5
 8001a7c:	1891      	adds	r1, r2, r2
 8001a7e:	6439      	str	r1, [r7, #64]	; 0x40
 8001a80:	415b      	adcs	r3, r3
 8001a82:	647b      	str	r3, [r7, #68]	; 0x44
 8001a84:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001a88:	4621      	mov	r1, r4
 8001a8a:	1851      	adds	r1, r2, r1
 8001a8c:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 8001a90:	4629      	mov	r1, r5
 8001a92:	eb43 0101 	adc.w	r1, r3, r1
 8001a96:	f8c7 12a4 	str.w	r1, [r7, #676]	; 0x2a4
 8001a9a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 8001aa6:	f7ff f8cf 	bl	8000c48 <__aeabi_uldivmod>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	1cd1      	adds	r1, r2, #3
 8001ab0:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8001ab4:	f143 0300 	adc.w	r3, r3, #0
 8001ab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001abc:	4be1      	ldr	r3, [pc, #900]	; (8001e44 <Set_Random_Motion_Values+0x85c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ac6:	4413      	add	r3, r2
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4bde      	ldr	r3, [pc, #888]	; (8001e44 <Set_Random_Motion_Values+0x85c>)
 8001acc:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8001ace:	f009 fd8b 	bl	800b5e8 <rand>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	17da      	asrs	r2, r3, #31
 8001ad6:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8001ada:	f8c7 229c 	str.w	r2, [r7, #668]	; 0x29c
 8001ade:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8001ae8:	f8c7 2294 	str.w	r2, [r7, #660]	; 0x294
 8001aec:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	; 0x298
 8001af0:	462b      	mov	r3, r5
 8001af2:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	; 0x290
 8001af6:	4642      	mov	r2, r8
 8001af8:	fb02 f203 	mul.w	r2, r2, r3
 8001afc:	464b      	mov	r3, r9
 8001afe:	4621      	mov	r1, r4
 8001b00:	fb01 f303 	mul.w	r3, r1, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	4622      	mov	r2, r4
 8001b08:	4641      	mov	r1, r8
 8001b0a:	fba2 1201 	umull	r1, r2, r2, r1
 8001b0e:	f8c7 23ac 	str.w	r2, [r7, #940]	; 0x3ac
 8001b12:	460a      	mov	r2, r1
 8001b14:	f8c7 23a8 	str.w	r2, [r7, #936]	; 0x3a8
 8001b18:	f8d7 23ac 	ldr.w	r2, [r7, #940]	; 0x3ac
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8001b22:	f04f 0000 	mov.w	r0, #0
 8001b26:	f04f 0100 	mov.w	r1, #0
 8001b2a:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	; 0x3a8
 8001b2e:	462b      	mov	r3, r5
 8001b30:	0099      	lsls	r1, r3, #2
 8001b32:	4623      	mov	r3, r4
 8001b34:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8001b38:	4623      	mov	r3, r4
 8001b3a:	0098      	lsls	r0, r3, #2
 8001b3c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	f7ff f880 	bl	8000c48 <__aeabi_uldivmod>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	f06f 0002 	mvn.w	r0, #2
 8001b50:	f04f 31ff 	mov.w	r1, #4294967295
 8001b54:	1a80      	subs	r0, r0, r2
 8001b56:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 8001b5a:	eb61 0303 	sbc.w	r3, r1, r3
 8001b5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b62:	4bb8      	ldr	r3, [pc, #736]	; (8001e44 <Set_Random_Motion_Values+0x85c>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	461a      	mov	r2, r3
 8001b68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b6c:	4413      	add	r3, r2
 8001b6e:	461a      	mov	r2, r3
 8001b70:	4bb4      	ldr	r3, [pc, #720]	; (8001e44 <Set_Random_Motion_Values+0x85c>)
 8001b72:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001b74:	f009 fd38 	bl	800b5e8 <rand>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	17da      	asrs	r2, r3, #31
 8001b7c:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 8001b80:	f8c7 228c 	str.w	r2, [r7, #652]	; 0x28c
 8001b84:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 8001b8e:	f8c7 2284 	str.w	r2, [r7, #644]	; 0x284
 8001b92:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	; 0x288
 8001b96:	462b      	mov	r3, r5
 8001b98:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	; 0x280
 8001b9c:	4642      	mov	r2, r8
 8001b9e:	fb02 f203 	mul.w	r2, r2, r3
 8001ba2:	464b      	mov	r3, r9
 8001ba4:	4621      	mov	r1, r4
 8001ba6:	fb01 f303 	mul.w	r3, r1, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	4622      	mov	r2, r4
 8001bae:	4641      	mov	r1, r8
 8001bb0:	fba2 1201 	umull	r1, r2, r2, r1
 8001bb4:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 8001bb8:	460a      	mov	r2, r1
 8001bba:	f8c7 23a0 	str.w	r2, [r7, #928]	; 0x3a0
 8001bbe:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 8001bc8:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	; 0x3a0
 8001bcc:	4622      	mov	r2, r4
 8001bce:	462b      	mov	r3, r5
 8001bd0:	f04f 0000 	mov.w	r0, #0
 8001bd4:	f04f 0100 	mov.w	r1, #0
 8001bd8:	0099      	lsls	r1, r3, #2
 8001bda:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001bde:	0090      	lsls	r0, r2, #2
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4621      	mov	r1, r4
 8001be6:	1851      	adds	r1, r2, r1
 8001be8:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8001bec:	4629      	mov	r1, r5
 8001bee:	eb43 0101 	adc.w	r1, r3, r1
 8001bf2:	f8c7 127c 	str.w	r1, [r7, #636]	; 0x27c
 8001bf6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8001c02:	f7ff f821 	bl	8000c48 <__aeabi_uldivmod>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	1cd1      	adds	r1, r2, #3
 8001c0c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001c10:	f143 0300 	adc.w	r3, r3, #0
 8001c14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001c18:	4b8a      	ldr	r3, [pc, #552]	; (8001e44 <Set_Random_Motion_Values+0x85c>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c22:	4413      	add	r3, r2
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b87      	ldr	r3, [pc, #540]	; (8001e44 <Set_Random_Motion_Values+0x85c>)
 8001c28:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001c2a:	f009 fcdd 	bl	800b5e8 <rand>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	17da      	asrs	r2, r3, #31
 8001c32:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8001c36:	f8c7 2274 	str.w	r2, [r7, #628]	; 0x274
 8001c3a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8001c44:	f8c7 226c 	str.w	r2, [r7, #620]	; 0x26c
 8001c48:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	; 0x270
 8001c4c:	462b      	mov	r3, r5
 8001c4e:	e9d7 899a 	ldrd	r8, r9, [r7, #616]	; 0x268
 8001c52:	4642      	mov	r2, r8
 8001c54:	fb02 f203 	mul.w	r2, r2, r3
 8001c58:	464b      	mov	r3, r9
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	fb01 f303 	mul.w	r3, r1, r3
 8001c60:	4413      	add	r3, r2
 8001c62:	4622      	mov	r2, r4
 8001c64:	4641      	mov	r1, r8
 8001c66:	fba2 1201 	umull	r1, r2, r2, r1
 8001c6a:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 8001c6e:	460a      	mov	r2, r1
 8001c70:	f8c7 2398 	str.w	r2, [r7, #920]	; 0x398
 8001c74:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
 8001c78:	4413      	add	r3, r2
 8001c7a:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 8001c7e:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	; 0x398
 8001c82:	4622      	mov	r2, r4
 8001c84:	462b      	mov	r3, r5
 8001c86:	1891      	adds	r1, r2, r2
 8001c88:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c8a:	415b      	adcs	r3, r3
 8001c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c8e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c92:	4621      	mov	r1, r4
 8001c94:	1851      	adds	r1, r2, r1
 8001c96:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	eb43 0101 	adc.w	r1, r3, r1
 8001ca0:	f8c7 1264 	str.w	r1, [r7, #612]	; 0x264
 8001ca4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001ca8:	f04f 0300 	mov.w	r3, #0
 8001cac:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	; 0x260
 8001cb0:	f7fe ffca 	bl	8000c48 <__aeabi_uldivmod>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8001cbc:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8001cc0:	f143 0300 	adc.w	r3, r3, #0
 8001cc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001cc8:	4b5f      	ldr	r3, [pc, #380]	; (8001e48 <Set_Random_Motion_Values+0x860>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b5c      	ldr	r3, [pc, #368]	; (8001e48 <Set_Random_Motion_Values+0x860>)
 8001cd8:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001cda:	f009 fc85 	bl	800b5e8 <rand>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	17da      	asrs	r2, r3, #31
 8001ce2:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8001ce6:	f8c7 225c 	str.w	r2, [r7, #604]	; 0x25c
 8001cea:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8001cf4:	f8c7 2254 	str.w	r2, [r7, #596]	; 0x254
 8001cf8:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	; 0x258
 8001cfc:	462b      	mov	r3, r5
 8001cfe:	e9d7 8994 	ldrd	r8, r9, [r7, #592]	; 0x250
 8001d02:	4642      	mov	r2, r8
 8001d04:	fb02 f203 	mul.w	r2, r2, r3
 8001d08:	464b      	mov	r3, r9
 8001d0a:	4621      	mov	r1, r4
 8001d0c:	fb01 f303 	mul.w	r3, r1, r3
 8001d10:	4413      	add	r3, r2
 8001d12:	4622      	mov	r2, r4
 8001d14:	4641      	mov	r1, r8
 8001d16:	fba2 1201 	umull	r1, r2, r2, r1
 8001d1a:	f8c7 2394 	str.w	r2, [r7, #916]	; 0x394
 8001d1e:	460a      	mov	r2, r1
 8001d20:	f8c7 2390 	str.w	r2, [r7, #912]	; 0x390
 8001d24:	f8d7 2394 	ldr.w	r2, [r7, #916]	; 0x394
 8001d28:	4413      	add	r3, r2
 8001d2a:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 8001d2e:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	; 0x390
 8001d32:	4622      	mov	r2, r4
 8001d34:	462b      	mov	r3, r5
 8001d36:	f04f 0000 	mov.w	r0, #0
 8001d3a:	f04f 0100 	mov.w	r1, #0
 8001d3e:	0099      	lsls	r1, r3, #2
 8001d40:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001d44:	0090      	lsls	r0, r2, #2
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	1851      	adds	r1, r2, r1
 8001d4e:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 8001d52:	4629      	mov	r1, r5
 8001d54:	eb43 0101 	adc.w	r1, r3, r1
 8001d58:	f8c7 124c 	str.w	r1, [r7, #588]	; 0x24c
 8001d5c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	; 0x248
 8001d68:	f7fe ff6e 	bl	8000c48 <__aeabi_uldivmod>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8001d74:	67b9      	str	r1, [r7, #120]	; 0x78
 8001d76:	f143 0300 	adc.w	r3, r3, #0
 8001d7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d7c:	4b32      	ldr	r3, [pc, #200]	; (8001e48 <Set_Random_Motion_Values+0x860>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	461a      	mov	r2, r3
 8001d82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d84:	4413      	add	r3, r2
 8001d86:	461a      	mov	r2, r3
 8001d88:	4b2f      	ldr	r3, [pc, #188]	; (8001e48 <Set_Random_Motion_Values+0x860>)
 8001d8a:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001d8c:	f009 fc2c 	bl	800b5e8 <rand>
 8001d90:	4603      	mov	r3, r0
 8001d92:	17da      	asrs	r2, r3, #31
 8001d94:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8001d98:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 8001d9c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001da0:	2200      	movs	r2, #0
 8001da2:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8001da6:	f8c7 223c 	str.w	r2, [r7, #572]	; 0x23c
 8001daa:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 8001dae:	462b      	mov	r3, r5
 8001db0:	e9d7 898e 	ldrd	r8, r9, [r7, #568]	; 0x238
 8001db4:	4642      	mov	r2, r8
 8001db6:	fb02 f203 	mul.w	r2, r2, r3
 8001dba:	464b      	mov	r3, r9
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	fb01 f303 	mul.w	r3, r1, r3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	4622      	mov	r2, r4
 8001dc6:	4641      	mov	r1, r8
 8001dc8:	fba2 1201 	umull	r1, r2, r2, r1
 8001dcc:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 8001dd0:	460a      	mov	r2, r1
 8001dd2:	f8c7 2388 	str.w	r2, [r7, #904]	; 0x388
 8001dd6:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 8001dda:	4413      	add	r3, r2
 8001ddc:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 8001de0:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	; 0x388
 8001de4:	4622      	mov	r2, r4
 8001de6:	462b      	mov	r3, r5
 8001de8:	f04f 0000 	mov.w	r0, #0
 8001dec:	f04f 0100 	mov.w	r1, #0
 8001df0:	00d9      	lsls	r1, r3, #3
 8001df2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001df6:	00d0      	lsls	r0, r2, #3
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	1a51      	subs	r1, r2, r1
 8001e00:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 8001e04:	4629      	mov	r1, r5
 8001e06:	eb63 0301 	sbc.w	r3, r3, r1
 8001e0a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8001e0e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8001e1a:	f7fe ff15 	bl	8000c48 <__aeabi_uldivmod>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8001e26:	6739      	str	r1, [r7, #112]	; 0x70
 8001e28:	f143 0300 	adc.w	r3, r3, #0
 8001e2c:	677b      	str	r3, [r7, #116]	; 0x74
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <Set_Random_Motion_Values+0x860>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	461a      	mov	r2, r3
 8001e34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <Set_Random_Motion_Values+0x860>)
 8001e3c:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }
}
 8001e3e:	f000 bc37 	b.w	80026b0 <Set_Random_Motion_Values+0x10c8>
 8001e42:	bf00      	nop
 8001e44:	200007fc 	.word	0x200007fc
 8001e48:	20000808 	.word	0x20000808
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8001e4c:	f009 fbcc 	bl	800b5e8 <rand>
 8001e50:	4603      	mov	r3, r0
 8001e52:	17da      	asrs	r2, r3, #31
 8001e54:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001e58:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 8001e5c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001e60:	2200      	movs	r2, #0
 8001e62:	469a      	mov	sl, r3
 8001e64:	4693      	mov	fp, r2
 8001e66:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	fb0a f203 	mul.w	r2, sl, r3
 8001e70:	4603      	mov	r3, r0
 8001e72:	fb03 f30b 	mul.w	r3, r3, fp
 8001e76:	4413      	add	r3, r2
 8001e78:	4602      	mov	r2, r0
 8001e7a:	fba2 450a 	umull	r4, r5, r2, sl
 8001e7e:	442b      	add	r3, r5
 8001e80:	461d      	mov	r5, r3
 8001e82:	4622      	mov	r2, r4
 8001e84:	462b      	mov	r3, r5
 8001e86:	1891      	adds	r1, r2, r2
 8001e88:	6339      	str	r1, [r7, #48]	; 0x30
 8001e8a:	415b      	adcs	r3, r3
 8001e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e8e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e92:	1911      	adds	r1, r2, r4
 8001e94:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 8001e98:	416b      	adcs	r3, r5
 8001e9a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001e9e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8001eaa:	f7fe fecd 	bl	8000c48 <__aeabi_uldivmod>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	f06f 0009 	mvn.w	r0, #9
 8001eb6:	f04f 31ff 	mov.w	r1, #4294967295
 8001eba:	1a80      	subs	r0, r0, r2
 8001ebc:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 8001ec0:	eb61 0303 	sbc.w	r3, r1, r3
 8001ec4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001ec8:	4beb      	ldr	r3, [pc, #940]	; (8002278 <Set_Random_Motion_Values+0xc90>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ed2:	4413      	add	r3, r2
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4be8      	ldr	r3, [pc, #928]	; (8002278 <Set_Random_Motion_Values+0xc90>)
 8001ed8:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8001eda:	f009 fb85 	bl	800b5e8 <rand>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	17da      	asrs	r2, r3, #31
 8001ee2:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001ee6:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8001eea:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8001ef4:	f8c7 2214 	str.w	r2, [r7, #532]	; 0x214
 8001ef8:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 8001efc:	462b      	mov	r3, r5
 8001efe:	e9d7 8984 	ldrd	r8, r9, [r7, #528]	; 0x210
 8001f02:	4642      	mov	r2, r8
 8001f04:	fb02 f203 	mul.w	r2, r2, r3
 8001f08:	464b      	mov	r3, r9
 8001f0a:	4621      	mov	r1, r4
 8001f0c:	fb01 f303 	mul.w	r3, r1, r3
 8001f10:	4413      	add	r3, r2
 8001f12:	4622      	mov	r2, r4
 8001f14:	4641      	mov	r1, r8
 8001f16:	fba2 1201 	umull	r1, r2, r2, r1
 8001f1a:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
 8001f1e:	460a      	mov	r2, r1
 8001f20:	f8c7 2380 	str.w	r2, [r7, #896]	; 0x380
 8001f24:	f8d7 2384 	ldr.w	r2, [r7, #900]	; 0x384
 8001f28:	4413      	add	r3, r2
 8001f2a:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8001f2e:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	; 0x380
 8001f32:	4622      	mov	r2, r4
 8001f34:	462b      	mov	r3, r5
 8001f36:	f04f 0000 	mov.w	r0, #0
 8001f3a:	f04f 0100 	mov.w	r1, #0
 8001f3e:	0099      	lsls	r1, r3, #2
 8001f40:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001f44:	0090      	lsls	r0, r2, #2
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	1851      	adds	r1, r2, r1
 8001f4e:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8001f52:	4629      	mov	r1, r5
 8001f54:	eb43 0101 	adc.w	r1, r3, r1
 8001f58:	f8c7 120c 	str.w	r1, [r7, #524]	; 0x20c
 8001f5c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8001f68:	f7fe fe6e 	bl	8000c48 <__aeabi_uldivmod>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	f112 010a 	adds.w	r1, r2, #10
 8001f74:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8001f78:	f143 0300 	adc.w	r3, r3, #0
 8001f7c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f80:	4bbd      	ldr	r3, [pc, #756]	; (8002278 <Set_Random_Motion_Values+0xc90>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	461a      	mov	r2, r3
 8001f86:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f8a:	4413      	add	r3, r2
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4bba      	ldr	r3, [pc, #744]	; (8002278 <Set_Random_Motion_Values+0xc90>)
 8001f90:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8001f92:	f009 fb29 	bl	800b5e8 <rand>
 8001f96:	4603      	mov	r3, r0
 8001f98:	17da      	asrs	r2, r3, #31
 8001f9a:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8001f9e:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8001fa2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8001fac:	f8c7 21fc 	str.w	r2, [r7, #508]	; 0x1fc
 8001fb0:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	; 0x200
 8001fb4:	462b      	mov	r3, r5
 8001fb6:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	; 0x1f8
 8001fba:	4642      	mov	r2, r8
 8001fbc:	fb02 f203 	mul.w	r2, r2, r3
 8001fc0:	464b      	mov	r3, r9
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	fb01 f303 	mul.w	r3, r1, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	4622      	mov	r2, r4
 8001fcc:	4641      	mov	r1, r8
 8001fce:	fba2 1201 	umull	r1, r2, r2, r1
 8001fd2:	f8c7 237c 	str.w	r2, [r7, #892]	; 0x37c
 8001fd6:	460a      	mov	r2, r1
 8001fd8:	f8c7 2378 	str.w	r2, [r7, #888]	; 0x378
 8001fdc:	f8d7 237c 	ldr.w	r2, [r7, #892]	; 0x37c
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8001fe6:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	; 0x378
 8001fea:	4622      	mov	r2, r4
 8001fec:	462b      	mov	r3, r5
 8001fee:	f04f 0000 	mov.w	r0, #0
 8001ff2:	f04f 0100 	mov.w	r1, #0
 8001ff6:	00d9      	lsls	r1, r3, #3
 8001ff8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ffc:	00d0      	lsls	r0, r2, #3
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4621      	mov	r1, r4
 8002004:	1a51      	subs	r1, r2, r1
 8002006:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 800200a:	4629      	mov	r1, r5
 800200c:	eb63 0301 	sbc.w	r3, r3, r1
 8002010:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8002014:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8002020:	f7fe fe12 	bl	8000c48 <__aeabi_uldivmod>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	f06f 0009 	mvn.w	r0, #9
 800202c:	f04f 31ff 	mov.w	r1, #4294967295
 8002030:	1a80      	subs	r0, r0, r2
 8002032:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8002036:	eb61 0303 	sbc.w	r3, r1, r3
 800203a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800203e:	4b8e      	ldr	r3, [pc, #568]	; (8002278 <Set_Random_Motion_Values+0xc90>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	461a      	mov	r2, r3
 8002044:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002048:	4413      	add	r3, r2
 800204a:	461a      	mov	r2, r3
 800204c:	4b8a      	ldr	r3, [pc, #552]	; (8002278 <Set_Random_Motion_Values+0xc90>)
 800204e:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8002050:	f009 faca 	bl	800b5e8 <rand>
 8002054:	4603      	mov	r3, r0
 8002056:	17da      	asrs	r2, r3, #31
 8002058:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800205c:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 8002060:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002064:	2200      	movs	r2, #0
 8002066:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800206a:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 800206e:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 8002072:	462b      	mov	r3, r5
 8002074:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	; 0x1e0
 8002078:	4642      	mov	r2, r8
 800207a:	fb02 f203 	mul.w	r2, r2, r3
 800207e:	464b      	mov	r3, r9
 8002080:	4621      	mov	r1, r4
 8002082:	fb01 f303 	mul.w	r3, r1, r3
 8002086:	4413      	add	r3, r2
 8002088:	4622      	mov	r2, r4
 800208a:	4641      	mov	r1, r8
 800208c:	fba2 1201 	umull	r1, r2, r2, r1
 8002090:	f8c7 2374 	str.w	r2, [r7, #884]	; 0x374
 8002094:	460a      	mov	r2, r1
 8002096:	f8c7 2370 	str.w	r2, [r7, #880]	; 0x370
 800209a:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 800209e:	4413      	add	r3, r2
 80020a0:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 80020a4:	e9d7 12dc 	ldrd	r1, r2, [r7, #880]	; 0x370
 80020a8:	460b      	mov	r3, r1
 80020aa:	18db      	adds	r3, r3, r3
 80020ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80020ae:	4613      	mov	r3, r2
 80020b0:	eb42 0303 	adc.w	r3, r2, r3
 80020b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020ba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80020be:	f04f 0300 	mov.w	r3, #0
 80020c2:	f7fe fdc1 	bl	8000c48 <__aeabi_uldivmod>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	f06f 0063 	mvn.w	r0, #99	; 0x63
 80020ce:	f04f 31ff 	mov.w	r1, #4294967295
 80020d2:	1a80      	subs	r0, r0, r2
 80020d4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 80020d8:	eb61 0303 	sbc.w	r3, r1, r3
 80020dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80020e0:	4b66      	ldr	r3, [pc, #408]	; (800227c <Set_Random_Motion_Values+0xc94>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	461a      	mov	r2, r3
 80020e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80020ea:	4413      	add	r3, r2
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b63      	ldr	r3, [pc, #396]	; (800227c <Set_Random_Motion_Values+0xc94>)
 80020f0:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 80020f2:	f009 fa79 	bl	800b5e8 <rand>
 80020f6:	4603      	mov	r3, r0
 80020f8:	17da      	asrs	r2, r3, #31
 80020fa:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80020fe:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002102:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002106:	2200      	movs	r2, #0
 8002108:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800210c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 8002110:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 8002114:	462b      	mov	r3, r5
 8002116:	e9d7 8974 	ldrd	r8, r9, [r7, #464]	; 0x1d0
 800211a:	4642      	mov	r2, r8
 800211c:	fb02 f203 	mul.w	r2, r2, r3
 8002120:	464b      	mov	r3, r9
 8002122:	4621      	mov	r1, r4
 8002124:	fb01 f303 	mul.w	r3, r1, r3
 8002128:	4413      	add	r3, r2
 800212a:	4622      	mov	r2, r4
 800212c:	4641      	mov	r1, r8
 800212e:	fba2 1201 	umull	r1, r2, r2, r1
 8002132:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 8002136:	460a      	mov	r2, r1
 8002138:	f8c7 2368 	str.w	r2, [r7, #872]	; 0x368
 800213c:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8002140:	4413      	add	r3, r2
 8002142:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8002146:	f04f 0000 	mov.w	r0, #0
 800214a:	f04f 0100 	mov.w	r1, #0
 800214e:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	; 0x368
 8002152:	462b      	mov	r3, r5
 8002154:	0099      	lsls	r1, r3, #2
 8002156:	4623      	mov	r3, r4
 8002158:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 800215c:	4623      	mov	r3, r4
 800215e:	0098      	lsls	r0, r3, #2
 8002160:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	f7fe fd6e 	bl	8000c48 <__aeabi_uldivmod>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8002174:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8002178:	f143 0300 	adc.w	r3, r3, #0
 800217c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002180:	4b3e      	ldr	r3, [pc, #248]	; (800227c <Set_Random_Motion_Values+0xc94>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	461a      	mov	r2, r3
 8002186:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800218a:	4413      	add	r3, r2
 800218c:	461a      	mov	r2, r3
 800218e:	4b3b      	ldr	r3, [pc, #236]	; (800227c <Set_Random_Motion_Values+0xc94>)
 8002190:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8002192:	f009 fa29 	bl	800b5e8 <rand>
 8002196:	4603      	mov	r3, r0
 8002198:	17da      	asrs	r2, r3, #31
 800219a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800219e:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80021a2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80021a6:	2200      	movs	r2, #0
 80021a8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80021ac:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80021b0:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	; 0x1c8
 80021b4:	462b      	mov	r3, r5
 80021b6:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 80021ba:	4642      	mov	r2, r8
 80021bc:	fb02 f203 	mul.w	r2, r2, r3
 80021c0:	464b      	mov	r3, r9
 80021c2:	4621      	mov	r1, r4
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	4413      	add	r3, r2
 80021ca:	4622      	mov	r2, r4
 80021cc:	4641      	mov	r1, r8
 80021ce:	fba2 1201 	umull	r1, r2, r2, r1
 80021d2:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 80021d6:	460a      	mov	r2, r1
 80021d8:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 80021dc:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 80021e0:	4413      	add	r3, r2
 80021e2:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 80021e6:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	; 0x360
 80021ea:	4622      	mov	r2, r4
 80021ec:	462b      	mov	r3, r5
 80021ee:	1891      	adds	r1, r2, r2
 80021f0:	6239      	str	r1, [r7, #32]
 80021f2:	415b      	adcs	r3, r3
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
 80021f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021fa:	4621      	mov	r1, r4
 80021fc:	1851      	adds	r1, r2, r1
 80021fe:	61b9      	str	r1, [r7, #24]
 8002200:	4629      	mov	r1, r5
 8002202:	eb43 0101 	adc.w	r1, r3, r1
 8002206:	61f9      	str	r1, [r7, #28]
 8002208:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800220c:	460b      	mov	r3, r1
 800220e:	18db      	adds	r3, r3, r3
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	4613      	mov	r3, r2
 8002214:	eb42 0303 	adc.w	r3, r2, r3
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800221e:	4618      	mov	r0, r3
 8002220:	4621      	mov	r1, r4
 8002222:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002226:	f04f 0300 	mov.w	r3, #0
 800222a:	f7fe fd0d 	bl	8000c48 <__aeabi_uldivmod>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8002236:	f04f 31ff 	mov.w	r1, #4294967295
 800223a:	1a80      	subs	r0, r0, r2
 800223c:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8002240:	eb61 0303 	sbc.w	r3, r1, r3
 8002244:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <Set_Random_Motion_Values+0xc94>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	461a      	mov	r2, r3
 800224e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002252:	4413      	add	r3, r2
 8002254:	461a      	mov	r2, r3
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <Set_Random_Motion_Values+0xc94>)
 8002258:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800225a:	f009 f9c5 	bl	800b5e8 <rand>
 800225e:	4603      	mov	r3, r0
 8002260:	17da      	asrs	r2, r3, #31
 8002262:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8002266:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800226a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800226e:	2200      	movs	r2, #0
 8002270:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8002274:	e004      	b.n	8002280 <Set_Random_Motion_Values+0xc98>
 8002276:	bf00      	nop
 8002278:	200007e4 	.word	0x200007e4
 800227c:	200007f0 	.word	0x200007f0
 8002280:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8002284:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	; 0x1b8
 8002288:	462b      	mov	r3, r5
 800228a:	e9d7 896c 	ldrd	r8, r9, [r7, #432]	; 0x1b0
 800228e:	4642      	mov	r2, r8
 8002290:	fb02 f203 	mul.w	r2, r2, r3
 8002294:	464b      	mov	r3, r9
 8002296:	4621      	mov	r1, r4
 8002298:	fb01 f303 	mul.w	r3, r1, r3
 800229c:	4413      	add	r3, r2
 800229e:	4622      	mov	r2, r4
 80022a0:	4641      	mov	r1, r8
 80022a2:	fba2 1201 	umull	r1, r2, r2, r1
 80022a6:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 80022aa:	460a      	mov	r2, r1
 80022ac:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 80022b0:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 80022b4:	4413      	add	r3, r2
 80022b6:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 80022ba:	e9d7 45d6 	ldrd	r4, r5, [r7, #856]	; 0x358
 80022be:	4622      	mov	r2, r4
 80022c0:	462b      	mov	r3, r5
 80022c2:	f04f 0000 	mov.w	r0, #0
 80022c6:	f04f 0100 	mov.w	r1, #0
 80022ca:	00d9      	lsls	r1, r3, #3
 80022cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022d0:	00d0      	lsls	r0, r2, #3
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4621      	mov	r1, r4
 80022d8:	1a51      	subs	r1, r2, r1
 80022da:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
 80022de:	4629      	mov	r1, r5
 80022e0:	eb63 0301 	sbc.w	r3, r3, r1
 80022e4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 80022e8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 80022f4:	f7fe fca8 	bl	8000c48 <__aeabi_uldivmod>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	f06f 0002 	mvn.w	r0, #2
 8002300:	f04f 31ff 	mov.w	r1, #4294967295
 8002304:	1a80      	subs	r0, r0, r2
 8002306:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 800230a:	eb61 0303 	sbc.w	r3, r1, r3
 800230e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002312:	4bea      	ldr	r3, [pc, #936]	; (80026bc <Set_Random_Motion_Values+0x10d4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800231c:	4413      	add	r3, r2
 800231e:	461a      	mov	r2, r3
 8002320:	4be6      	ldr	r3, [pc, #920]	; (80026bc <Set_Random_Motion_Values+0x10d4>)
 8002322:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 8002324:	f009 f960 	bl	800b5e8 <rand>
 8002328:	4603      	mov	r3, r0
 800232a:	17da      	asrs	r2, r3, #31
 800232c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002330:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 8002334:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8002338:	2200      	movs	r2, #0
 800233a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800233e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002342:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 8002346:	462b      	mov	r3, r5
 8002348:	e9d7 8966 	ldrd	r8, r9, [r7, #408]	; 0x198
 800234c:	4642      	mov	r2, r8
 800234e:	fb02 f203 	mul.w	r2, r2, r3
 8002352:	464b      	mov	r3, r9
 8002354:	4621      	mov	r1, r4
 8002356:	fb01 f303 	mul.w	r3, r1, r3
 800235a:	4413      	add	r3, r2
 800235c:	4622      	mov	r2, r4
 800235e:	4641      	mov	r1, r8
 8002360:	fba2 1201 	umull	r1, r2, r2, r1
 8002364:	f8c7 2354 	str.w	r2, [r7, #852]	; 0x354
 8002368:	460a      	mov	r2, r1
 800236a:	f8c7 2350 	str.w	r2, [r7, #848]	; 0x350
 800236e:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 8002372:	4413      	add	r3, r2
 8002374:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8002378:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	; 0x350
 800237c:	4622      	mov	r2, r4
 800237e:	462b      	mov	r3, r5
 8002380:	f04f 0000 	mov.w	r0, #0
 8002384:	f04f 0100 	mov.w	r1, #0
 8002388:	00d9      	lsls	r1, r3, #3
 800238a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800238e:	00d0      	lsls	r0, r2, #3
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4621      	mov	r1, r4
 8002396:	1851      	adds	r1, r2, r1
 8002398:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 800239c:	4629      	mov	r1, r5
 800239e:	eb43 0101 	adc.w	r1, r3, r1
 80023a2:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 80023a6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80023b2:	f7fe fc49 	bl	8000c48 <__aeabi_uldivmod>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	1cd1      	adds	r1, r2, #3
 80023bc:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80023c0:	f143 0300 	adc.w	r3, r3, #0
 80023c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80023c8:	4bbc      	ldr	r3, [pc, #752]	; (80026bc <Set_Random_Motion_Values+0x10d4>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	461a      	mov	r2, r3
 80023ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80023d2:	4413      	add	r3, r2
 80023d4:	461a      	mov	r2, r3
 80023d6:	4bb9      	ldr	r3, [pc, #740]	; (80026bc <Set_Random_Motion_Values+0x10d4>)
 80023d8:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80023da:	f009 f905 	bl	800b5e8 <rand>
 80023de:	4603      	mov	r3, r0
 80023e0:	17da      	asrs	r2, r3, #31
 80023e2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80023e6:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 80023ea:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80023ee:	2200      	movs	r2, #0
 80023f0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80023f4:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80023f8:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 80023fc:	462b      	mov	r3, r5
 80023fe:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	; 0x180
 8002402:	4642      	mov	r2, r8
 8002404:	fb02 f203 	mul.w	r2, r2, r3
 8002408:	464b      	mov	r3, r9
 800240a:	4621      	mov	r1, r4
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	4622      	mov	r2, r4
 8002414:	4641      	mov	r1, r8
 8002416:	fba2 1201 	umull	r1, r2, r2, r1
 800241a:	f8c7 234c 	str.w	r2, [r7, #844]	; 0x34c
 800241e:	460a      	mov	r2, r1
 8002420:	f8c7 2348 	str.w	r2, [r7, #840]	; 0x348
 8002424:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 8002428:	4413      	add	r3, r2
 800242a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800242e:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	; 0x348
 8002432:	4622      	mov	r2, r4
 8002434:	462b      	mov	r3, r5
 8002436:	1891      	adds	r1, r2, r2
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	415b      	adcs	r3, r3
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002442:	4621      	mov	r1, r4
 8002444:	1851      	adds	r1, r2, r1
 8002446:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 800244a:	4629      	mov	r1, r5
 800244c:	eb43 0101 	adc.w	r1, r3, r1
 8002450:	f8c7 117c 	str.w	r1, [r7, #380]	; 0x17c
 8002454:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8002460:	f7fe fbf2 	bl	8000c48 <__aeabi_uldivmod>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	f06f 0002 	mvn.w	r0, #2
 800246c:	f04f 31ff 	mov.w	r1, #4294967295
 8002470:	1a80      	subs	r0, r0, r2
 8002472:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 8002476:	eb61 0303 	sbc.w	r3, r1, r3
 800247a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800247e:	4b8f      	ldr	r3, [pc, #572]	; (80026bc <Set_Random_Motion_Values+0x10d4>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	461a      	mov	r2, r3
 8002484:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002488:	4413      	add	r3, r2
 800248a:	461a      	mov	r2, r3
 800248c:	4b8b      	ldr	r3, [pc, #556]	; (80026bc <Set_Random_Motion_Values+0x10d4>)
 800248e:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8002490:	f009 f8aa 	bl	800b5e8 <rand>
 8002494:	4603      	mov	r3, r0
 8002496:	17da      	asrs	r2, r3, #31
 8002498:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800249c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80024a0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80024a4:	2200      	movs	r2, #0
 80024a6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80024aa:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 80024ae:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 80024b2:	462b      	mov	r3, r5
 80024b4:	e9d7 895a 	ldrd	r8, r9, [r7, #360]	; 0x168
 80024b8:	4642      	mov	r2, r8
 80024ba:	fb02 f203 	mul.w	r2, r2, r3
 80024be:	464b      	mov	r3, r9
 80024c0:	4621      	mov	r1, r4
 80024c2:	fb01 f303 	mul.w	r3, r1, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	4622      	mov	r2, r4
 80024ca:	4641      	mov	r1, r8
 80024cc:	fba2 1201 	umull	r1, r2, r2, r1
 80024d0:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 80024d4:	460a      	mov	r2, r1
 80024d6:	f8c7 2340 	str.w	r2, [r7, #832]	; 0x340
 80024da:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 80024de:	4413      	add	r3, r2
 80024e0:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 80024e4:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	; 0x340
 80024e8:	4622      	mov	r2, r4
 80024ea:	462b      	mov	r3, r5
 80024ec:	f04f 0000 	mov.w	r0, #0
 80024f0:	f04f 0100 	mov.w	r1, #0
 80024f4:	00d9      	lsls	r1, r3, #3
 80024f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024fa:	00d0      	lsls	r0, r2, #3
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4621      	mov	r1, r4
 8002502:	1a51      	subs	r1, r2, r1
 8002504:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 8002508:	4629      	mov	r1, r5
 800250a:	eb63 0301 	sbc.w	r3, r3, r1
 800250e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8002512:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002516:	f04f 0300 	mov.w	r3, #0
 800251a:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800251e:	f7fe fb93 	bl	8000c48 <__aeabi_uldivmod>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	f112 01c8 	adds.w	r1, r2, #200	; 0xc8
 800252a:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 800252e:	f143 0300 	adc.w	r3, r3, #0
 8002532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002536:	4b62      	ldr	r3, [pc, #392]	; (80026c0 <Set_Random_Motion_Values+0x10d8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002540:	4413      	add	r3, r2
 8002542:	461a      	mov	r2, r3
 8002544:	4b5e      	ldr	r3, [pc, #376]	; (80026c0 <Set_Random_Motion_Values+0x10d8>)
 8002546:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8002548:	f009 f84e 	bl	800b5e8 <rand>
 800254c:	4603      	mov	r3, r0
 800254e:	17da      	asrs	r2, r3, #31
 8002550:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002554:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8002558:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800255c:	2200      	movs	r2, #0
 800255e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002562:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8002566:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 800256a:	462b      	mov	r3, r5
 800256c:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	; 0x150
 8002570:	4642      	mov	r2, r8
 8002572:	fb02 f203 	mul.w	r2, r2, r3
 8002576:	464b      	mov	r3, r9
 8002578:	4621      	mov	r1, r4
 800257a:	fb01 f303 	mul.w	r3, r1, r3
 800257e:	4413      	add	r3, r2
 8002580:	4622      	mov	r2, r4
 8002582:	4641      	mov	r1, r8
 8002584:	fba2 1201 	umull	r1, r2, r2, r1
 8002588:	f8c7 233c 	str.w	r2, [r7, #828]	; 0x33c
 800258c:	460a      	mov	r2, r1
 800258e:	f8c7 2338 	str.w	r2, [r7, #824]	; 0x338
 8002592:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 8002596:	4413      	add	r3, r2
 8002598:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800259c:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	; 0x338
 80025a0:	4622      	mov	r2, r4
 80025a2:	462b      	mov	r3, r5
 80025a4:	1891      	adds	r1, r2, r2
 80025a6:	6039      	str	r1, [r7, #0]
 80025a8:	415b      	adcs	r3, r3
 80025aa:	607b      	str	r3, [r7, #4]
 80025ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025b0:	4621      	mov	r1, r4
 80025b2:	1851      	adds	r1, r2, r1
 80025b4:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 80025b8:	4629      	mov	r1, r5
 80025ba:	eb43 0101 	adc.w	r1, r3, r1
 80025be:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 80025c2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80025ce:	f7fe fb3b 	bl	8000c48 <__aeabi_uldivmod>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	f112 0196 	adds.w	r1, r2, #150	; 0x96
 80025da:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80025de:	f143 0300 	adc.w	r3, r3, #0
 80025e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80025e6:	4b36      	ldr	r3, [pc, #216]	; (80026c0 <Set_Random_Motion_Values+0x10d8>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	461a      	mov	r2, r3
 80025ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	4b32      	ldr	r3, [pc, #200]	; (80026c0 <Set_Random_Motion_Values+0x10d8>)
 80025f6:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80025f8:	f008 fff6 	bl	800b5e8 <rand>
 80025fc:	4603      	mov	r3, r0
 80025fe:	17da      	asrs	r2, r3, #31
 8002600:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002604:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8002608:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800260c:	2200      	movs	r2, #0
 800260e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002612:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002616:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 800261a:	462b      	mov	r3, r5
 800261c:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8002620:	4642      	mov	r2, r8
 8002622:	fb02 f203 	mul.w	r2, r2, r3
 8002626:	464b      	mov	r3, r9
 8002628:	4621      	mov	r1, r4
 800262a:	fb01 f303 	mul.w	r3, r1, r3
 800262e:	4413      	add	r3, r2
 8002630:	4622      	mov	r2, r4
 8002632:	4641      	mov	r1, r8
 8002634:	fba2 1201 	umull	r1, r2, r2, r1
 8002638:	f8c7 2334 	str.w	r2, [r7, #820]	; 0x334
 800263c:	460a      	mov	r2, r1
 800263e:	f8c7 2330 	str.w	r2, [r7, #816]	; 0x330
 8002642:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8002646:	4413      	add	r3, r2
 8002648:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800264c:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	; 0x330
 8002650:	4622      	mov	r2, r4
 8002652:	462b      	mov	r3, r5
 8002654:	f04f 0000 	mov.w	r0, #0
 8002658:	f04f 0100 	mov.w	r1, #0
 800265c:	0099      	lsls	r1, r3, #2
 800265e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002662:	0090      	lsls	r0, r2, #2
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4621      	mov	r1, r4
 800266a:	1851      	adds	r1, r2, r1
 800266c:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8002670:	4629      	mov	r1, r5
 8002672:	eb43 0101 	adc.w	r1, r3, r1
 8002676:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800267a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800267e:	f04f 0300 	mov.w	r3, #0
 8002682:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8002686:	f7fe fadf 	bl	8000c48 <__aeabi_uldivmod>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	f112 010a 	adds.w	r1, r2, #10
 8002692:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8002696:	f143 0300 	adc.w	r3, r3, #0
 800269a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <Set_Random_Motion_Values+0x10d8>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	461a      	mov	r2, r3
 80026a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026a8:	4413      	add	r3, r2
 80026aa:	461a      	mov	r2, r3
 80026ac:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <Set_Random_Motion_Values+0x10d8>)
 80026ae:	609a      	str	r2, [r3, #8]
}
 80026b0:	bf00      	nop
 80026b2:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026bc:	200007fc 	.word	0x200007fc
 80026c0:	20000808 	.word	0x20000808

080026c4 <Reset_Motion_Values>:
 *
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 80026c8:	4b6e      	ldr	r3, [pc, #440]	; (8002884 <Reset_Motion_Values+0x1c0>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b6e      	ldr	r3, [pc, #440]	; (8002888 <Reset_Motion_Values+0x1c4>)
 80026ce:	fb83 1302 	smull	r1, r3, r3, r2
 80026d2:	11d9      	asrs	r1, r3, #7
 80026d4:	17d3      	asrs	r3, r2, #31
 80026d6:	1acb      	subs	r3, r1, r3
 80026d8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d103      	bne.n	80026ee <Reset_Motion_Values+0x2a>
 80026e6:	4b67      	ldr	r3, [pc, #412]	; (8002884 <Reset_Motion_Values+0x1c0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	425b      	negs	r3, r3
 80026ec:	e000      	b.n	80026f0 <Reset_Motion_Values+0x2c>
 80026ee:	230a      	movs	r3, #10
 80026f0:	4a64      	ldr	r2, [pc, #400]	; (8002884 <Reset_Motion_Values+0x1c0>)
 80026f2:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 80026f4:	4b63      	ldr	r3, [pc, #396]	; (8002884 <Reset_Motion_Values+0x1c0>)
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	4b63      	ldr	r3, [pc, #396]	; (8002888 <Reset_Motion_Values+0x1c4>)
 80026fa:	fb83 1302 	smull	r1, r3, r3, r2
 80026fe:	11d9      	asrs	r1, r3, #7
 8002700:	17d3      	asrs	r3, r2, #31
 8002702:	1acb      	subs	r3, r1, r3
 8002704:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d103      	bne.n	800271a <Reset_Motion_Values+0x56>
 8002712:	4b5c      	ldr	r3, [pc, #368]	; (8002884 <Reset_Motion_Values+0x1c0>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	425b      	negs	r3, r3
 8002718:	e001      	b.n	800271e <Reset_Motion_Values+0x5a>
 800271a:	f06f 0309 	mvn.w	r3, #9
 800271e:	4a59      	ldr	r2, [pc, #356]	; (8002884 <Reset_Motion_Values+0x1c0>)
 8002720:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 8002722:	4b58      	ldr	r3, [pc, #352]	; (8002884 <Reset_Motion_Values+0x1c0>)
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	4b58      	ldr	r3, [pc, #352]	; (8002888 <Reset_Motion_Values+0x1c4>)
 8002728:	fb83 1302 	smull	r1, r3, r3, r2
 800272c:	11d9      	asrs	r1, r3, #7
 800272e:	17d3      	asrs	r3, r2, #31
 8002730:	1acb      	subs	r3, r1, r3
 8002732:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d103      	bne.n	8002748 <Reset_Motion_Values+0x84>
 8002740:	4b50      	ldr	r3, [pc, #320]	; (8002884 <Reset_Motion_Values+0x1c0>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	425b      	negs	r3, r3
 8002746:	e000      	b.n	800274a <Reset_Motion_Values+0x86>
 8002748:	230a      	movs	r3, #10
 800274a:	4a4e      	ldr	r2, [pc, #312]	; (8002884 <Reset_Motion_Values+0x1c0>)
 800274c:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 800274e:	4b4f      	ldr	r3, [pc, #316]	; (800288c <Reset_Motion_Values+0x1c8>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4b4d      	ldr	r3, [pc, #308]	; (8002888 <Reset_Motion_Values+0x1c4>)
 8002754:	fb83 1302 	smull	r1, r3, r3, r2
 8002758:	11d9      	asrs	r1, r3, #7
 800275a:	17d3      	asrs	r3, r2, #31
 800275c:	1acb      	subs	r3, r1, r3
 800275e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002762:	fb01 f303 	mul.w	r3, r1, r3
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d103      	bne.n	8002774 <Reset_Motion_Values+0xb0>
 800276c:	4b47      	ldr	r3, [pc, #284]	; (800288c <Reset_Motion_Values+0x1c8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	425b      	negs	r3, r3
 8002772:	e000      	b.n	8002776 <Reset_Motion_Values+0xb2>
 8002774:	2364      	movs	r3, #100	; 0x64
 8002776:	4a45      	ldr	r2, [pc, #276]	; (800288c <Reset_Motion_Values+0x1c8>)
 8002778:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 800277a:	4b44      	ldr	r3, [pc, #272]	; (800288c <Reset_Motion_Values+0x1c8>)
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	4b42      	ldr	r3, [pc, #264]	; (8002888 <Reset_Motion_Values+0x1c4>)
 8002780:	fb83 1302 	smull	r1, r3, r3, r2
 8002784:	11d9      	asrs	r1, r3, #7
 8002786:	17d3      	asrs	r3, r2, #31
 8002788:	1acb      	subs	r3, r1, r3
 800278a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800278e:	fb01 f303 	mul.w	r3, r1, r3
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d103      	bne.n	80027a0 <Reset_Motion_Values+0xdc>
 8002798:	4b3c      	ldr	r3, [pc, #240]	; (800288c <Reset_Motion_Values+0x1c8>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	425b      	negs	r3, r3
 800279e:	e001      	b.n	80027a4 <Reset_Motion_Values+0xe0>
 80027a0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80027a4:	4a39      	ldr	r2, [pc, #228]	; (800288c <Reset_Motion_Values+0x1c8>)
 80027a6:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 80027a8:	4b38      	ldr	r3, [pc, #224]	; (800288c <Reset_Motion_Values+0x1c8>)
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	4b36      	ldr	r3, [pc, #216]	; (8002888 <Reset_Motion_Values+0x1c4>)
 80027ae:	fb83 1302 	smull	r1, r3, r3, r2
 80027b2:	11d9      	asrs	r1, r3, #7
 80027b4:	17d3      	asrs	r3, r2, #31
 80027b6:	1acb      	subs	r3, r1, r3
 80027b8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d103      	bne.n	80027ce <Reset_Motion_Values+0x10a>
 80027c6:	4b31      	ldr	r3, [pc, #196]	; (800288c <Reset_Motion_Values+0x1c8>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	425b      	negs	r3, r3
 80027cc:	e000      	b.n	80027d0 <Reset_Motion_Values+0x10c>
 80027ce:	2364      	movs	r3, #100	; 0x64
 80027d0:	4a2e      	ldr	r2, [pc, #184]	; (800288c <Reset_Motion_Values+0x1c8>)
 80027d2:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 80027d4:	4b2d      	ldr	r3, [pc, #180]	; (800288c <Reset_Motion_Values+0x1c8>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <Reset_Motion_Values+0x1c4>)
 80027da:	fb83 1302 	smull	r1, r3, r3, r2
 80027de:	11d9      	asrs	r1, r3, #7
 80027e0:	17d3      	asrs	r3, r2, #31
 80027e2:	1acb      	subs	r3, r1, r3
 80027e4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d103      	bne.n	80027fa <Reset_Motion_Values+0x136>
 80027f2:	4b27      	ldr	r3, [pc, #156]	; (8002890 <Reset_Motion_Values+0x1cc>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	425b      	negs	r3, r3
 80027f8:	e000      	b.n	80027fc <Reset_Motion_Values+0x138>
 80027fa:	2303      	movs	r3, #3
 80027fc:	4a24      	ldr	r2, [pc, #144]	; (8002890 <Reset_Motion_Values+0x1cc>)
 80027fe:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8002800:	4b22      	ldr	r3, [pc, #136]	; (800288c <Reset_Motion_Values+0x1c8>)
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	4b20      	ldr	r3, [pc, #128]	; (8002888 <Reset_Motion_Values+0x1c4>)
 8002806:	fb83 1302 	smull	r1, r3, r3, r2
 800280a:	11d9      	asrs	r1, r3, #7
 800280c:	17d3      	asrs	r3, r2, #31
 800280e:	1acb      	subs	r3, r1, r3
 8002810:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d103      	bne.n	8002826 <Reset_Motion_Values+0x162>
 800281e:	4b1c      	ldr	r3, [pc, #112]	; (8002890 <Reset_Motion_Values+0x1cc>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	425b      	negs	r3, r3
 8002824:	e001      	b.n	800282a <Reset_Motion_Values+0x166>
 8002826:	f06f 0302 	mvn.w	r3, #2
 800282a:	4a19      	ldr	r2, [pc, #100]	; (8002890 <Reset_Motion_Values+0x1cc>)
 800282c:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 800282e:	4b17      	ldr	r3, [pc, #92]	; (800288c <Reset_Motion_Values+0x1c8>)
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	4b15      	ldr	r3, [pc, #84]	; (8002888 <Reset_Motion_Values+0x1c4>)
 8002834:	fb83 1302 	smull	r1, r3, r3, r2
 8002838:	11d9      	asrs	r1, r3, #7
 800283a:	17d3      	asrs	r3, r2, #31
 800283c:	1acb      	subs	r3, r1, r3
 800283e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002842:	fb01 f303 	mul.w	r3, r1, r3
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d103      	bne.n	8002854 <Reset_Motion_Values+0x190>
 800284c:	4b10      	ldr	r3, [pc, #64]	; (8002890 <Reset_Motion_Values+0x1cc>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	425b      	negs	r3, r3
 8002852:	e000      	b.n	8002856 <Reset_Motion_Values+0x192>
 8002854:	2303      	movs	r3, #3
 8002856:	4a0e      	ldr	r2, [pc, #56]	; (8002890 <Reset_Motion_Values+0x1cc>)
 8002858:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 800285a:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <Reset_Motion_Values+0x1d0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	425b      	negs	r3, r3
 8002860:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <Reset_Motion_Values+0x1d0>)
 8002862:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <Reset_Motion_Values+0x1d0>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	425b      	negs	r3, r3
 800286a:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <Reset_Motion_Values+0x1d0>)
 800286c:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 800286e:	4b09      	ldr	r3, [pc, #36]	; (8002894 <Reset_Motion_Values+0x1d0>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	425b      	negs	r3, r3
 8002874:	4a07      	ldr	r2, [pc, #28]	; (8002894 <Reset_Motion_Values+0x1d0>)
 8002876:	6093      	str	r3, [r2, #8]
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	200007e4 	.word	0x200007e4
 8002888:	10624dd3 	.word	0x10624dd3
 800288c:	200007f0 	.word	0x200007f0
 8002890:	200007fc 	.word	0x200007fc
 8002894:	20000808 	.word	0x20000808

08002898 <getBlueNRGVersion>:
 * @param  Hardware version
 * @param  Firmware version
 * @retval Status
 */
uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8002898:	b590      	push	{r4, r7, lr}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af02      	add	r7, sp, #8
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_read_local_version_information(&hci_version, &hci_revision, &lmp_pal_version,
 80028a2:	f107 0410 	add.w	r4, r7, #16
 80028a6:	f107 0215 	add.w	r2, r7, #21
 80028aa:	f107 0112 	add.w	r1, r7, #18
 80028ae:	f107 0016 	add.w	r0, r7, #22
 80028b2:	f107 030e 	add.w	r3, r7, #14
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	4623      	mov	r3, r4
 80028ba:	f008 fa04 	bl	800acc6 <hci_read_local_version_information>
 80028be:	4603      	mov	r3, r0
 80028c0:	75fb      	strb	r3, [r7, #23]
				                              &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 80028c2:	7dfb      	ldrb	r3, [r7, #23]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d126      	bne.n	8002916 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 80028c8:	8a7b      	ldrh	r3, [r7, #18]
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 80028d4:	8a7b      	ldrh	r3, [r7, #18]
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	b29a      	uxth	r2, r3
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	b21a      	sxth	r2, r3
 80028e4:	89fb      	ldrh	r3, [r7, #14]
 80028e6:	091b      	lsrs	r3, r3, #4
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	b21b      	sxth	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	b21b      	sxth	r3, r3
 80028f2:	4313      	orrs	r3, r2
 80028f4:	b21b      	sxth	r3, r3
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	b21a      	sxth	r2, r3
 8002902:	89fb      	ldrh	r3, [r7, #14]
 8002904:	b21b      	sxth	r3, r3
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	b21b      	sxth	r3, r3
 800290c:	4313      	orrs	r3, r2
 800290e:	b21b      	sxth	r3, r3
 8002910:	b29a      	uxth	r2, r3
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8002916:	7dfb      	ldrb	r3, [r7, #23]
}
 8002918:	4618      	mov	r0, r3
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	bd90      	pop	{r4, r7, pc}

08002920 <BSP_PB_Callback>:
 *
 * @param  Button Specifies the pin connected EXTI line
 * @retval None
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 800292a:	4b04      	ldr	r3, [pc, #16]	; (800293c <BSP_PB_Callback+0x1c>)
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	2000020e 	.word	0x2000020e

08002940 <platform_write>:


static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af04      	add	r7, sp, #16
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	461a      	mov	r2, r3
 800294c:	460b      	mov	r3, r1
 800294e:	72fb      	strb	r3, [r7, #11]
 8002950:	4613      	mov	r3, r2
 8002952:	813b      	strh	r3, [r7, #8]
  /* Write multiple command */
  reg |= 0x80;
 8002954:	7afb      	ldrb	r3, [r7, #11]
 8002956:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800295a:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Write(handle, HTS221_I2C_ADDRESS, reg,
 800295c:	7afb      	ldrb	r3, [r7, #11]
 800295e:	b29a      	uxth	r2, r3
 8002960:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002964:	9302      	str	r3, [sp, #8]
 8002966:	893b      	ldrh	r3, [r7, #8]
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	2301      	movs	r3, #1
 8002970:	21bf      	movs	r1, #191	; 0xbf
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f002 fcca 	bl	800530c <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
  return 0;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b088      	sub	sp, #32
 8002986:	af04      	add	r7, sp, #16
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	461a      	mov	r2, r3
 800298e:	460b      	mov	r3, r1
 8002990:	72fb      	strb	r3, [r7, #11]
 8002992:	4613      	mov	r3, r2
 8002994:	813b      	strh	r3, [r7, #8]
  /* Read multiple command */
  reg |= 0x80;
 8002996:	7afb      	ldrb	r3, [r7, #11]
 8002998:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800299c:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Mem_Read(handle, HTS221_I2C_ADDRESS, reg,
 800299e:	7afb      	ldrb	r3, [r7, #11]
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029a6:	9302      	str	r3, [sp, #8]
 80029a8:	893b      	ldrh	r3, [r7, #8]
 80029aa:	9301      	str	r3, [sp, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	2301      	movs	r3, #1
 80029b2:	21bf      	movs	r1, #191	; 0xbf
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f002 fdbd 	bl	8005534 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <hci_le_connection_complete_event>:
                                      uint8_t Peer_Address[6],
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)
{
 80029c4:	b590      	push	{r4, r7, lr}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4604      	mov	r4, r0
 80029cc:	4608      	mov	r0, r1
 80029ce:	4611      	mov	r1, r2
 80029d0:	461a      	mov	r2, r3
 80029d2:	4623      	mov	r3, r4
 80029d4:	71fb      	strb	r3, [r7, #7]
 80029d6:	4603      	mov	r3, r0
 80029d8:	80bb      	strh	r3, [r7, #4]
 80029da:	460b      	mov	r3, r1
 80029dc:	71bb      	strb	r3, [r7, #6]
 80029de:	4613      	mov	r3, r2
 80029e0:	70fb      	strb	r3, [r7, #3]
  connected = TRUE;
 80029e2:	4b06      	ldr	r3, [pc, #24]	; (80029fc <hci_le_connection_complete_event+0x38>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	601a      	str	r2, [r3, #0]
  connection_handle = Connection_Handle;
 80029e8:	4a05      	ldr	r2, [pc, #20]	; (8002a00 <hci_le_connection_complete_event+0x3c>)
 80029ea:	88bb      	ldrh	r3, [r7, #4]
 80029ec:	8013      	strh	r3, [r2, #0]

  BSP_LED_Off(LED2); //activity led
 80029ee:	2000      	movs	r0, #0
 80029f0:	f001 fa32 	bl	8003e58 <BSP_LED_Off>
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd90      	pop	{r4, r7, pc}
 80029fc:	200007e0 	.word	0x200007e0
 8002a00:	200007dc 	.word	0x200007dc

08002a04 <hci_disconnection_complete_event>:
 * @retval See file bluenrg1_events.h
 */
void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	71fb      	strb	r3, [r7, #7]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	80bb      	strh	r3, [r7, #4]
 8002a12:	4613      	mov	r3, r2
 8002a14:	71bb      	strb	r3, [r7, #6]
  connected = FALSE;
 8002a16:	4b09      	ldr	r3, [pc, #36]	; (8002a3c <hci_disconnection_complete_event+0x38>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
  /* Make the device connectable again */
  set_connectable = TRUE;
 8002a1c:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <hci_disconnection_complete_event+0x3c>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	701a      	strb	r2, [r3, #0]
  connection_handle =0;
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <hci_disconnection_complete_event+0x40>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	801a      	strh	r2, [r3, #0]
  PRINT_DBG("Disconnected\r\n");
 8002a28:	4807      	ldr	r0, [pc, #28]	; (8002a48 <hci_disconnection_complete_event+0x44>)
 8002a2a:	f009 fba9 	bl	800c180 <puts>

  BSP_LED_On(LED2); //activity led
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f001 f9fc 	bl	8003e2c <BSP_LED_On>
}
 8002a34:	bf00      	nop
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	200007e0 	.word	0x200007e0
 8002a40:	20000001 	.word	0x20000001
 8002a44:	200007dc 	.word	0x200007dc
 8002a48:	0800e7cc 	.word	0x0800e7cc

08002a4c <aci_gatt_read_permit_req_event>:
 * @retval See file bluenrg1_events.h
 */
void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	80fb      	strh	r3, [r7, #6]
 8002a56:	460b      	mov	r3, r1
 8002a58:	80bb      	strh	r3, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	807b      	strh	r3, [r7, #2]
  Read_Request_CB(Attribute_Handle);
 8002a5e:	88bb      	ldrh	r3, [r7, #4]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 fa4f 	bl	8002f04 <Read_Request_CB>
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b08d      	sub	sp, #52	; 0x34
 8002a74:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  /* num of characteristics of this service */
  uint8_t char_number = 5;
 8002a76:	2305      	movs	r3, #5
 8002a78:	75fb      	strb	r3, [r7, #23]
  /* number of attribute records that can be added to this service */
  uint8_t max_attribute_records = 1+(3*char_number);
 8002a7a:	7dfb      	ldrb	r3, [r7, #23]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	0052      	lsls	r2, r2, #1
 8002a80:	4413      	add	r3, r2
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	3301      	adds	r3, #1
 8002a86:	75bb      	strb	r3, [r7, #22]

  /* add HW_SENS_W2ST service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 8002a88:	231b      	movs	r3, #27
 8002a8a:	713b      	strb	r3, [r7, #4]
 8002a8c:	23c5      	movs	r3, #197	; 0xc5
 8002a8e:	717b      	strb	r3, [r7, #5]
 8002a90:	23d5      	movs	r3, #213	; 0xd5
 8002a92:	71bb      	strb	r3, [r7, #6]
 8002a94:	23a5      	movs	r3, #165	; 0xa5
 8002a96:	71fb      	strb	r3, [r7, #7]
 8002a98:	2302      	movs	r3, #2
 8002a9a:	723b      	strb	r3, [r7, #8]
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	727b      	strb	r3, [r7, #9]
 8002aa0:	23b4      	movs	r3, #180	; 0xb4
 8002aa2:	72bb      	strb	r3, [r7, #10]
 8002aa4:	239a      	movs	r3, #154	; 0x9a
 8002aa6:	72fb      	strb	r3, [r7, #11]
 8002aa8:	23e1      	movs	r3, #225	; 0xe1
 8002aaa:	733b      	strb	r3, [r7, #12]
 8002aac:	2311      	movs	r3, #17
 8002aae:	737b      	strb	r3, [r7, #13]
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73bb      	strb	r3, [r7, #14]
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	73fb      	strb	r3, [r7, #15]
 8002ab8:	2300      	movs	r3, #0
 8002aba:	743b      	strb	r3, [r7, #16]
 8002abc:	2300      	movs	r3, #0
 8002abe:	747b      	strb	r3, [r7, #17]
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	74bb      	strb	r3, [r7, #18]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8002ac8:	4b51      	ldr	r3, [pc, #324]	; (8002c10 <Add_HWServW2ST_Service+0x1a0>)
 8002aca:	461c      	mov	r4, r3
 8002acc:	1d3b      	adds	r3, r7, #4
 8002ace:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ad0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE,
 8002ad4:	7dbb      	ldrb	r3, [r7, #22]
 8002ad6:	4a4f      	ldr	r2, [pc, #316]	; (8002c14 <Add_HWServW2ST_Service+0x1a4>)
 8002ad8:	9200      	str	r2, [sp, #0]
 8002ada:	2201      	movs	r2, #1
 8002adc:	494c      	ldr	r1, [pc, #304]	; (8002c10 <Add_HWServW2ST_Service+0x1a0>)
 8002ade:	2002      	movs	r0, #2
 8002ae0:	f006 f9c5 	bl	8008e6e <aci_gatt_add_service>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	757b      	strb	r3, [r7, #21]
                             max_attribute_records, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8002ae8:	7d7b      	ldrb	r3, [r7, #21]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <Add_HWServW2ST_Service+0x82>
    return BLE_STATUS_ERROR;
 8002aee:	2347      	movs	r3, #71	; 0x47
 8002af0:	e08a      	b.n	8002c08 <Add_HWServW2ST_Service+0x198>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8002af2:	231b      	movs	r3, #27
 8002af4:	713b      	strb	r3, [r7, #4]
 8002af6:	23c5      	movs	r3, #197	; 0xc5
 8002af8:	717b      	strb	r3, [r7, #5]
 8002afa:	23d5      	movs	r3, #213	; 0xd5
 8002afc:	71bb      	strb	r3, [r7, #6]
 8002afe:	23a5      	movs	r3, #165	; 0xa5
 8002b00:	71fb      	strb	r3, [r7, #7]
 8002b02:	2302      	movs	r3, #2
 8002b04:	723b      	strb	r3, [r7, #8]
 8002b06:	2300      	movs	r3, #0
 8002b08:	727b      	strb	r3, [r7, #9]
 8002b0a:	2336      	movs	r3, #54	; 0x36
 8002b0c:	72bb      	strb	r3, [r7, #10]
 8002b0e:	23ac      	movs	r3, #172	; 0xac
 8002b10:	72fb      	strb	r3, [r7, #11]
 8002b12:	23e1      	movs	r3, #225	; 0xe1
 8002b14:	733b      	strb	r3, [r7, #12]
 8002b16:	2311      	movs	r3, #17
 8002b18:	737b      	strb	r3, [r7, #13]
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	73bb      	strb	r3, [r7, #14]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	73fb      	strb	r3, [r7, #15]
 8002b22:	2300      	movs	r3, #0
 8002b24:	743b      	strb	r3, [r7, #16]
 8002b26:	2300      	movs	r3, #0
 8002b28:	747b      	strb	r3, [r7, #17]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	74bb      	strb	r3, [r7, #18]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 8002b32:	7cbb      	ldrb	r3, [r7, #18]
 8002b34:	f043 0304 	orr.w	r3, r3, #4
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 8002b3c:	7cbb      	ldrb	r3, [r7, #18]
 8002b3e:	f043 0310 	orr.w	r3, r3, #16
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002b46:	4b34      	ldr	r3, [pc, #208]	; (8002c18 <Add_HWServW2ST_Service+0x1a8>)
 8002b48:	461c      	mov	r4, r3
 8002b4a:	1d3b      	adds	r3, r7, #4
 8002b4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, &char_uuid,
 8002b52:	4b30      	ldr	r3, [pc, #192]	; (8002c14 <Add_HWServW2ST_Service+0x1a4>)
 8002b54:	8818      	ldrh	r0, [r3, #0]
 8002b56:	4b31      	ldr	r3, [pc, #196]	; (8002c1c <Add_HWServW2ST_Service+0x1ac>)
 8002b58:	9305      	str	r3, [sp, #20]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	9304      	str	r3, [sp, #16]
 8002b5e:	2310      	movs	r3, #16
 8002b60:	9303      	str	r3, [sp, #12]
 8002b62:	2304      	movs	r3, #4
 8002b64:	9302      	str	r3, [sp, #8]
 8002b66:	2300      	movs	r3, #0
 8002b68:	9301      	str	r3, [sp, #4]
 8002b6a:	2312      	movs	r3, #18
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	2308      	movs	r3, #8
 8002b70:	4a29      	ldr	r2, [pc, #164]	; (8002c18 <Add_HWServW2ST_Service+0x1a8>)
 8002b72:	2102      	movs	r1, #2
 8002b74:	f006 fa51 	bl	800901a <aci_gatt_add_char>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	757b      	strb	r3, [r7, #21]
                           2+2+4,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8002b7c:	7d7b      	ldrb	r3, [r7, #21]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <Add_HWServW2ST_Service+0x116>
    return BLE_STATUS_ERROR;
 8002b82:	2347      	movs	r3, #71	; 0x47
 8002b84:	e040      	b.n	8002c08 <Add_HWServW2ST_Service+0x198>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8002b86:	231b      	movs	r3, #27
 8002b88:	713b      	strb	r3, [r7, #4]
 8002b8a:	23c5      	movs	r3, #197	; 0xc5
 8002b8c:	717b      	strb	r3, [r7, #5]
 8002b8e:	23d5      	movs	r3, #213	; 0xd5
 8002b90:	71bb      	strb	r3, [r7, #6]
 8002b92:	23a5      	movs	r3, #165	; 0xa5
 8002b94:	71fb      	strb	r3, [r7, #7]
 8002b96:	2302      	movs	r3, #2
 8002b98:	723b      	strb	r3, [r7, #8]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	727b      	strb	r3, [r7, #9]
 8002b9e:	2336      	movs	r3, #54	; 0x36
 8002ba0:	72bb      	strb	r3, [r7, #10]
 8002ba2:	23ac      	movs	r3, #172	; 0xac
 8002ba4:	72fb      	strb	r3, [r7, #11]
 8002ba6:	23e1      	movs	r3, #225	; 0xe1
 8002ba8:	733b      	strb	r3, [r7, #12]
 8002baa:	2311      	movs	r3, #17
 8002bac:	737b      	strb	r3, [r7, #13]
 8002bae:	2301      	movs	r3, #1
 8002bb0:	73bb      	strb	r3, [r7, #14]
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	73fb      	strb	r3, [r7, #15]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	743b      	strb	r3, [r7, #16]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	747b      	strb	r3, [r7, #17]
 8002bbe:	23e0      	movs	r3, #224	; 0xe0
 8002bc0:	74bb      	strb	r3, [r7, #18]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002bc6:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <Add_HWServW2ST_Service+0x1a8>)
 8002bc8:	461c      	mov	r4, r3
 8002bca:	1d3b      	adds	r3, r7, #4
 8002bcc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, &char_uuid,
 8002bd2:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <Add_HWServW2ST_Service+0x1a4>)
 8002bd4:	8818      	ldrh	r0, [r3, #0]
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <Add_HWServW2ST_Service+0x1b0>)
 8002bd8:	9305      	str	r3, [sp, #20]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	9304      	str	r3, [sp, #16]
 8002bde:	2310      	movs	r3, #16
 8002be0:	9303      	str	r3, [sp, #12]
 8002be2:	2304      	movs	r3, #4
 8002be4:	9302      	str	r3, [sp, #8]
 8002be6:	2300      	movs	r3, #0
 8002be8:	9301      	str	r3, [sp, #4]
 8002bea:	2310      	movs	r3, #16
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	2314      	movs	r3, #20
 8002bf0:	4a09      	ldr	r2, [pc, #36]	; (8002c18 <Add_HWServW2ST_Service+0x1a8>)
 8002bf2:	2102      	movs	r1, #2
 8002bf4:	f006 fa11 	bl	800901a <aci_gatt_add_char>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	757b      	strb	r3, [r7, #21]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8002bfc:	7d7b      	ldrb	r3, [r7, #21]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <Add_HWServW2ST_Service+0x196>
    return BLE_STATUS_ERROR;
 8002c02:	2347      	movs	r3, #71	; 0x47
 8002c04:	e000      	b.n	8002c08 <Add_HWServW2ST_Service+0x198>

  return BLE_STATUS_SUCCESS;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	371c      	adds	r7, #28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd90      	pop	{r4, r7, pc}
 8002c10:	20000660 	.word	0x20000660
 8002c14:	20000654 	.word	0x20000654
 8002c18:	20000670 	.word	0x20000670
 8002c1c:	20000656 	.word	0x20000656
 8002c20:	20000658 	.word	0x20000658

08002c24 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 8002c24:	b590      	push	{r4, r7, lr}
 8002c26:	b08d      	sub	sp, #52	; 0x34
 8002c28:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  /* num of characteristics of this service */
  uint8_t char_number = 1;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	75fb      	strb	r3, [r7, #23]
  /* number of attribute records that can be added to this service */
  uint8_t max_attribute_records = 1+(3*char_number);
 8002c2e:	7dfb      	ldrb	r3, [r7, #23]
 8002c30:	461a      	mov	r2, r3
 8002c32:	0052      	lsls	r2, r2, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	3301      	adds	r3, #1
 8002c3a:	75bb      	strb	r3, [r7, #22]

  /* add SW_SENS_W2ST service */
  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 8002c3c:	231b      	movs	r3, #27
 8002c3e:	713b      	strb	r3, [r7, #4]
 8002c40:	23c5      	movs	r3, #197	; 0xc5
 8002c42:	717b      	strb	r3, [r7, #5]
 8002c44:	23d5      	movs	r3, #213	; 0xd5
 8002c46:	71bb      	strb	r3, [r7, #6]
 8002c48:	23a5      	movs	r3, #165	; 0xa5
 8002c4a:	71fb      	strb	r3, [r7, #7]
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	723b      	strb	r3, [r7, #8]
 8002c50:	2300      	movs	r3, #0
 8002c52:	727b      	strb	r3, [r7, #9]
 8002c54:	23b4      	movs	r3, #180	; 0xb4
 8002c56:	72bb      	strb	r3, [r7, #10]
 8002c58:	239a      	movs	r3, #154	; 0x9a
 8002c5a:	72fb      	strb	r3, [r7, #11]
 8002c5c:	23e1      	movs	r3, #225	; 0xe1
 8002c5e:	733b      	strb	r3, [r7, #12]
 8002c60:	2311      	movs	r3, #17
 8002c62:	737b      	strb	r3, [r7, #13]
 8002c64:	2302      	movs	r3, #2
 8002c66:	73bb      	strb	r3, [r7, #14]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	73fb      	strb	r3, [r7, #15]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	743b      	strb	r3, [r7, #16]
 8002c70:	2300      	movs	r3, #0
 8002c72:	747b      	strb	r3, [r7, #17]
 8002c74:	2300      	movs	r3, #0
 8002c76:	74bb      	strb	r3, [r7, #18]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8002c7c:	4b2d      	ldr	r3, [pc, #180]	; (8002d34 <Add_SWServW2ST_Service+0x110>)
 8002c7e:	461c      	mov	r4, r3
 8002c80:	1d3b      	adds	r3, r7, #4
 8002c82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE,
 8002c88:	7dbb      	ldrb	r3, [r7, #22]
 8002c8a:	4a2b      	ldr	r2, [pc, #172]	; (8002d38 <Add_SWServW2ST_Service+0x114>)
 8002c8c:	9200      	str	r2, [sp, #0]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	4928      	ldr	r1, [pc, #160]	; (8002d34 <Add_SWServW2ST_Service+0x110>)
 8002c92:	2002      	movs	r0, #2
 8002c94:	f006 f8eb 	bl	8008e6e <aci_gatt_add_service>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	757b      	strb	r3, [r7, #21]
                             max_attribute_records, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8002c9c:	7d7b      	ldrb	r3, [r7, #21]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d13f      	bne.n	8002d22 <Add_SWServW2ST_Service+0xfe>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 8002ca2:	231b      	movs	r3, #27
 8002ca4:	713b      	strb	r3, [r7, #4]
 8002ca6:	23c5      	movs	r3, #197	; 0xc5
 8002ca8:	717b      	strb	r3, [r7, #5]
 8002caa:	23d5      	movs	r3, #213	; 0xd5
 8002cac:	71bb      	strb	r3, [r7, #6]
 8002cae:	23a5      	movs	r3, #165	; 0xa5
 8002cb0:	71fb      	strb	r3, [r7, #7]
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	723b      	strb	r3, [r7, #8]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	727b      	strb	r3, [r7, #9]
 8002cba:	2336      	movs	r3, #54	; 0x36
 8002cbc:	72bb      	strb	r3, [r7, #10]
 8002cbe:	23ac      	movs	r3, #172	; 0xac
 8002cc0:	72fb      	strb	r3, [r7, #11]
 8002cc2:	23e1      	movs	r3, #225	; 0xe1
 8002cc4:	733b      	strb	r3, [r7, #12]
 8002cc6:	2311      	movs	r3, #17
 8002cc8:	737b      	strb	r3, [r7, #13]
 8002cca:	2301      	movs	r3, #1
 8002ccc:	73bb      	strb	r3, [r7, #14]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	73fb      	strb	r3, [r7, #15]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	743b      	strb	r3, [r7, #16]
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	747b      	strb	r3, [r7, #17]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	74bb      	strb	r3, [r7, #18]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8002ce2:	4b16      	ldr	r3, [pc, #88]	; (8002d3c <Add_SWServW2ST_Service+0x118>)
 8002ce4:	461c      	mov	r4, r3
 8002ce6:	1d3b      	adds	r3, r7, #4
 8002ce8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, &char_uuid,
 8002cee:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <Add_SWServW2ST_Service+0x114>)
 8002cf0:	8818      	ldrh	r0, [r3, #0]
 8002cf2:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <Add_SWServW2ST_Service+0x11c>)
 8002cf4:	9305      	str	r3, [sp, #20]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	9304      	str	r3, [sp, #16]
 8002cfa:	2310      	movs	r3, #16
 8002cfc:	9303      	str	r3, [sp, #12]
 8002cfe:	2304      	movs	r3, #4
 8002d00:	9302      	str	r3, [sp, #8]
 8002d02:	2300      	movs	r3, #0
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	2310      	movs	r3, #16
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	2308      	movs	r3, #8
 8002d0c:	4a0b      	ldr	r2, [pc, #44]	; (8002d3c <Add_SWServW2ST_Service+0x118>)
 8002d0e:	2102      	movs	r1, #2
 8002d10:	f006 f983 	bl	800901a <aci_gatt_add_char>
 8002d14:	4603      	mov	r3, r0
 8002d16:	757b      	strb	r3, [r7, #21]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8002d18:	7d7b      	ldrb	r3, [r7, #21]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d103      	bne.n	8002d26 <Add_SWServW2ST_Service+0x102>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	e003      	b.n	8002d2a <Add_SWServW2ST_Service+0x106>
    goto fail;
 8002d22:	bf00      	nop
 8002d24:	e000      	b.n	8002d28 <Add_SWServW2ST_Service+0x104>
    goto fail;
 8002d26:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 8002d28:	2347      	movs	r3, #71	; 0x47
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	371c      	adds	r7, #28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd90      	pop	{r4, r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000660 	.word	0x20000660
 8002d38:	2000065a 	.word	0x2000065a
 8002d3c:	20000670 	.word	0x20000670
 8002d40:	2000065c 	.word	0x2000065c

08002d44 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08c      	sub	sp, #48	; 0x30
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002d50:	f001 fd86 	bl	8004860 <HAL_GetTick>
 8002d54:	4603      	mov	r3, r0
 8002d56:	08db      	lsrs	r3, r3, #3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	743b      	strb	r3, [r7, #16]
 8002d5c:	f001 fd80 	bl	8004860 <HAL_GetTick>
 8002d60:	4603      	mov	r3, r0
 8002d62:	0adb      	lsrs	r3, r3, #11
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2, -x_axes->AXIS_X);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	425b      	negs	r3, r3
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	74bb      	strb	r3, [r7, #18]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	425b      	negs	r3, r3
 8002d7a:	121b      	asrs	r3, r3, #8
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4,  x_axes->AXIS_Y);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	753b      	strb	r3, [r7, #20]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	121b      	asrs	r3, r3, #8
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6, -x_axes->AXIS_Z);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	425b      	negs	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	75bb      	strb	r3, [r7, #22]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	425b      	negs	r3, r3
 8002da4:	121b      	asrs	r3, r3, #8
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,  g_axes->AXIS_X);
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	763b      	strb	r3, [r7, #24]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	121b      	asrs	r3, r3, #8
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10, g_axes->AXIS_Y);
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	76bb      	strb	r3, [r7, #26]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	121b      	asrs	r3, r3, #8
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12, g_axes->AXIS_Z);
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	773b      	strb	r3, [r7, #28]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	121b      	asrs	r3, r3, #8
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14, m_axes->AXIS_X);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	77bb      	strb	r3, [r7, #30]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	121b      	asrs	r3, r3, #8
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16, m_axes->AXIS_Y);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	f887 3020 	strb.w	r3, [r7, #32]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	121b      	asrs	r3, r3, #8
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  HOST_TO_LE_16(buff+18, m_axes->AXIS_Z);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	121b      	asrs	r3, r3, #8
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8002e1e:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <Acc_Update+0x118>)
 8002e20:	8818      	ldrh	r0, [r3, #0]
 8002e22:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <Acc_Update+0x11c>)
 8002e24:	8819      	ldrh	r1, [r3, #0]
 8002e26:	f107 0310 	add.w	r3, r7, #16
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	2314      	movs	r3, #20
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f006 f9fb 	bl	800922a <aci_gatt_update_char_value>
 8002e34:	4603      	mov	r3, r0
 8002e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8002e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d007      	beq.n	8002e52 <Acc_Update+0x10e>
    PRINT_DBG("Error while updating Acceleration characteristic: 0x%02X\r\n",ret) ;
 8002e42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e46:	4619      	mov	r1, r3
 8002e48:	4806      	ldr	r0, [pc, #24]	; (8002e64 <Acc_Update+0x120>)
 8002e4a:	f009 f933 	bl	800c0b4 <iprintf>
    return BLE_STATUS_ERROR ;
 8002e4e:	2347      	movs	r3, #71	; 0x47
 8002e50:	e000      	b.n	8002e54 <Acc_Update+0x110>
  }

  return BLE_STATUS_SUCCESS;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3728      	adds	r7, #40	; 0x28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	20000654 	.word	0x20000654
 8002e60:	20000658 	.word	0x20000658
 8002e64:	0800e7dc 	.word	0x0800e7dc

08002e68 <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8002e70:	f001 fcf6 	bl	8004860 <HAL_GetTick>
 8002e74:	4603      	mov	r3, r0
 8002e76:	08db      	lsrs	r3, r3, #3
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	733b      	strb	r3, [r7, #12]
 8002e7c:	f001 fcf0 	bl	8004860 <HAL_GetTick>
 8002e80:	4603      	mov	r3, r0
 8002e82:	0adb      	lsrs	r3, r3, #11
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	73bb      	strb	r3, [r7, #14]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	121b      	asrs	r3, r3, #8
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	743b      	strb	r3, [r7, #16]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	121b      	asrs	r3, r3, #8
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	74bb      	strb	r3, [r7, #18]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	121b      	asrs	r3, r3, #8
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 8002ebe:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <Quat_Update+0x90>)
 8002ec0:	8818      	ldrh	r0, [r3, #0]
 8002ec2:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <Quat_Update+0x94>)
 8002ec4:	8819      	ldrh	r1, [r3, #0]
 8002ec6:	f107 030c 	add.w	r3, r7, #12
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	2308      	movs	r3, #8
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f006 f9ab 	bl	800922a <aci_gatt_update_char_value>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8002ed8:	7dfb      	ldrb	r3, [r7, #23]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d006      	beq.n	8002eec <Quat_Update+0x84>
    PRINT_DBG("Error while updating Sensor Fusion characteristic: 0x%02X\r\n",ret) ;
 8002ede:	7dfb      	ldrb	r3, [r7, #23]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4807      	ldr	r0, [pc, #28]	; (8002f00 <Quat_Update+0x98>)
 8002ee4:	f009 f8e6 	bl	800c0b4 <iprintf>
    return BLE_STATUS_ERROR ;
 8002ee8:	2347      	movs	r3, #71	; 0x47
 8002eea:	e000      	b.n	8002eee <Quat_Update+0x86>
  }

  return BLE_STATUS_SUCCESS;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	2000065a 	.word	0x2000065a
 8002efc:	2000065c 	.word	0x2000065c
 8002f00:	0800e818 	.word	0x0800e818

08002f04 <Read_Request_CB>:
* Description    : Update the sensor valuse.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 8002f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f08:	b08e      	sub	sp, #56	; 0x38
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	84fb      	strh	r3, [r7, #38]	; 0x26
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 8002f10:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002f12:	4b5d      	ldr	r3, [pc, #372]	; (8003088 <Read_Request_CB+0x184>)
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	3301      	adds	r3, #1
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d105      	bne.n	8002f28 <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 8002f1c:	4a5b      	ldr	r2, [pc, #364]	; (800308c <Read_Request_CB+0x188>)
 8002f1e:	495c      	ldr	r1, [pc, #368]	; (8003090 <Read_Request_CB+0x18c>)
 8002f20:	485c      	ldr	r0, [pc, #368]	; (8003094 <Read_Request_CB+0x190>)
 8002f22:	f7ff ff0f 	bl	8002d44 <Acc_Update>
 8002f26:	e091      	b.n	800304c <Read_Request_CB+0x148>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 8002f28:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002f2a:	4b5b      	ldr	r3, [pc, #364]	; (8003098 <Read_Request_CB+0x194>)
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	429a      	cmp	r2, r3
 8002f32:	f040 808b 	bne.w	800304c <Read_Request_CB+0x148>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 8002f36:	f008 fb57 	bl	800b5e8 <rand>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	17da      	asrs	r2, r3, #31
 8002f3e:	61bb      	str	r3, [r7, #24]
 8002f40:	61fa      	str	r2, [r7, #28]
 8002f42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f46:	f04f 0000 	mov.w	r0, #0
 8002f4a:	f04f 0100 	mov.w	r1, #0
 8002f4e:	0099      	lsls	r1, r3, #2
 8002f50:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002f54:	0090      	lsls	r0, r2, #2
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	69b9      	ldr	r1, [r7, #24]
 8002f5c:	1851      	adds	r1, r2, r1
 8002f5e:	6139      	str	r1, [r7, #16]
 8002f60:	69f9      	ldr	r1, [r7, #28]
 8002f62:	eb43 0101 	adc.w	r1, r3, r1
 8002f66:	6179      	str	r1, [r7, #20]
 8002f68:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f74:	f7fd fe68 	bl	8000c48 <__aeabi_uldivmod>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	4619      	mov	r1, r3
 8002f80:	f7fd fb04 	bl	800058c <__aeabi_ul2d>
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	4b44      	ldr	r3, [pc, #272]	; (800309c <Read_Request_CB+0x198>)
 8002f8a:	f7fd f97f 	bl	800028c <__adddf3>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4610      	mov	r0, r2
 8002f94:	4619      	mov	r1, r3
 8002f96:	f7fd fe07 	bl	8000ba8 <__aeabi_d2f>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	637b      	str	r3, [r7, #52]	; 0x34
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 8002f9e:	f008 fb23 	bl	800b5e8 <rand>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	17da      	asrs	r2, r3, #31
 8002fa6:	4698      	mov	r8, r3
 8002fa8:	4691      	mov	r9, r2
 8002faa:	4642      	mov	r2, r8
 8002fac:	464b      	mov	r3, r9
 8002fae:	1891      	adds	r1, r2, r2
 8002fb0:	6039      	str	r1, [r7, #0]
 8002fb2:	415b      	adcs	r3, r3
 8002fb4:	607b      	str	r3, [r7, #4]
 8002fb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fba:	eb12 0408 	adds.w	r4, r2, r8
 8002fbe:	eb43 0509 	adc.w	r5, r3, r9
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	016b      	lsls	r3, r5, #5
 8002fcc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002fd0:	0162      	lsls	r2, r4, #5
 8002fd2:	eb14 0a02 	adds.w	sl, r4, r2
 8002fd6:	eb45 0b03 	adc.w	fp, r5, r3
 8002fda:	eb1a 0308 	adds.w	r3, sl, r8
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	eb4b 0309 	adc.w	r3, fp, r9
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002fea:	f04f 0300 	mov.w	r3, #0
 8002fee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ff2:	f7fd fe29 	bl	8000c48 <__aeabi_uldivmod>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	f7fd fac5 	bl	800058c <__aeabi_ul2d>
 8003002:	f04f 0200 	mov.w	r2, #0
 8003006:	4b26      	ldr	r3, [pc, #152]	; (80030a0 <Read_Request_CB+0x19c>)
 8003008:	f7fd f940 	bl	800028c <__adddf3>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4610      	mov	r0, r2
 8003012:	4619      	mov	r1, r3
 8003014:	f7fd fdc8 	bl	8000ba8 <__aeabi_d2f>
 8003018:	4603      	mov	r3, r0
 800301a:	633b      	str	r3, [r7, #48]	; 0x30
    Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 800301c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003020:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80030a4 <Read_Request_CB+0x1a0>
 8003024:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003028:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800302c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003030:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003034:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003038:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800303c:	ee17 3a90 	vmov	r3, s15
 8003040:	b21b      	sxth	r3, r3
 8003042:	4619      	mov	r1, r3
 8003044:	ee16 0a90 	vmov	r0, s13
 8003048:	f000 f832 	bl	80030b0 <Environmental_Update>
  }

  if(connection_handle !=0)
 800304c:	4b16      	ldr	r3, [pc, #88]	; (80030a8 <Read_Request_CB+0x1a4>)
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d012      	beq.n	800307c <Read_Request_CB+0x178>
  {
    ret = aci_gatt_allow_read(connection_handle);
 8003056:	4b14      	ldr	r3, [pc, #80]	; (80030a8 <Read_Request_CB+0x1a4>)
 8003058:	881b      	ldrh	r3, [r3, #0]
 800305a:	b29b      	uxth	r3, r3
 800305c:	4618      	mov	r0, r3
 800305e:	f006 f996 	bl	800938e <aci_gatt_allow_read>
 8003062:	4603      	mov	r3, r0
 8003064:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (ret != BLE_STATUS_SUCCESS)
 8003068:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <Read_Request_CB+0x178>
    {
      PRINT_DBG("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
 8003070:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003074:	4619      	mov	r1, r3
 8003076:	480d      	ldr	r0, [pc, #52]	; (80030ac <Read_Request_CB+0x1a8>)
 8003078:	f009 f81c 	bl	800c0b4 <iprintf>
    }
  }
}
 800307c:	bf00      	nop
 800307e:	3738      	adds	r7, #56	; 0x38
 8003080:	46bd      	mov	sp, r7
 8003082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003086:	bf00      	nop
 8003088:	20000658 	.word	0x20000658
 800308c:	200007fc 	.word	0x200007fc
 8003090:	200007f0 	.word	0x200007f0
 8003094:	200007e4 	.word	0x200007e4
 8003098:	20000656 	.word	0x20000656
 800309c:	403b0000 	.word	0x403b0000
 80030a0:	408f4000 	.word	0x408f4000
 80030a4:	42c80000 	.word	0x42c80000
 80030a8:	200007dc 	.word	0x200007dc
 80030ac:	0800e854 	.word	0x0800e854

080030b0 <Environmental_Update>:

tBleStatus Environmental_Update(int32_t press, int16_t temp)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 80030bc:	f001 fbd0 	bl	8004860 <HAL_GetTick>
 80030c0:	4603      	mov	r3, r0
 80030c2:	08db      	lsrs	r3, r3, #3
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	733b      	strb	r3, [r7, #12]
 80030c8:	f001 fbca 	bl	8004860 <HAL_GetTick>
 80030cc:	4603      	mov	r3, r0
 80030ce:	0adb      	lsrs	r3, r3, #11
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	73bb      	strb	r3, [r7, #14]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	121b      	asrs	r3, r3, #8
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	73fb      	strb	r3, [r7, #15]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	141b      	asrs	r3, r3, #16
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	743b      	strb	r3, [r7, #16]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	161b      	asrs	r3, r3, #24
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 80030f2:	887b      	ldrh	r3, [r7, #2]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	74bb      	strb	r3, [r7, #18]
 80030f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80030fc:	121b      	asrs	r3, r3, #8
 80030fe:	b21b      	sxth	r3, r3
 8003100:	b2db      	uxtb	r3, r3
 8003102:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 8003104:	4b0d      	ldr	r3, [pc, #52]	; (800313c <Environmental_Update+0x8c>)
 8003106:	8818      	ldrh	r0, [r3, #0]
 8003108:	4b0d      	ldr	r3, [pc, #52]	; (8003140 <Environmental_Update+0x90>)
 800310a:	8819      	ldrh	r1, [r3, #0]
 800310c:	f107 030c 	add.w	r3, r7, #12
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	2308      	movs	r3, #8
 8003114:	2200      	movs	r2, #0
 8003116:	f006 f888 	bl	800922a <aci_gatt_update_char_value>
 800311a:	4603      	mov	r3, r0
 800311c:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 800311e:	7dfb      	ldrb	r3, [r7, #23]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d006      	beq.n	8003132 <Environmental_Update+0x82>
    PRINT_DBG("Error while updating TEMP characteristic: 0x%04X\r\n",ret) ;
 8003124:	7dfb      	ldrb	r3, [r7, #23]
 8003126:	4619      	mov	r1, r3
 8003128:	4806      	ldr	r0, [pc, #24]	; (8003144 <Environmental_Update+0x94>)
 800312a:	f008 ffc3 	bl	800c0b4 <iprintf>
    return BLE_STATUS_ERROR ;
 800312e:	2347      	movs	r3, #71	; 0x47
 8003130:	e000      	b.n	8003134 <Environmental_Update+0x84>
  }

  return BLE_STATUS_SUCCESS;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	20000654 	.word	0x20000654
 8003140:	20000656 	.word	0x20000656
 8003144:	0800e87c 	.word	0x0800e87c

08003148 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08a      	sub	sp, #40	; 0x28
 800314c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800314e:	f107 0314 	add.w	r3, r7, #20
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	605a      	str	r2, [r3, #4]
 8003158:	609a      	str	r2, [r3, #8]
 800315a:	60da      	str	r2, [r3, #12]
 800315c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800315e:	4b34      	ldr	r3, [pc, #208]	; (8003230 <MX_GPIO_Init+0xe8>)
 8003160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003162:	4a33      	ldr	r2, [pc, #204]	; (8003230 <MX_GPIO_Init+0xe8>)
 8003164:	f043 0304 	orr.w	r3, r3, #4
 8003168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800316a:	4b31      	ldr	r3, [pc, #196]	; (8003230 <MX_GPIO_Init+0xe8>)
 800316c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003176:	4b2e      	ldr	r3, [pc, #184]	; (8003230 <MX_GPIO_Init+0xe8>)
 8003178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317a:	4a2d      	ldr	r2, [pc, #180]	; (8003230 <MX_GPIO_Init+0xe8>)
 800317c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003180:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003182:	4b2b      	ldr	r3, [pc, #172]	; (8003230 <MX_GPIO_Init+0xe8>)
 8003184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800318e:	4b28      	ldr	r3, [pc, #160]	; (8003230 <MX_GPIO_Init+0xe8>)
 8003190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003192:	4a27      	ldr	r2, [pc, #156]	; (8003230 <MX_GPIO_Init+0xe8>)
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	64d3      	str	r3, [r2, #76]	; 0x4c
 800319a:	4b25      	ldr	r3, [pc, #148]	; (8003230 <MX_GPIO_Init+0xe8>)
 800319c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a6:	4b22      	ldr	r3, [pc, #136]	; (8003230 <MX_GPIO_Init+0xe8>)
 80031a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031aa:	4a21      	ldr	r2, [pc, #132]	; (8003230 <MX_GPIO_Init+0xe8>)
 80031ac:	f043 0302 	orr.w	r3, r3, #2
 80031b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031b2:	4b1f      	ldr	r3, [pc, #124]	; (8003230 <MX_GPIO_Init+0xe8>)
 80031b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	607b      	str	r3, [r7, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 80031be:	2200      	movs	r2, #0
 80031c0:	f44f 7181 	mov.w	r1, #258	; 0x102
 80031c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031c8:	f001 ffd2 	bl	8005170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031cc:	2301      	movs	r3, #1
 80031ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031d0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80031d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031da:	f107 0314 	add.w	r3, r7, #20
 80031de:	4619      	mov	r1, r3
 80031e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031e4:	f001 fd0e 	bl	8004c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 80031e8:	f44f 7381 	mov.w	r3, #258	; 0x102
 80031ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ee:	2301      	movs	r3, #1
 80031f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f6:	2300      	movs	r3, #0
 80031f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031fa:	f107 0314 	add.w	r3, r7, #20
 80031fe:	4619      	mov	r1, r3
 8003200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003204:	f001 fcfe 	bl	8004c04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003208:	2200      	movs	r2, #0
 800320a:	2100      	movs	r1, #0
 800320c:	2006      	movs	r0, #6
 800320e:	f001 fc56 	bl	8004abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003212:	2006      	movs	r0, #6
 8003214:	f001 fc6f 	bl	8004af6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003218:	2200      	movs	r2, #0
 800321a:	2100      	movs	r1, #0
 800321c:	2028      	movs	r0, #40	; 0x28
 800321e:	f001 fc4e 	bl	8004abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003222:	2028      	movs	r0, #40	; 0x28
 8003224:	f001 fc67 	bl	8004af6 <HAL_NVIC_EnableIRQ>

}
 8003228:	bf00      	nop
 800322a:	3728      	adds	r7, #40	; 0x28
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40021000 	.word	0x40021000

08003234 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8003238:	2006      	movs	r0, #6
 800323a:	f001 fc5c 	bl	8004af6 <HAL_NVIC_EnableIRQ>
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}

08003242 <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8003246:	2006      	movs	r0, #6
 8003248:	f001 fc63 	bl	8004b12 <HAL_NVIC_DisableIRQ>
}
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}

08003250 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003258:	4b22      	ldr	r3, [pc, #136]	; (80032e4 <HCI_TL_SPI_Init+0x94>)
 800325a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325c:	4a21      	ldr	r2, [pc, #132]	; (80032e4 <HCI_TL_SPI_Init+0x94>)
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003264:	4b1f      	ldr	r3, [pc, #124]	; (80032e4 <HCI_TL_SPI_Init+0x94>)
 8003266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8003270:	2301      	movs	r3, #1
 8003272:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003274:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003278:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800327e:	f107 030c 	add.w	r3, r7, #12
 8003282:	4619      	mov	r1, r3
 8003284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003288:	f001 fcbc 	bl	8004c04 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800328c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003290:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003292:	2301      	movs	r3, #1
 8003294:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329a:	2300      	movs	r3, #0
 800329c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800329e:	f107 030c 	add.w	r3, r7, #12
 80032a2:	4619      	mov	r1, r3
 80032a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032a8:	f001 fcac 	bl	8004c04 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80032ac:	2302      	movs	r3, #2
 80032ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032b0:	2301      	movs	r3, #1
 80032b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b8:	2300      	movs	r3, #0
 80032ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80032bc:	f107 030c 	add.w	r3, r7, #12
 80032c0:	4619      	mov	r1, r3
 80032c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032c6:	f001 fc9d 	bl	8004c04 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80032ca:	2201      	movs	r2, #1
 80032cc:	2102      	movs	r1, #2
 80032ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032d2:	f001 ff4d 	bl	8005170 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 80032d6:	f000 fbd5 	bl	8003a84 <BSP_SPI1_Init>
 80032da:	4603      	mov	r3, r0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3720      	adds	r7, #32
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40021000 	.word	0x40021000

080032e8 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80032ec:	2101      	movs	r1, #1
 80032ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032f2:	f001 fe31 	bl	8004f58 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80032f6:	2102      	movs	r1, #2
 80032f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032fc:	f001 fe2c 	bl	8004f58 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8003300:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003308:	f001 fe26 	bl	8004f58 <HAL_GPIO_DeInit>
  return 0;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	bd80      	pop	{r7, pc}

08003312 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8003316:	2201      	movs	r2, #1
 8003318:	2102      	movs	r1, #2
 800331a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800331e:	f001 ff27 	bl	8005170 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8003322:	2200      	movs	r2, #0
 8003324:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800332c:	f001 ff20 	bl	8005170 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8003330:	2005      	movs	r0, #5
 8003332:	f001 faa1 	bl	8004878 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8003336:	2201      	movs	r2, #1
 8003338:	f44f 7180 	mov.w	r1, #256	; 0x100
 800333c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003340:	f001 ff16 	bl	8005170 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8003344:	2005      	movs	r0, #5
 8003346:	f001 fa97 	bl	8004878 <HAL_Delay>
  return 0;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	bd80      	pop	{r7, pc}

08003350 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 800335c:	2300      	movs	r3, #0
 800335e:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 8003360:	2300      	movs	r3, #0
 8003362:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8003364:	4a27      	ldr	r2, [pc, #156]	; (8003404 <HCI_TL_SPI_Receive+0xb4>)
 8003366:	f107 0314 	add.w	r3, r7, #20
 800336a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800336e:	6018      	str	r0, [r3, #0]
 8003370:	3304      	adds	r3, #4
 8003372:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 8003374:	f7ff ff65 	bl	8003242 <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8003378:	2200      	movs	r2, #0
 800337a:	2102      	movs	r1, #2
 800337c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003380:	f001 fef6 	bl	8005170 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8003384:	f107 010c 	add.w	r1, r7, #12
 8003388:	f107 0314 	add.w	r3, r7, #20
 800338c:	2205      	movs	r2, #5
 800338e:	4618      	mov	r0, r3
 8003390:	f000 fba8 	bl	8003ae4 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 8003394:	7c3b      	ldrb	r3, [r7, #16]
 8003396:	021b      	lsls	r3, r3, #8
 8003398:	b21a      	sxth	r2, r3
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	b21b      	sxth	r3, r3
 800339e:	4313      	orrs	r3, r2
 80033a0:	b21b      	sxth	r3, r3
 80033a2:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 80033a4:	8bfb      	ldrh	r3, [r7, #30]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d01e      	beq.n	80033e8 <HCI_TL_SPI_Receive+0x98>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 80033aa:	8bfa      	ldrh	r2, [r7, #30]
 80033ac:	887b      	ldrh	r3, [r7, #2]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d901      	bls.n	80033b6 <HCI_TL_SPI_Receive+0x66>
    {
      byte_count = size;
 80033b2:	887b      	ldrh	r3, [r7, #2]
 80033b4:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 80033b6:	2300      	movs	r3, #0
 80033b8:	777b      	strb	r3, [r7, #29]
 80033ba:	e010      	b.n	80033de <HCI_TL_SPI_Receive+0x8e>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 80033bc:	f107 011b 	add.w	r1, r7, #27
 80033c0:	f107 031c 	add.w	r3, r7, #28
 80033c4:	2201      	movs	r2, #1
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fb8c 	bl	8003ae4 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 80033cc:	7f7b      	ldrb	r3, [r7, #29]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	4413      	add	r3, r2
 80033d2:	7efa      	ldrb	r2, [r7, #27]
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 80033d8:	7f7b      	ldrb	r3, [r7, #29]
 80033da:	3301      	adds	r3, #1
 80033dc:	777b      	strb	r3, [r7, #29]
 80033de:	7f7b      	ldrb	r3, [r7, #29]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	8bfa      	ldrh	r2, [r7, #30]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d8e9      	bhi.n	80033bc <HCI_TL_SPI_Receive+0x6c>
    }
  }

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80033e8:	2201      	movs	r2, #1
 80033ea:	2102      	movs	r1, #2
 80033ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033f0:	f001 febe 	bl	8005170 <HAL_GPIO_WritePin>

  HCI_TL_SPI_Enable_IRQ();
 80033f4:	f7ff ff1e 	bl	8003234 <HCI_TL_SPI_Enable_IRQ>

  return len;
 80033f8:	7f7b      	ldrb	r3, [r7, #29]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3720      	adds	r7, #32
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	0800e8b0 	.word	0x0800e8b0

08003408 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08a      	sub	sp, #40	; 0x28
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8003414:	4a36      	ldr	r2, [pc, #216]	; (80034f0 <HCI_TL_SPI_Send+0xe8>)
 8003416:	f107 0314 	add.w	r3, r7, #20
 800341a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800341e:	6018      	str	r0, [r3, #0]
 8003420:	3304      	adds	r3, #4
 8003422:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8003424:	f001 fa1c 	bl	8004860 <HAL_GetTick>
 8003428:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 800342a:	f7ff ff0a 	bl	8003242 <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 800342e:	f001 fa17 	bl	8004860 <HAL_GetTick>
 8003432:	61f8      	str	r0, [r7, #28]

    result = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8003438:	2200      	movs	r2, #0
 800343a:	2102      	movs	r1, #2
 800343c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003440:	f001 fe96 	bl	8005170 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 8003444:	e00a      	b.n	800345c <HCI_TL_SPI_Send+0x54>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 8003446:	f001 fa0b 	bl	8004860 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b0f      	cmp	r3, #15
 8003452:	d903      	bls.n	800345c <HCI_TL_SPI_Send+0x54>
      {
        result = -3;
 8003454:	f06f 0302 	mvn.w	r3, #2
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800345a:	e004      	b.n	8003466 <HCI_TL_SPI_Send+0x5e>
    while(!IsDataAvailable())
 800345c:	f000 f84c 	bl	80034f8 <IsDataAvailable>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0ef      	beq.n	8003446 <HCI_TL_SPI_Send+0x3e>
      }
    }
    if(result == -3)
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	f113 0f03 	cmn.w	r3, #3
 800346c:	d106      	bne.n	800347c <HCI_TL_SPI_Send+0x74>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800346e:	2201      	movs	r2, #1
 8003470:	2102      	movs	r1, #2
 8003472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003476:	f001 fe7b 	bl	8005170 <HAL_GPIO_WritePin>
      break;
 800347a:	e031      	b.n	80034e0 <HCI_TL_SPI_Send+0xd8>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800347c:	f107 010c 	add.w	r1, r7, #12
 8003480:	f107 0314 	add.w	r3, r7, #20
 8003484:	2205      	movs	r2, #5
 8003486:	4618      	mov	r0, r3
 8003488:	f000 fb2c 	bl	8003ae4 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 800348c:	7bbb      	ldrb	r3, [r7, #14]
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	b21a      	sxth	r2, r3
 8003492:	7b7b      	ldrb	r3, [r7, #13]
 8003494:	b21b      	sxth	r3, r3
 8003496:	4313      	orrs	r3, r2
 8003498:	b21b      	sxth	r3, r3
 800349a:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 800349c:	8b7a      	ldrh	r2, [r7, #26]
 800349e:	887b      	ldrh	r3, [r7, #2]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d306      	bcc.n	80034b2 <HCI_TL_SPI_Send+0xaa>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80034a4:	887b      	ldrh	r3, [r7, #2]
 80034a6:	461a      	mov	r2, r3
 80034a8:	4912      	ldr	r1, [pc, #72]	; (80034f4 <HCI_TL_SPI_Send+0xec>)
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fb1a 	bl	8003ae4 <BSP_SPI1_SendRecv>
 80034b0:	e002      	b.n	80034b8 <HCI_TL_SPI_Send+0xb0>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 80034b2:	f06f 0301 	mvn.w	r3, #1
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80034b8:	2201      	movs	r2, #1
 80034ba:	2102      	movs	r1, #2
 80034bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034c0:	f001 fe56 	bl	8005170 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80034c4:	f001 f9cc 	bl	8004860 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b0f      	cmp	r3, #15
 80034d0:	d903      	bls.n	80034da <HCI_TL_SPI_Send+0xd2>
    {
      result = -3;
 80034d2:	f06f 0302 	mvn.w	r3, #2
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80034d8:	e002      	b.n	80034e0 <HCI_TL_SPI_Send+0xd8>
    }
  } while(result < 0);
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	2b00      	cmp	r3, #0
 80034de:	dba6      	blt.n	800342e <HCI_TL_SPI_Send+0x26>

  HCI_TL_SPI_Enable_IRQ();
 80034e0:	f7ff fea8 	bl	8003234 <HCI_TL_SPI_Enable_IRQ>

  return result;
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3728      	adds	r7, #40	; 0x28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	0800e8b8 	.word	0x0800e8b8
 80034f4:	20000688 	.word	0x20000688

080034f8 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80034fc:	2101      	movs	r1, #1
 80034fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003502:	f001 fe1d 	bl	8005140 <HAL_GPIO_ReadPin>
 8003506:	4603      	mov	r3, r0
 8003508:	2b01      	cmp	r3, #1
 800350a:	bf0c      	ite	eq
 800350c:	2301      	moveq	r3, #1
 800350e:	2300      	movne	r3, #0
 8003510:	b2db      	uxtb	r3, r3
}
 8003512:	4618      	mov	r0, r3
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800351e:	4b13      	ldr	r3, [pc, #76]	; (800356c <hci_tl_lowlevel_init+0x54>)
 8003520:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8003522:	4b13      	ldr	r3, [pc, #76]	; (8003570 <hci_tl_lowlevel_init+0x58>)
 8003524:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8003526:	4b13      	ldr	r3, [pc, #76]	; (8003574 <hci_tl_lowlevel_init+0x5c>)
 8003528:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 800352a:	4b13      	ldr	r3, [pc, #76]	; (8003578 <hci_tl_lowlevel_init+0x60>)
 800352c:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 800352e:	4b13      	ldr	r3, [pc, #76]	; (800357c <hci_tl_lowlevel_init+0x64>)
 8003530:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8003532:	4b13      	ldr	r3, [pc, #76]	; (8003580 <hci_tl_lowlevel_init+0x68>)
 8003534:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8003536:	1d3b      	adds	r3, r7, #4
 8003538:	4618      	mov	r0, r3
 800353a:	f007 fd5f 	bl	800affc <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 800353e:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 8003542:	4810      	ldr	r0, [pc, #64]	; (8003584 <hci_tl_lowlevel_init+0x6c>)
 8003544:	f001 fb19 	bl	8004b7a <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8003548:	4a0f      	ldr	r2, [pc, #60]	; (8003588 <hci_tl_lowlevel_init+0x70>)
 800354a:	2100      	movs	r1, #0
 800354c:	480d      	ldr	r0, [pc, #52]	; (8003584 <hci_tl_lowlevel_init+0x6c>)
 800354e:	f001 fafa 	bl	8004b46 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003552:	2200      	movs	r2, #0
 8003554:	2100      	movs	r1, #0
 8003556:	2006      	movs	r0, #6
 8003558:	f001 fab1 	bl	8004abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800355c:	2006      	movs	r0, #6
 800355e:	f001 faca 	bl	8004af6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8003562:	bf00      	nop
 8003564:	3720      	adds	r7, #32
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	08003251 	.word	0x08003251
 8003570:	080032e9 	.word	0x080032e9
 8003574:	08003409 	.word	0x08003409
 8003578:	08003351 	.word	0x08003351
 800357c:	08003313 	.word	0x08003313
 8003580:	08003b25 	.word	0x08003b25
 8003584:	20000680 	.word	0x20000680
 8003588:	0800358d 	.word	0x0800358d

0800358c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8003590:	e005      	b.n	800359e <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8003592:	2000      	movs	r0, #0
 8003594:	f007 fe96 	bl	800b2c4 <hci_notify_asynch_evt>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d105      	bne.n	80035aa <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 800359e:	f7ff ffab 	bl	80034f8 <IsDataAvailable>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1f4      	bne.n	8003592 <hci_tl_lowlevel_isr+0x6>
 80035a8:	e000      	b.n	80035ac <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80035aa:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035b4:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <MX_I2C1_Init+0x74>)
 80035b6:	4a1c      	ldr	r2, [pc, #112]	; (8003628 <MX_I2C1_Init+0x78>)
 80035b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80035ba:	4b1a      	ldr	r3, [pc, #104]	; (8003624 <MX_I2C1_Init+0x74>)
 80035bc:	4a1b      	ldr	r2, [pc, #108]	; (800362c <MX_I2C1_Init+0x7c>)
 80035be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80035c0:	4b18      	ldr	r3, [pc, #96]	; (8003624 <MX_I2C1_Init+0x74>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035c6:	4b17      	ldr	r3, [pc, #92]	; (8003624 <MX_I2C1_Init+0x74>)
 80035c8:	2201      	movs	r2, #1
 80035ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035cc:	4b15      	ldr	r3, [pc, #84]	; (8003624 <MX_I2C1_Init+0x74>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80035d2:	4b14      	ldr	r3, [pc, #80]	; (8003624 <MX_I2C1_Init+0x74>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80035d8:	4b12      	ldr	r3, [pc, #72]	; (8003624 <MX_I2C1_Init+0x74>)
 80035da:	2200      	movs	r2, #0
 80035dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035de:	4b11      	ldr	r3, [pc, #68]	; (8003624 <MX_I2C1_Init+0x74>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035e4:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <MX_I2C1_Init+0x74>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80035ea:	480e      	ldr	r0, [pc, #56]	; (8003624 <MX_I2C1_Init+0x74>)
 80035ec:	f001 fdf2 	bl	80051d4 <HAL_I2C_Init>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80035f6:	f000 f8d9 	bl	80037ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80035fa:	2100      	movs	r1, #0
 80035fc:	4809      	ldr	r0, [pc, #36]	; (8003624 <MX_I2C1_Init+0x74>)
 80035fe:	f002 fb6b 	bl	8005cd8 <HAL_I2CEx_ConfigAnalogFilter>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003608:	f000 f8d0 	bl	80037ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800360c:	2100      	movs	r1, #0
 800360e:	4805      	ldr	r0, [pc, #20]	; (8003624 <MX_I2C1_Init+0x74>)
 8003610:	f002 fbad 	bl	8005d6e <HAL_I2CEx_ConfigDigitalFilter>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800361a:	f000 f8c7 	bl	80037ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	20000788 	.word	0x20000788
 8003628:	40005400 	.word	0x40005400
 800362c:	10707dbc 	.word	0x10707dbc

08003630 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b0ac      	sub	sp, #176	; 0xb0
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003638:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	609a      	str	r2, [r3, #8]
 8003644:	60da      	str	r2, [r3, #12]
 8003646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003648:	f107 0314 	add.w	r3, r7, #20
 800364c:	2288      	movs	r2, #136	; 0x88
 800364e:	2100      	movs	r1, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f008 fe95 	bl	800c380 <memset>
  if(i2cHandle->Instance==I2C1)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a21      	ldr	r2, [pc, #132]	; (80036e0 <HAL_I2C_MspInit+0xb0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d13b      	bne.n	80036d8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003660:	2340      	movs	r3, #64	; 0x40
 8003662:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003664:	2300      	movs	r3, #0
 8003666:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003668:	f107 0314 	add.w	r3, r7, #20
 800366c:	4618      	mov	r0, r3
 800366e:	f003 fa2f 	bl	8006ad0 <HAL_RCCEx_PeriphCLKConfig>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003678:	f000 f898 	bl	80037ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800367c:	4b19      	ldr	r3, [pc, #100]	; (80036e4 <HAL_I2C_MspInit+0xb4>)
 800367e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003680:	4a18      	ldr	r2, [pc, #96]	; (80036e4 <HAL_I2C_MspInit+0xb4>)
 8003682:	f043 0302 	orr.w	r3, r3, #2
 8003686:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003688:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <HAL_I2C_MspInit+0xb4>)
 800368a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003694:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003698:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800369c:	2312      	movs	r3, #18
 800369e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036a8:	2303      	movs	r3, #3
 80036aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80036ae:	2304      	movs	r3, #4
 80036b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036b8:	4619      	mov	r1, r3
 80036ba:	480b      	ldr	r0, [pc, #44]	; (80036e8 <HAL_I2C_MspInit+0xb8>)
 80036bc:	f001 faa2 	bl	8004c04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036c0:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <HAL_I2C_MspInit+0xb4>)
 80036c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c4:	4a07      	ldr	r2, [pc, #28]	; (80036e4 <HAL_I2C_MspInit+0xb4>)
 80036c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036ca:	6593      	str	r3, [r2, #88]	; 0x58
 80036cc:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <HAL_I2C_MspInit+0xb4>)
 80036ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80036d8:	bf00      	nop
 80036da:	37b0      	adds	r7, #176	; 0xb0
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40005400 	.word	0x40005400
 80036e4:	40021000 	.word	0x40021000
 80036e8:	48000400 	.word	0x48000400

080036ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036f0:	f001 f846 	bl	8004780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036f4:	f000 f809 	bl	800370a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036f8:	f7ff fd26 	bl	8003148 <MX_GPIO_Init>
  MX_I2C1_Init();
 80036fc:	f7ff ff58 	bl	80035b0 <MX_I2C1_Init>
  MX_BlueNRG_2_Init();
 8003700:	f7fd fc86 	bl	8001010 <MX_BlueNRG_2_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_2_Process();
 8003704:	f7fd fd32 	bl	800116c <MX_BlueNRG_2_Process>
 8003708:	e7fc      	b.n	8003704 <main+0x18>

0800370a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b096      	sub	sp, #88	; 0x58
 800370e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003710:	f107 0314 	add.w	r3, r7, #20
 8003714:	2244      	movs	r2, #68	; 0x44
 8003716:	2100      	movs	r1, #0
 8003718:	4618      	mov	r0, r3
 800371a:	f008 fe31 	bl	800c380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800371e:	463b      	mov	r3, r7
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	60da      	str	r2, [r3, #12]
 800372a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800372c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003730:	f002 fb78 	bl	8005e24 <HAL_PWREx_ControlVoltageScaling>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800373a:	f000 f837 	bl	80037ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800373e:	2302      	movs	r3, #2
 8003740:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003746:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003748:	2310      	movs	r3, #16
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800374c:	2302      	movs	r3, #2
 800374e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003750:	2302      	movs	r3, #2
 8003752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003754:	2301      	movs	r3, #1
 8003756:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003758:	2308      	movs	r3, #8
 800375a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800375c:	2307      	movs	r3, #7
 800375e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003760:	2302      	movs	r3, #2
 8003762:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003764:	2302      	movs	r3, #2
 8003766:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003768:	f107 0314 	add.w	r3, r7, #20
 800376c:	4618      	mov	r0, r3
 800376e:	f002 fbaf 	bl	8005ed0 <HAL_RCC_OscConfig>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <SystemClock_Config+0x72>
  {
    Error_Handler();
 8003778:	f000 f818 	bl	80037ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800377c:	230f      	movs	r3, #15
 800377e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003780:	2303      	movs	r3, #3
 8003782:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003784:	2300      	movs	r3, #0
 8003786:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800378c:	2300      	movs	r3, #0
 800378e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003790:	463b      	mov	r3, r7
 8003792:	2103      	movs	r1, #3
 8003794:	4618      	mov	r0, r3
 8003796:	f002 ff77 	bl	8006688 <HAL_RCC_ClockConfig>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80037a0:	f000 f804 	bl	80037ac <Error_Handler>
  }
}
 80037a4:	bf00      	nop
 80037a6:	3758      	adds	r7, #88	; 0x58
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037b0:	b672      	cpsid	i
}
 80037b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037b4:	e7fe      	b.n	80037b4 <Error_Handler+0x8>
	...

080037b8 <Set_DeviceConnectable>:
 * @note   Puts the device in connectable mode
 * @param  None
 * @retval None
 */
void Set_DeviceConnectable(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b092      	sub	sp, #72	; 0x48
 80037bc:	af08      	add	r7, sp, #32
  uint8_t ret;
  uint8_t local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 80037be:	4a3f      	ldr	r2, [pc, #252]	; (80038bc <Set_DeviceConnectable+0x104>)
 80037c0:	f107 031c 	add.w	r3, r7, #28
 80037c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037c8:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 80037cc:	2302      	movs	r3, #2
 80037ce:	703b      	strb	r3, [r7, #0]
 80037d0:	230a      	movs	r3, #10
 80037d2:	707b      	strb	r3, [r7, #1]
 80037d4:	2300      	movs	r3, #0
 80037d6:	70bb      	strb	r3, [r7, #2]
 80037d8:	2308      	movs	r3, #8
 80037da:	70fb      	strb	r3, [r7, #3]
 80037dc:	2309      	movs	r3, #9
 80037de:	713b      	strb	r3, [r7, #4]
 80037e0:	2342      	movs	r3, #66	; 0x42
 80037e2:	717b      	strb	r3, [r7, #5]
 80037e4:	236c      	movs	r3, #108	; 0x6c
 80037e6:	71bb      	strb	r3, [r7, #6]
 80037e8:	2375      	movs	r3, #117	; 0x75
 80037ea:	71fb      	strb	r3, [r7, #7]
 80037ec:	236d      	movs	r3, #109	; 0x6d
 80037ee:	723b      	strb	r3, [r7, #8]
 80037f0:	234e      	movs	r3, #78	; 0x4e
 80037f2:	727b      	strb	r3, [r7, #9]
 80037f4:	2352      	movs	r3, #82	; 0x52
 80037f6:	72bb      	strb	r3, [r7, #10]
 80037f8:	2347      	movs	r3, #71	; 0x47
 80037fa:	72fb      	strb	r3, [r7, #11]
 80037fc:	230d      	movs	r3, #13
 80037fe:	733b      	strb	r3, [r7, #12]
 8003800:	23ff      	movs	r3, #255	; 0xff
 8003802:	737b      	strb	r3, [r7, #13]
 8003804:	2301      	movs	r3, #1
 8003806:	73bb      	strb	r3, [r7, #14]
 8003808:	2302      	movs	r3, #2
 800380a:	73fb      	strb	r3, [r7, #15]
 800380c:	2300      	movs	r3, #0
 800380e:	743b      	strb	r3, [r7, #16]
 8003810:	23f4      	movs	r3, #244	; 0xf4
 8003812:	747b      	strb	r3, [r7, #17]
 8003814:	2300      	movs	r3, #0
 8003816:	74bb      	strb	r3, [r7, #18]
 8003818:	2300      	movs	r3, #0
 800381a:	74fb      	strb	r3, [r7, #19]
    0x02,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 800381c:	4b28      	ldr	r3, [pc, #160]	; (80038c0 <Set_DeviceConnectable+0x108>)
 800381e:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 8003820:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 8003822:	4b27      	ldr	r3, [pc, #156]	; (80038c0 <Set_DeviceConnectable+0x108>)
 8003824:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 8003826:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 8003828:	4b25      	ldr	r3, [pc, #148]	; (80038c0 <Set_DeviceConnectable+0x108>)
 800382a:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 800382c:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 800382e:	4b24      	ldr	r3, [pc, #144]	; (80038c0 <Set_DeviceConnectable+0x108>)
 8003830:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 8003832:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 8003834:	4b22      	ldr	r3, [pc, #136]	; (80038c0 <Set_DeviceConnectable+0x108>)
 8003836:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 8003838:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 800383a:	4b21      	ldr	r3, [pc, #132]	; (80038c0 <Set_DeviceConnectable+0x108>)
 800383c:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 800383e:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 8003840:	7cbb      	ldrb	r3, [r7, #18]
 8003842:	f043 0301 	orr.w	r3, r3, #1
 8003846:	b2db      	uxtb	r3, r3
 8003848:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_response_data(0,NULL);
 800384a:	2100      	movs	r1, #0
 800384c:	2000      	movs	r0, #0
 800384e:	f007 fa80 	bl	800ad52 <hci_le_set_scan_response_data>

  PRINT_DBG("Set General Discoverable Mode.\r\n");
 8003852:	481c      	ldr	r0, [pc, #112]	; (80038c4 <Set_DeviceConnectable+0x10c>)
 8003854:	f008 fc94 	bl	800c180 <puts>

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8003858:	2300      	movs	r3, #0
 800385a:	9306      	str	r3, [sp, #24]
 800385c:	2300      	movs	r3, #0
 800385e:	9305      	str	r3, [sp, #20]
 8003860:	2300      	movs	r3, #0
 8003862:	9304      	str	r3, [sp, #16]
 8003864:	2300      	movs	r3, #0
 8003866:	9303      	str	r3, [sp, #12]
 8003868:	f107 031c 	add.w	r3, r7, #28
 800386c:	9302      	str	r3, [sp, #8]
 800386e:	2308      	movs	r3, #8
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	2300      	movs	r3, #0
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	2301      	movs	r3, #1
 8003878:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800387c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003880:	2000      	movs	r0, #0
 8003882:	f004 ffd2 	bl	800882a <aci_gap_set_discoverable>
 8003886:	4603      	mov	r3, r0
 8003888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                 ADV_INTERV_MIN, ADV_INTERV_MAX,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 800388c:	463b      	mov	r3, r7
 800388e:	4619      	mov	r1, r3
 8003890:	201a      	movs	r0, #26
 8003892:	f005 fa47 	bl	8008d24 <aci_gap_update_adv_data>

  if(ret != BLE_STATUS_SUCCESS)
 8003896:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800389a:	2b00      	cmp	r3, #0
 800389c:	d006      	beq.n	80038ac <Set_DeviceConnectable+0xf4>
  {
    PRINT_DBG("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
 800389e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038a2:	4619      	mov	r1, r3
 80038a4:	4808      	ldr	r0, [pc, #32]	; (80038c8 <Set_DeviceConnectable+0x110>)
 80038a6:	f008 fc05 	bl	800c0b4 <iprintf>
  }
  else
    PRINT_DBG("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 80038aa:	e002      	b.n	80038b2 <Set_DeviceConnectable+0xfa>
    PRINT_DBG("aci_gap_set_discoverable() --> SUCCESS\r\n");
 80038ac:	4807      	ldr	r0, [pc, #28]	; (80038cc <Set_DeviceConnectable+0x114>)
 80038ae:	f008 fc67 	bl	800c180 <puts>
}
 80038b2:	bf00      	nop
 80038b4:	3728      	adds	r7, #40	; 0x28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	0800e934 	.word	0x0800e934
 80038c0:	20000208 	.word	0x20000208
 80038c4:	0800e8c0 	.word	0x0800e8c0
 80038c8:	0800e8e0 	.word	0x0800e8e0
 80038cc:	0800e90c 	.word	0x0800e90c

080038d0 <APP_UserEvtRx>:
 *         parsed
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void APP_UserEvtRx(void *pData)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type == HCI_EVENT_PKT)
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d163      	bne.n	80039ac <APP_UserEvtRx+0xdc>
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	3301      	adds	r3, #1
 80038e8:	617b      	str	r3, [r7, #20]

    if(event_pckt->evt == EVT_LE_META_EVENT)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b3e      	cmp	r3, #62	; 0x3e
 80038f0:	d11e      	bne.n	8003930 <APP_UserEvtRx+0x60>
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	3302      	adds	r3, #2
 80038f6:	60fb      	str	r3, [r7, #12]

      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 80038f8:	2300      	movs	r3, #0
 80038fa:	61fb      	str	r3, [r7, #28]
 80038fc:	e014      	b.n	8003928 <APP_UserEvtRx+0x58>
      {
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	b29a      	uxth	r2, r3
 8003904:	492b      	ldr	r1, [pc, #172]	; (80039b4 <APP_UserEvtRx+0xe4>)
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 800390c:	429a      	cmp	r2, r3
 800390e:	d108      	bne.n	8003922 <APP_UserEvtRx+0x52>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
 8003910:	4a28      	ldr	r2, [pc, #160]	; (80039b4 <APP_UserEvtRx+0xe4>)
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	4413      	add	r3, r2
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	3201      	adds	r2, #1
 800391e:	4610      	mov	r0, r2
 8003920:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	3301      	adds	r3, #1
 8003926:	61fb      	str	r3, [r7, #28]
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	2b09      	cmp	r3, #9
 800392c:	d9e7      	bls.n	80038fe <APP_UserEvtRx+0x2e>
          hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 800392e:	e03d      	b.n	80039ac <APP_UserEvtRx+0xdc>
    else if(event_pckt->evt == EVT_VENDOR)
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2bff      	cmp	r3, #255	; 0xff
 8003936:	d11e      	bne.n	8003976 <APP_UserEvtRx+0xa6>
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	3302      	adds	r3, #2
 800393c:	613b      	str	r3, [r7, #16]
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 800393e:	2300      	movs	r3, #0
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	e014      	b.n	800396e <APP_UserEvtRx+0x9e>
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	b29a      	uxth	r2, r3
 800394a:	491b      	ldr	r1, [pc, #108]	; (80039b8 <APP_UserEvtRx+0xe8>)
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8003952:	429a      	cmp	r2, r3
 8003954:	d108      	bne.n	8003968 <APP_UserEvtRx+0x98>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 8003956:	4a18      	ldr	r2, [pc, #96]	; (80039b8 <APP_UserEvtRx+0xe8>)
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	4413      	add	r3, r2
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	3202      	adds	r2, #2
 8003964:	4610      	mov	r0, r2
 8003966:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	3301      	adds	r3, #1
 800396c:	61fb      	str	r3, [r7, #28]
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	2b2a      	cmp	r3, #42	; 0x2a
 8003972:	d9e7      	bls.n	8003944 <APP_UserEvtRx+0x74>
}
 8003974:	e01a      	b.n	80039ac <APP_UserEvtRx+0xdc>
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]
 800397a:	e014      	b.n	80039a6 <APP_UserEvtRx+0xd6>
        if (event_pckt->evt == hci_events_table[i].evt_code)
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	b29a      	uxth	r2, r3
 8003982:	490e      	ldr	r1, [pc, #56]	; (80039bc <APP_UserEvtRx+0xec>)
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 800398a:	429a      	cmp	r2, r3
 800398c:	d108      	bne.n	80039a0 <APP_UserEvtRx+0xd0>
          hci_events_table[i].process((void *)event_pckt->data);
 800398e:	4a0b      	ldr	r2, [pc, #44]	; (80039bc <APP_UserEvtRx+0xec>)
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	4413      	add	r3, r2
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	3202      	adds	r2, #2
 800399c:	4610      	mov	r0, r2
 800399e:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	3301      	adds	r3, #1
 80039a4:	61fb      	str	r3, [r7, #28]
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	2b06      	cmp	r3, #6
 80039aa:	d9e7      	bls.n	800397c <APP_UserEvtRx+0xac>
}
 80039ac:	bf00      	nop
 80039ae:	3720      	adds	r7, #32
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	0800e9d0 	.word	0x0800e9d0
 80039b8:	0800ea20 	.word	0x0800ea20
 80039bc:	0800e998 	.word	0x0800e998

080039c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039c6:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <HAL_MspInit+0x44>)
 80039c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ca:	4a0e      	ldr	r2, [pc, #56]	; (8003a04 <HAL_MspInit+0x44>)
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	6613      	str	r3, [r2, #96]	; 0x60
 80039d2:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <HAL_MspInit+0x44>)
 80039d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	607b      	str	r3, [r7, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039de:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <HAL_MspInit+0x44>)
 80039e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e2:	4a08      	ldr	r2, [pc, #32]	; (8003a04 <HAL_MspInit+0x44>)
 80039e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e8:	6593      	str	r3, [r2, #88]	; 0x58
 80039ea:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <HAL_MspInit+0x44>)
 80039ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40021000 	.word	0x40021000

08003a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a0c:	e7fe      	b.n	8003a0c <NMI_Handler+0x4>

08003a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a12:	e7fe      	b.n	8003a12 <HardFault_Handler+0x4>

08003a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a18:	e7fe      	b.n	8003a18 <MemManage_Handler+0x4>

08003a1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a1e:	e7fe      	b.n	8003a1e <BusFault_Handler+0x4>

08003a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a24:	e7fe      	b.n	8003a24 <UsageFault_Handler+0x4>

08003a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a26:	b480      	push	{r7}
 8003a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a2a:	bf00      	nop
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a38:	bf00      	nop
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a42:	b480      	push	{r7}
 8003a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a54:	f000 fef0 	bl	8004838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a58:	bf00      	nop
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8003a60:	4802      	ldr	r0, [pc, #8]	; (8003a6c <EXTI0_IRQHandler+0x10>)
 8003a62:	f001 f89f 	bl	8004ba4 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003a66:	bf00      	nop
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000680 	.word	0x20000680

08003a70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8003a74:	4802      	ldr	r0, [pc, #8]	; (8003a80 <EXTI15_10_IRQHandler+0x10>)
 8003a76:	f001 f895 	bl	8004ba4 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a7a:	bf00      	nop
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	2000000c 	.word	0x2000000c

08003a84 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8003a8e:	4b12      	ldr	r3, [pc, #72]	; (8003ad8 <BSP_SPI1_Init+0x54>)
 8003a90:	4a12      	ldr	r2, [pc, #72]	; (8003adc <BSP_SPI1_Init+0x58>)
 8003a92:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8003a94:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <BSP_SPI1_Init+0x5c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	4911      	ldr	r1, [pc, #68]	; (8003ae0 <BSP_SPI1_Init+0x5c>)
 8003a9c:	600a      	str	r2, [r1, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d114      	bne.n	8003acc <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8003aa2:	480d      	ldr	r0, [pc, #52]	; (8003ad8 <BSP_SPI1_Init+0x54>)
 8003aa4:	f003 ff9f 	bl	80079e6 <HAL_SPI_GetState>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10e      	bne.n	8003acc <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8003aae:	480a      	ldr	r0, [pc, #40]	; (8003ad8 <BSP_SPI1_Init+0x54>)
 8003ab0:	f000 f882 	bl	8003bb8 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d108      	bne.n	8003acc <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8003aba:	4807      	ldr	r0, [pc, #28]	; (8003ad8 <BSP_SPI1_Init+0x54>)
 8003abc:	f000 f83a 	bl	8003b34 <MX_SPI1_Init>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8003ac6:	f06f 0307 	mvn.w	r3, #7
 8003aca:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8003acc:	687b      	ldr	r3, [r7, #4]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20000814 	.word	0x20000814
 8003adc:	40013000 	.word	0x40013000
 8003ae0:	20000878 	.word	0x20000878

08003ae4 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	af02      	add	r7, sp, #8
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	4613      	mov	r3, r2
 8003af0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8003af6:	88fb      	ldrh	r3, [r7, #6]
 8003af8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003afc:	9200      	str	r2, [sp, #0]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	68f9      	ldr	r1, [r7, #12]
 8003b02:	4807      	ldr	r0, [pc, #28]	; (8003b20 <BSP_SPI1_SendRecv+0x3c>)
 8003b04:	f003 fd4d 	bl	80075a2 <HAL_SPI_TransmitReceive>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8003b0e:	f06f 0305 	mvn.w	r3, #5
 8003b12:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8003b14:	697b      	ldr	r3, [r7, #20]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20000814 	.word	0x20000814

08003b24 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003b28:	f000 fe9a 	bl	8004860 <HAL_GetTick>
 8003b2c:	4603      	mov	r3, r0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a1c      	ldr	r2, [pc, #112]	; (8003bb4 <MX_SPI1_Init+0x80>)
 8003b44:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b4c:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b5a:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b6e:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2228      	movs	r2, #40	; 0x28
 8003b74:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2207      	movs	r2, #7
 8003b8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f003 fc54 	bl	8007448 <HAL_SPI_Init>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40013000 	.word	0x40013000

08003bb8 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08a      	sub	sp, #40	; 0x28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003bc0:	4b2c      	ldr	r3, [pc, #176]	; (8003c74 <SPI1_MspInit+0xbc>)
 8003bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc4:	4a2b      	ldr	r2, [pc, #172]	; (8003c74 <SPI1_MspInit+0xbc>)
 8003bc6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bca:	6613      	str	r3, [r2, #96]	; 0x60
 8003bcc:	4b29      	ldr	r3, [pc, #164]	; (8003c74 <SPI1_MspInit+0xbc>)
 8003bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bd8:	4b26      	ldr	r3, [pc, #152]	; (8003c74 <SPI1_MspInit+0xbc>)
 8003bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bdc:	4a25      	ldr	r2, [pc, #148]	; (8003c74 <SPI1_MspInit+0xbc>)
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003be4:	4b23      	ldr	r3, [pc, #140]	; (8003c74 <SPI1_MspInit+0xbc>)
 8003be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bf0:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <SPI1_MspInit+0xbc>)
 8003bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf4:	4a1f      	ldr	r2, [pc, #124]	; (8003c74 <SPI1_MspInit+0xbc>)
 8003bf6:	f043 0302 	orr.w	r3, r3, #2
 8003bfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bfc:	4b1d      	ldr	r3, [pc, #116]	; (8003c74 <SPI1_MspInit+0xbc>)
 8003bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8003c08:	2340      	movs	r3, #64	; 0x40
 8003c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c14:	2303      	movs	r3, #3
 8003c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8003c18:	2305      	movs	r3, #5
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003c1c:	f107 0314 	add.w	r3, r7, #20
 8003c20:	4619      	mov	r1, r3
 8003c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c26:	f000 ffed 	bl	8004c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8003c2a:	2380      	movs	r3, #128	; 0x80
 8003c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c2e:	2302      	movs	r3, #2
 8003c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c36:	2303      	movs	r3, #3
 8003c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8003c3a:	2305      	movs	r3, #5
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003c3e:	f107 0314 	add.w	r3, r7, #20
 8003c42:	4619      	mov	r1, r3
 8003c44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c48:	f000 ffdc 	bl	8004c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8003c4c:	2308      	movs	r3, #8
 8003c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c50:	2302      	movs	r3, #2
 8003c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c54:	2300      	movs	r3, #0
 8003c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8003c5c:	2305      	movs	r3, #5
 8003c5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003c60:	f107 0314 	add.w	r3, r7, #20
 8003c64:	4619      	mov	r1, r3
 8003c66:	4804      	ldr	r0, [pc, #16]	; (8003c78 <SPI1_MspInit+0xc0>)
 8003c68:	f000 ffcc 	bl	8004c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8003c6c:	bf00      	nop
 8003c6e:	3728      	adds	r7, #40	; 0x28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40021000 	.word	0x40021000
 8003c78:	48000400 	.word	0x48000400

08003c7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  return 1;
 8003c80:	2301      	movs	r3, #1
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <_kill>:

int _kill(int pid, int sig)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c96:	f008 fbc5 	bl	800c424 <__errno>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2216      	movs	r2, #22
 8003c9e:	601a      	str	r2, [r3, #0]
  return -1;
 8003ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <_exit>:

void _exit (int status)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7ff ffe7 	bl	8003c8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003cbe:	e7fe      	b.n	8003cbe <_exit+0x12>

08003cc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ccc:	2300      	movs	r3, #0
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	e00a      	b.n	8003ce8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003cd2:	f3af 8000 	nop.w
 8003cd6:	4601      	mov	r1, r0
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	60ba      	str	r2, [r7, #8]
 8003cde:	b2ca      	uxtb	r2, r1
 8003ce0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	dbf0      	blt.n	8003cd2 <_read+0x12>
  }

  return len;
 8003cf0:	687b      	ldr	r3, [r7, #4]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b086      	sub	sp, #24
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	60f8      	str	r0, [r7, #12]
 8003d02:	60b9      	str	r1, [r7, #8]
 8003d04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	e009      	b.n	8003d20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	60ba      	str	r2, [r7, #8]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 f9c3 	bl	80040a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	dbf1      	blt.n	8003d0c <_write+0x12>
  }
  return len;
 8003d28:	687b      	ldr	r3, [r7, #4]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <_close>:

int _close(int file)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d5a:	605a      	str	r2, [r3, #4]
  return 0;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <_isatty>:

int _isatty(int file)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d72:	2301      	movs	r3, #1
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
	...

08003d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003da4:	4a14      	ldr	r2, [pc, #80]	; (8003df8 <_sbrk+0x5c>)
 8003da6:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <_sbrk+0x60>)
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003db0:	4b13      	ldr	r3, [pc, #76]	; (8003e00 <_sbrk+0x64>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003db8:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <_sbrk+0x64>)
 8003dba:	4a12      	ldr	r2, [pc, #72]	; (8003e04 <_sbrk+0x68>)
 8003dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dbe:	4b10      	ldr	r3, [pc, #64]	; (8003e00 <_sbrk+0x64>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d207      	bcs.n	8003ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003dcc:	f008 fb2a 	bl	800c424 <__errno>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	220c      	movs	r2, #12
 8003dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dda:	e009      	b.n	8003df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ddc:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <_sbrk+0x64>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003de2:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <_sbrk+0x64>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4413      	add	r3, r2
 8003dea:	4a05      	ldr	r2, [pc, #20]	; (8003e00 <_sbrk+0x64>)
 8003dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dee:	68fb      	ldr	r3, [r7, #12]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	20018000 	.word	0x20018000
 8003dfc:	00000800 	.word	0x00000800
 8003e00:	2000087c 	.word	0x2000087c
 8003e04:	20001008 	.word	0x20001008

08003e08 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	4a04      	ldr	r2, [pc, #16]	; (8003e28 <BSP_LED_Init+0x20>)
 8003e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e1a:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	0800e93c 	.word	0x0800e93c

08003e2c <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4603      	mov	r3, r0
 8003e34:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8003e36:	79fb      	ldrb	r3, [r7, #7]
 8003e38:	4a06      	ldr	r2, [pc, #24]	; (8003e54 <BSP_LED_On+0x28>)
 8003e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3e:	2120      	movs	r1, #32
 8003e40:	2201      	movs	r2, #1
 8003e42:	4618      	mov	r0, r3
 8003e44:	f001 f994 	bl	8005170 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20000004 	.word	0x20000004

08003e58 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	4a06      	ldr	r2, [pc, #24]	; (8003e80 <BSP_LED_Off+0x28>)
 8003e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6a:	2120      	movs	r1, #32
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f001 f97e 	bl	8005170 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	20000004 	.word	0x20000004

08003e84 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8003e8e:	79fb      	ldrb	r3, [r7, #7]
 8003e90:	4a06      	ldr	r2, [pc, #24]	; (8003eac <BSP_LED_Toggle+0x28>)
 8003e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e96:	2220      	movs	r2, #32
 8003e98:	4611      	mov	r1, r2
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f001 f980 	bl	80051a0 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	20000004 	.word	0x20000004

08003eb0 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
}
 8003eb4:	bf00      	nop
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
	...

08003ec0 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	460a      	mov	r2, r1
 8003eca:	71fb      	strb	r3, [r7, #7]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	4a1f      	ldr	r2, [pc, #124]	; (8003f54 <BSP_PB_Init+0x94>)
 8003ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003edc:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8003ede:	79bb      	ldrb	r3, [r7, #6]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d132      	bne.n	8003f4a <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8003ee4:	79fb      	ldrb	r3, [r7, #7]
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4a1b      	ldr	r2, [pc, #108]	; (8003f58 <BSP_PB_Init+0x98>)
 8003eea:	441a      	add	r2, r3
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	491b      	ldr	r1, [pc, #108]	; (8003f5c <BSP_PB_Init+0x9c>)
 8003ef0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	f000 fe3f 	bl	8004b7a <HAL_EXTI_GetHandle>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003f02:	f06f 0303 	mvn.w	r3, #3
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	e01f      	b.n	8003f4a <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	4a12      	ldr	r2, [pc, #72]	; (8003f58 <BSP_PB_Init+0x98>)
 8003f10:	1898      	adds	r0, r3, r2
 8003f12:	79fb      	ldrb	r3, [r7, #7]
 8003f14:	4a12      	ldr	r2, [pc, #72]	; (8003f60 <BSP_PB_Init+0xa0>)
 8003f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	f000 fe12 	bl	8004b46 <HAL_EXTI_RegisterCallback>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003f28:	f06f 0303 	mvn.w	r3, #3
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	e00c      	b.n	8003f4a <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003f30:	2028      	movs	r0, #40	; 0x28
 8003f32:	79fb      	ldrb	r3, [r7, #7]
 8003f34:	4a0b      	ldr	r2, [pc, #44]	; (8003f64 <BSP_PB_Init+0xa4>)
 8003f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	f000 fdbe 	bl	8004abe <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003f42:	2328      	movs	r3, #40	; 0x28
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fdd6 	bl	8004af6 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	0800e940 	.word	0x0800e940
 8003f58:	2000000c 	.word	0x2000000c
 8003f5c:	0800e944 	.word	0x0800e944
 8003f60:	0800e948 	.word	0x0800e948
 8003f64:	0800e94c 	.word	0x0800e94c

08003f68 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8003f72:	79fb      	ldrb	r3, [r7, #7]
 8003f74:	4a09      	ldr	r2, [pc, #36]	; (8003f9c <BSP_PB_GetState+0x34>)
 8003f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f7e:	4611      	mov	r1, r2
 8003f80:	4618      	mov	r0, r3
 8003f82:	f001 f8dd 	bl	8005140 <HAL_GPIO_ReadPin>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	bf0c      	ite	eq
 8003f8c:	2301      	moveq	r3, #1
 8003f8e:	2300      	movne	r3, #0
 8003f90:	b2db      	uxtb	r3, r3
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20000008 	.word	0x20000008

08003fa0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	f7fe fcbb 	bl	8002920 <BSP_PB_Callback>
}
 8003faa:	bf00      	nop
 8003fac:	bd80      	pop	{r7, pc}

08003fae <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8003fae:	b480      	push	{r7}
 8003fb0:	af00      	add	r7, sp, #0
}
 8003fb2:	bf00      	nop
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8003fca:	79fb      	ldrb	r3, [r7, #7]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d903      	bls.n	8003fd8 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003fd0:	f06f 0301 	mvn.w	r3, #1
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	e025      	b.n	8004024 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8003fd8:	79fb      	ldrb	r3, [r7, #7]
 8003fda:	79fa      	ldrb	r2, [r7, #7]
 8003fdc:	4914      	ldr	r1, [pc, #80]	; (8004030 <BSP_COM_Init+0x74>)
 8003fde:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003fe2:	4814      	ldr	r0, [pc, #80]	; (8004034 <BSP_COM_Init+0x78>)
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	4413      	add	r3, r2
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	4403      	add	r3, r0
 8003fee:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8003ff0:	79fa      	ldrb	r2, [r7, #7]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	4413      	add	r3, r2
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	4a0e      	ldr	r2, [pc, #56]	; (8004034 <BSP_COM_Init+0x78>)
 8003ffc:	4413      	add	r3, r2
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 f86a 	bl	80040d8 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8004004:	79fa      	ldrb	r2, [r7, #7]
 8004006:	4613      	mov	r3, r2
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	4413      	add	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	4a09      	ldr	r2, [pc, #36]	; (8004034 <BSP_COM_Init+0x78>)
 8004010:	4413      	add	r3, r2
 8004012:	4618      	mov	r0, r3
 8004014:	f000 f810 	bl	8004038 <MX_USART2_UART_Init>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d002      	beq.n	8004024 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800401e:	f06f 0303 	mvn.w	r3, #3
 8004022:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004024:	68fb      	ldr	r3, [r7, #12]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	20000014 	.word	0x20000014
 8004034:	20000880 	.word	0x20000880

08004038 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a15      	ldr	r2, [pc, #84]	; (800409c <MX_USART2_UART_Init+0x64>)
 8004048:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004050:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	220c      	movs	r2, #12
 8004068:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f003 fe22 	bl	8007ccc <HAL_UART_Init>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004092:	7bfb      	ldrb	r3, [r7, #15]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40004400 	.word	0x40004400

080040a0 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80040a8:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <__io_putchar+0x30>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	461a      	mov	r2, r3
 80040ae:	4613      	mov	r3, r2
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	4413      	add	r3, r2
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	4a07      	ldr	r2, [pc, #28]	; (80040d4 <__io_putchar+0x34>)
 80040b8:	1898      	adds	r0, r3, r2
 80040ba:	1d39      	adds	r1, r7, #4
 80040bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040c0:	2201      	movs	r2, #1
 80040c2:	f003 fe5b 	bl	8007d7c <HAL_UART_Transmit>
  return ch;
 80040c6:	687b      	ldr	r3, [r7, #4]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	20000908 	.word	0x20000908
 80040d4:	20000880 	.word	0x20000880

080040d8 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b0ac      	sub	sp, #176	; 0xb0
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040e0:	f107 0314 	add.w	r3, r7, #20
 80040e4:	2288      	movs	r2, #136	; 0x88
 80040e6:	2100      	movs	r1, #0
 80040e8:	4618      	mov	r0, r3
 80040ea:	f008 f949 	bl	800c380 <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80040ee:	2302      	movs	r3, #2
 80040f0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80040f2:	2300      	movs	r3, #0
 80040f4:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80040f6:	f107 0314 	add.w	r3, r7, #20
 80040fa:	4618      	mov	r0, r3
 80040fc:	f002 fce8 	bl	8006ad0 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004100:	4b23      	ldr	r3, [pc, #140]	; (8004190 <USART2_MspInit+0xb8>)
 8004102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004104:	4a22      	ldr	r2, [pc, #136]	; (8004190 <USART2_MspInit+0xb8>)
 8004106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800410a:	6593      	str	r3, [r2, #88]	; 0x58
 800410c:	4b20      	ldr	r3, [pc, #128]	; (8004190 <USART2_MspInit+0xb8>)
 800410e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004118:	4b1d      	ldr	r3, [pc, #116]	; (8004190 <USART2_MspInit+0xb8>)
 800411a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800411c:	4a1c      	ldr	r2, [pc, #112]	; (8004190 <USART2_MspInit+0xb8>)
 800411e:	f043 0301 	orr.w	r3, r3, #1
 8004122:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004124:	4b1a      	ldr	r3, [pc, #104]	; (8004190 <USART2_MspInit+0xb8>)
 8004126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8004130:	2304      	movs	r3, #4
 8004132:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004136:	2302      	movs	r3, #2
 8004138:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413c:	2300      	movs	r3, #0
 800413e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004142:	2300      	movs	r3, #0
 8004144:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8004148:	2307      	movs	r3, #7
 800414a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800414e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004152:	4619      	mov	r1, r3
 8004154:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004158:	f000 fd54 	bl	8004c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800415c:	2308      	movs	r3, #8
 800415e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004162:	2302      	movs	r3, #2
 8004164:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004168:	2300      	movs	r3, #0
 800416a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800416e:	2300      	movs	r3, #0
 8004170:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8004174:	2307      	movs	r3, #7
 8004176:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800417a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800417e:	4619      	mov	r1, r3
 8004180:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004184:	f000 fd3e 	bl	8004c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8004188:	bf00      	nop
 800418a:	37b0      	adds	r7, #176	; 0xb0
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40021000 	.word	0x40021000

08004194 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004198:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <SystemInit+0x20>)
 800419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419e:	4a05      	ldr	r2, [pc, #20]	; (80041b4 <SystemInit+0x20>)
 80041a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80041a8:	bf00      	nop
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	e000ed00 	.word	0xe000ed00

080041b8 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 80041b8:	b590      	push	{r4, r7, lr}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	607a      	str	r2, [r7, #4]
 80041c2:	461a      	mov	r2, r3
 80041c4:	460b      	mov	r3, r1
 80041c6:	72fb      	strb	r3, [r7, #11]
 80041c8:	4613      	mov	r3, r2
 80041ca:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	685c      	ldr	r4, [r3, #4]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	68d8      	ldr	r0, [r3, #12]
 80041d4:	893b      	ldrh	r3, [r7, #8]
 80041d6:	7af9      	ldrb	r1, [r7, #11]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	47a0      	blx	r4
 80041dc:	6178      	str	r0, [r7, #20]

  return ret;
 80041de:	697b      	ldr	r3, [r7, #20]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	371c      	adds	r7, #28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd90      	pop	{r4, r7, pc}

080041e8 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80041f2:	f107 0208 	add.w	r2, r7, #8
 80041f6:	2302      	movs	r3, #2
 80041f8:	2128      	movs	r1, #40	; 0x28
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff ffdc 	bl	80041b8 <hts221_read_reg>
 8004200:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8004202:	7a7b      	ldrb	r3, [r7, #9]
 8004204:	b21a      	sxth	r2, r3
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004210:	b29b      	uxth	r3, r3
 8004212:	021b      	lsls	r3, r3, #8
 8004214:	b29a      	uxth	r2, r3
 8004216:	7a3b      	ldrb	r3, [r7, #8]
 8004218:	b29b      	uxth	r3, r3
 800421a:	4413      	add	r3, r2
 800421c:	b29b      	uxth	r3, r3
 800421e:	b21a      	sxth	r2, r3
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	801a      	strh	r2, [r3, #0]

  return ret;
 8004224:	68fb      	ldr	r3, [r7, #12]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b084      	sub	sp, #16
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8004238:	f107 0208 	add.w	r2, r7, #8
 800423c:	2302      	movs	r3, #2
 800423e:	212a      	movs	r1, #42	; 0x2a
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff ffb9 	bl	80041b8 <hts221_read_reg>
 8004246:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8004248:	7a7b      	ldrb	r3, [r7, #9]
 800424a:	b21a      	sxth	r2, r3
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004256:	b29b      	uxth	r3, r3
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	b29a      	uxth	r2, r3
 800425c:	7a3b      	ldrb	r3, [r7, #8]
 800425e:	b29b      	uxth	r3, r3
 8004260:	4413      	add	r3, r2
 8004262:	b29b      	uxth	r3, r3
 8004264:	b21a      	sxth	r2, r3
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	801a      	strh	r2, [r3, #0]

  return ret;
 800426a:	68fb      	ldr	r3, [r7, #12]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800427e:	2301      	movs	r3, #1
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	210f      	movs	r1, #15
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7ff ff97 	bl	80041b8 <hts221_read_reg>
 800428a:	60f8      	str	r0, [r7, #12]

  return ret;
 800428c:	68fb      	ldr	r3, [r7, #12]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <hts221_status_get>:
  * @param  val     Registers STATUS_REG
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_status_get(stmdev_ctx_t *ctx, hts221_status_reg_t *val)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b084      	sub	sp, #16
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_STATUS_REG, (uint8_t *) val, 1);
 80042a0:	2301      	movs	r3, #1
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	2127      	movs	r1, #39	; 0x27
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff ff86 	bl	80041b8 <hts221_read_reg>
 80042ac:	60f8      	str	r0, [r7, #12]

  return ret;
 80042ae:	68fb      	ldr	r3, [r7, #12]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80042c2:	f107 020b 	add.w	r2, r7, #11
 80042c6:	2301      	movs	r3, #1
 80042c8:	2130      	movs	r1, #48	; 0x30
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff ff74 	bl	80041b8 <hts221_read_reg>
 80042d0:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80042d2:	7afb      	ldrb	r3, [r7, #11]
 80042d4:	ee07 3a90 	vmov	s15, r3
 80042d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042dc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80042e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80042ea:	68fb      	ldr	r3, [r7, #12]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 80042fe:	f107 020b 	add.w	r2, r7, #11
 8004302:	2301      	movs	r3, #1
 8004304:	2131      	movs	r1, #49	; 0x31
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7ff ff56 	bl	80041b8 <hts221_read_reg>
 800430c:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 800430e:	7afb      	ldrb	r3, [r7, #11]
 8004310:	ee07 3a90 	vmov	s15, r3
 8004314:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004318:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800431c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004326:	68fb      	ldr	r3, [r7, #12]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h;
  uint8_t coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 800433a:	f107 020f 	add.w	r2, r7, #15
 800433e:	2301      	movs	r3, #1
 8004340:	2132      	movs	r1, #50	; 0x32
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff ff38 	bl	80041b8 <hts221_read_reg>
 8004348:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d11b      	bne.n	8004388 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8004350:	f107 0210 	add.w	r2, r7, #16
 8004354:	2301      	movs	r3, #1
 8004356:	2135      	movs	r1, #53	; 0x35
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff ff2d 	bl	80041b8 <hts221_read_reg>
 800435e:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8004360:	7c3b      	ldrb	r3, [r7, #16]
 8004362:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004366:	b2db      	uxtb	r3, r3
 8004368:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800436a:	7cfb      	ldrb	r3, [r7, #19]
 800436c:	021b      	lsls	r3, r3, #8
 800436e:	7bfa      	ldrb	r2, [r7, #15]
 8004370:	4413      	add	r3, r2
 8004372:	ee07 3a90 	vmov	s15, r3
 8004376:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800437a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800437e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8004388:	697b      	ldr	r3, [r7, #20]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b086      	sub	sp, #24
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h;
  uint8_t coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 800439c:	f107 020f 	add.w	r2, r7, #15
 80043a0:	2301      	movs	r3, #1
 80043a2:	2133      	movs	r1, #51	; 0x33
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7ff ff07 	bl	80041b8 <hts221_read_reg>
 80043aa:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d11b      	bne.n	80043ea <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80043b2:	f107 0210 	add.w	r2, r7, #16
 80043b6:	2301      	movs	r3, #1
 80043b8:	2135      	movs	r1, #53	; 0x35
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7ff fefc 	bl	80041b8 <hts221_read_reg>
 80043c0:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 80043c2:	7c3b      	ldrb	r3, [r7, #16]
 80043c4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80043cc:	7cfb      	ldrb	r3, [r7, #19]
 80043ce:	021b      	lsls	r3, r3, #8
 80043d0:	7bfa      	ldrb	r2, [r7, #15]
 80043d2:	4413      	add	r3, r2
 80043d4:	ee07 3a90 	vmov	s15, r3
 80043d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043dc:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80043e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80043ea:	697b      	ldr	r3, [r7, #20]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 80043fe:	f107 0208 	add.w	r2, r7, #8
 8004402:	2302      	movs	r3, #2
 8004404:	2136      	movs	r1, #54	; 0x36
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7ff fed6 	bl	80041b8 <hts221_read_reg>
 800440c:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800440e:	7a7b      	ldrb	r3, [r7, #9]
 8004410:	b29b      	uxth	r3, r3
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	b29a      	uxth	r2, r3
 8004416:	7a3b      	ldrb	r3, [r7, #8]
 8004418:	b29b      	uxth	r3, r3
 800441a:	4413      	add	r3, r2
 800441c:	b29b      	uxth	r3, r3
 800441e:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004420:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004424:	ee07 3a90 	vmov	s15, r3
 8004428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004432:	68fb      	ldr	r3, [r7, #12]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8004446:	f107 0208 	add.w	r2, r7, #8
 800444a:	2302      	movs	r3, #2
 800444c:	213a      	movs	r1, #58	; 0x3a
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7ff feb2 	bl	80041b8 <hts221_read_reg>
 8004454:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8004456:	7a7b      	ldrb	r3, [r7, #9]
 8004458:	b29b      	uxth	r3, r3
 800445a:	021b      	lsls	r3, r3, #8
 800445c:	b29a      	uxth	r2, r3
 800445e:	7a3b      	ldrb	r3, [r7, #8]
 8004460:	b29b      	uxth	r3, r3
 8004462:	4413      	add	r3, r2
 8004464:	b29b      	uxth	r3, r3
 8004466:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004468:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800446c:	ee07 3a90 	vmov	s15, r3
 8004470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800447a:	68fb      	ldr	r3, [r7, #12]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 800448e:	f107 0208 	add.w	r2, r7, #8
 8004492:	2302      	movs	r3, #2
 8004494:	213c      	movs	r1, #60	; 0x3c
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff fe8e 	bl	80041b8 <hts221_read_reg>
 800449c:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800449e:	7a7b      	ldrb	r3, [r7, #9]
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	021b      	lsls	r3, r3, #8
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	7a3b      	ldrb	r3, [r7, #8]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	4413      	add	r3, r2
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80044b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80044b4:	ee07 3a90 	vmov	s15, r3
 80044b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80044c2:	68fb      	ldr	r3, [r7, #12]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 80044d6:	f107 0208 	add.w	r2, r7, #8
 80044da:	2302      	movs	r3, #2
 80044dc:	213e      	movs	r1, #62	; 0x3e
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff fe6a 	bl	80041b8 <hts221_read_reg>
 80044e4:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80044e6:	7a7b      	ldrb	r3, [r7, #9]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	021b      	lsls	r3, r3, #8
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	7a3b      	ldrb	r3, [r7, #8]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	4413      	add	r3, r2
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80044f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80044fc:	ee07 3a90 	vmov	s15, r3
 8004500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800450a:	68fb      	ldr	r3, [r7, #12]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004514:	b590      	push	{r4, r7, lr}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	607a      	str	r2, [r7, #4]
 800451e:	461a      	mov	r2, r3
 8004520:	460b      	mov	r3, r1
 8004522:	72fb      	strb	r3, [r7, #11]
 8004524:	4613      	mov	r3, r2
 8004526:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	685c      	ldr	r4, [r3, #4]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	68d8      	ldr	r0, [r3, #12]
 8004530:	893b      	ldrh	r3, [r7, #8]
 8004532:	7af9      	ldrb	r1, [r7, #11]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	47a0      	blx	r4
 8004538:	6178      	str	r0, [r7, #20]

  return ret;
 800453a:	697b      	ldr	r3, [r7, #20]
}
 800453c:	4618      	mov	r0, r3
 800453e:	371c      	adds	r7, #28
 8004540:	46bd      	mov	sp, r7
 8004542:	bd90      	pop	{r4, r7, pc}

08004544 <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004544:	b590      	push	{r4, r7, lr}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	607a      	str	r2, [r7, #4]
 800454e:	461a      	mov	r2, r3
 8004550:	460b      	mov	r3, r1
 8004552:	72fb      	strb	r3, [r7, #11]
 8004554:	4613      	mov	r3, r2
 8004556:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681c      	ldr	r4, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	68d8      	ldr	r0, [r3, #12]
 8004560:	893b      	ldrh	r3, [r7, #8]
 8004562:	7af9      	ldrb	r1, [r7, #11]
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	47a0      	blx	r4
 8004568:	6178      	str	r0, [r7, #20]

  return ret;
 800456a:	697b      	ldr	r3, [r7, #20]
}
 800456c:	4618      	mov	r0, r3
 800456e:	371c      	adds	r7, #28
 8004570:	46bd      	mov	sp, r7
 8004572:	bd90      	pop	{r4, r7, pc}

08004574 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004586:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80045a0 <lps22hh_from_lsb_to_hpa+0x2c>
 800458a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800458e:	eef0 7a66 	vmov.f32	s15, s13
}
 8004592:	eeb0 0a67 	vmov.f32	s0, s15
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	49800000 	.word	0x49800000

080045a4 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	460b      	mov	r3, r1
 80045ae:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80045b0:	f107 0208 	add.w	r2, r7, #8
 80045b4:	2301      	movs	r3, #1
 80045b6:	2110      	movs	r1, #16
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff ffab 	bl	8004514 <lps22hh_read_reg>
 80045be:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10f      	bne.n	80045e6 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80045c6:	78fb      	ldrb	r3, [r7, #3]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	7a3b      	ldrb	r3, [r7, #8]
 80045d0:	f362 0341 	bfi	r3, r2, #1, #1
 80045d4:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80045d6:	f107 0208 	add.w	r2, r7, #8
 80045da:	2301      	movs	r3, #1
 80045dc:	2110      	movs	r1, #16
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff ffb0 	bl	8004544 <lps22hh_write_reg>
 80045e4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80045e6:	68fb      	ldr	r3, [r7, #12]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	460b      	mov	r3, r1
 80045fa:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80045fc:	f107 0210 	add.w	r2, r7, #16
 8004600:	2301      	movs	r3, #1
 8004602:	2110      	movs	r1, #16
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff ff85 	bl	8004514 <lps22hh_read_reg>
 800460a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d107      	bne.n	8004622 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004612:	f107 020c 	add.w	r2, r7, #12
 8004616:	2301      	movs	r3, #1
 8004618:	2111      	movs	r1, #17
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7ff ff7a 	bl	8004514 <lps22hh_read_reg>
 8004620:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10f      	bne.n	8004648 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8004628:	78fb      	ldrb	r3, [r7, #3]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	b2da      	uxtb	r2, r3
 8004630:	7c3b      	ldrb	r3, [r7, #16]
 8004632:	f362 1306 	bfi	r3, r2, #4, #3
 8004636:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004638:	f107 0210 	add.w	r2, r7, #16
 800463c:	2301      	movs	r3, #1
 800463e:	2110      	movs	r1, #16
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff ff7f 	bl	8004544 <lps22hh_write_reg>
 8004646:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d119      	bne.n	8004682 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 800464e:	78fb      	ldrb	r3, [r7, #3]
 8004650:	091b      	lsrs	r3, r3, #4
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	b2da      	uxtb	r2, r3
 8004658:	7b3b      	ldrb	r3, [r7, #12]
 800465a:	f362 0341 	bfi	r3, r2, #1, #1
 800465e:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	08db      	lsrs	r3, r3, #3
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	b2da      	uxtb	r2, r3
 800466a:	7b3b      	ldrb	r3, [r7, #12]
 800466c:	f362 0300 	bfi	r3, r2, #0, #1
 8004670:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004672:	f107 020c 	add.w	r2, r7, #12
 8004676:	2301      	movs	r3, #1
 8004678:	2111      	movs	r1, #17
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7ff ff62 	bl	8004544 <lps22hh_write_reg>
 8004680:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004682:	697b      	ldr	r3, [r7, #20]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8004696:	f107 0208 	add.w	r2, r7, #8
 800469a:	2303      	movs	r3, #3
 800469c:	2128      	movs	r1, #40	; 0x28
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff ff38 	bl	8004514 <lps22hh_read_reg>
 80046a4:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80046a6:	7abb      	ldrb	r3, [r7, #10]
 80046a8:	461a      	mov	r2, r3
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[1];
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	021b      	lsls	r3, r3, #8
 80046b4:	7a7a      	ldrb	r2, [r7, #9]
 80046b6:	441a      	add	r2, r3
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[0];
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	021b      	lsls	r3, r3, #8
 80046c2:	7a3a      	ldrb	r2, [r7, #8]
 80046c4:	441a      	add	r2, r3
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	601a      	str	r2, [r3, #0]
  *buff *= 256U;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	021a      	lsls	r2, r3, #8
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	601a      	str	r2, [r3, #0]

  return ret;
 80046d4:	68fb      	ldr	r3, [r7, #12]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b084      	sub	sp, #16
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80046e8:	2301      	movs	r3, #1
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	210f      	movs	r1, #15
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7ff ff10 	bl	8004514 <lps22hh_read_reg>
 80046f4:	60f8      	str	r0, [r7, #12]

  return ret;
 80046f6:	68fb      	ldr	r3, [r7, #12]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	460b      	mov	r3, r1
 800470a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800470c:	f107 0208 	add.w	r2, r7, #8
 8004710:	2301      	movs	r3, #1
 8004712:	2111      	movs	r1, #17
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff fefd 	bl	8004514 <lps22hh_read_reg>
 800471a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10f      	bne.n	8004742 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8004722:	78fb      	ldrb	r3, [r7, #3]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	b2da      	uxtb	r2, r3
 800472a:	7a3b      	ldrb	r3, [r7, #8]
 800472c:	f362 0382 	bfi	r3, r2, #2, #1
 8004730:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004732:	f107 0208 	add.w	r2, r7, #8
 8004736:	2301      	movs	r3, #1
 8004738:	2111      	movs	r1, #17
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff ff02 	bl	8004544 <lps22hh_write_reg>
 8004740:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004742:	68fb      	ldr	r3, [r7, #12]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8004756:	f107 0208 	add.w	r2, r7, #8
 800475a:	2301      	movs	r3, #1
 800475c:	2111      	movs	r1, #17
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7ff fed8 	bl	8004514 <lps22hh_read_reg>
 8004764:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8004766:	7a3b      	ldrb	r3, [r7, #8]
 8004768:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800476c:	b2db      	uxtb	r3, r3
 800476e:	461a      	mov	r2, r3
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	701a      	strb	r2, [r3, #0]

  return ret;
 8004774:	68fb      	ldr	r3, [r7, #12]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800478a:	4b0c      	ldr	r3, [pc, #48]	; (80047bc <HAL_Init+0x3c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a0b      	ldr	r2, [pc, #44]	; (80047bc <HAL_Init+0x3c>)
 8004790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004794:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004796:	2003      	movs	r0, #3
 8004798:	f000 f986 	bl	8004aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800479c:	2000      	movs	r0, #0
 800479e:	f000 f80f 	bl	80047c0 <HAL_InitTick>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	71fb      	strb	r3, [r7, #7]
 80047ac:	e001      	b.n	80047b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80047ae:	f7ff f907 	bl	80039c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80047b2:	79fb      	ldrb	r3, [r7, #7]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40022000 	.word	0x40022000

080047c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80047cc:	4b17      	ldr	r3, [pc, #92]	; (800482c <HAL_InitTick+0x6c>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d023      	beq.n	800481c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80047d4:	4b16      	ldr	r3, [pc, #88]	; (8004830 <HAL_InitTick+0x70>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	4b14      	ldr	r3, [pc, #80]	; (800482c <HAL_InitTick+0x6c>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	4619      	mov	r1, r3
 80047de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80047e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 f99f 	bl	8004b2e <HAL_SYSTICK_Config>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10f      	bne.n	8004816 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b0f      	cmp	r3, #15
 80047fa:	d809      	bhi.n	8004810 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047fc:	2200      	movs	r2, #0
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	f04f 30ff 	mov.w	r0, #4294967295
 8004804:	f000 f95b 	bl	8004abe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004808:	4a0a      	ldr	r2, [pc, #40]	; (8004834 <HAL_InitTick+0x74>)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	e007      	b.n	8004820 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	73fb      	strb	r3, [r7, #15]
 8004814:	e004      	b.n	8004820 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	73fb      	strb	r3, [r7, #15]
 800481a:	e001      	b.n	8004820 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004820:	7bfb      	ldrb	r3, [r7, #15]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20000020 	.word	0x20000020
 8004830:	20000018 	.word	0x20000018
 8004834:	2000001c 	.word	0x2000001c

08004838 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800483c:	4b06      	ldr	r3, [pc, #24]	; (8004858 <HAL_IncTick+0x20>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	461a      	mov	r2, r3
 8004842:	4b06      	ldr	r3, [pc, #24]	; (800485c <HAL_IncTick+0x24>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4413      	add	r3, r2
 8004848:	4a04      	ldr	r2, [pc, #16]	; (800485c <HAL_IncTick+0x24>)
 800484a:	6013      	str	r3, [r2, #0]
}
 800484c:	bf00      	nop
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	20000020 	.word	0x20000020
 800485c:	2000090c 	.word	0x2000090c

08004860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  return uwTick;
 8004864:	4b03      	ldr	r3, [pc, #12]	; (8004874 <HAL_GetTick+0x14>)
 8004866:	681b      	ldr	r3, [r3, #0]
}
 8004868:	4618      	mov	r0, r3
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	2000090c 	.word	0x2000090c

08004878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004880:	f7ff ffee 	bl	8004860 <HAL_GetTick>
 8004884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004890:	d005      	beq.n	800489e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004892:	4b0a      	ldr	r3, [pc, #40]	; (80048bc <HAL_Delay+0x44>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	461a      	mov	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4413      	add	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800489e:	bf00      	nop
 80048a0:	f7ff ffde 	bl	8004860 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d8f7      	bhi.n	80048a0 <HAL_Delay+0x28>
  {
  }
}
 80048b0:	bf00      	nop
 80048b2:	bf00      	nop
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	20000020 	.word	0x20000020

080048c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048d0:	4b0c      	ldr	r3, [pc, #48]	; (8004904 <__NVIC_SetPriorityGrouping+0x44>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048dc:	4013      	ands	r3, r2
 80048de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048f2:	4a04      	ldr	r2, [pc, #16]	; (8004904 <__NVIC_SetPriorityGrouping+0x44>)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	60d3      	str	r3, [r2, #12]
}
 80048f8:	bf00      	nop
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	e000ed00 	.word	0xe000ed00

08004908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800490c:	4b04      	ldr	r3, [pc, #16]	; (8004920 <__NVIC_GetPriorityGrouping+0x18>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	0a1b      	lsrs	r3, r3, #8
 8004912:	f003 0307 	and.w	r3, r3, #7
}
 8004916:	4618      	mov	r0, r3
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	e000ed00 	.word	0xe000ed00

08004924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	4603      	mov	r3, r0
 800492c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800492e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004932:	2b00      	cmp	r3, #0
 8004934:	db0b      	blt.n	800494e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004936:	79fb      	ldrb	r3, [r7, #7]
 8004938:	f003 021f 	and.w	r2, r3, #31
 800493c:	4907      	ldr	r1, [pc, #28]	; (800495c <__NVIC_EnableIRQ+0x38>)
 800493e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	2001      	movs	r0, #1
 8004946:	fa00 f202 	lsl.w	r2, r0, r2
 800494a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	e000e100 	.word	0xe000e100

08004960 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	4603      	mov	r3, r0
 8004968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800496a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800496e:	2b00      	cmp	r3, #0
 8004970:	db12      	blt.n	8004998 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004972:	79fb      	ldrb	r3, [r7, #7]
 8004974:	f003 021f 	and.w	r2, r3, #31
 8004978:	490a      	ldr	r1, [pc, #40]	; (80049a4 <__NVIC_DisableIRQ+0x44>)
 800497a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	2001      	movs	r0, #1
 8004982:	fa00 f202 	lsl.w	r2, r0, r2
 8004986:	3320      	adds	r3, #32
 8004988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800498c:	f3bf 8f4f 	dsb	sy
}
 8004990:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004992:	f3bf 8f6f 	isb	sy
}
 8004996:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	e000e100 	.word	0xe000e100

080049a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	4603      	mov	r3, r0
 80049b0:	6039      	str	r1, [r7, #0]
 80049b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	db0a      	blt.n	80049d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	490c      	ldr	r1, [pc, #48]	; (80049f4 <__NVIC_SetPriority+0x4c>)
 80049c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c6:	0112      	lsls	r2, r2, #4
 80049c8:	b2d2      	uxtb	r2, r2
 80049ca:	440b      	add	r3, r1
 80049cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049d0:	e00a      	b.n	80049e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	4908      	ldr	r1, [pc, #32]	; (80049f8 <__NVIC_SetPriority+0x50>)
 80049d8:	79fb      	ldrb	r3, [r7, #7]
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	3b04      	subs	r3, #4
 80049e0:	0112      	lsls	r2, r2, #4
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	440b      	add	r3, r1
 80049e6:	761a      	strb	r2, [r3, #24]
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	e000e100 	.word	0xe000e100
 80049f8:	e000ed00 	.word	0xe000ed00

080049fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b089      	sub	sp, #36	; 0x24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f1c3 0307 	rsb	r3, r3, #7
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	bf28      	it	cs
 8004a1a:	2304      	movcs	r3, #4
 8004a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	3304      	adds	r3, #4
 8004a22:	2b06      	cmp	r3, #6
 8004a24:	d902      	bls.n	8004a2c <NVIC_EncodePriority+0x30>
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	3b03      	subs	r3, #3
 8004a2a:	e000      	b.n	8004a2e <NVIC_EncodePriority+0x32>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a30:	f04f 32ff 	mov.w	r2, #4294967295
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	43da      	mvns	r2, r3
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	401a      	ands	r2, r3
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a44:	f04f 31ff 	mov.w	r1, #4294967295
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4e:	43d9      	mvns	r1, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a54:	4313      	orrs	r3, r2
         );
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3724      	adds	r7, #36	; 0x24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
	...

08004a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a74:	d301      	bcc.n	8004a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a76:	2301      	movs	r3, #1
 8004a78:	e00f      	b.n	8004a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a7a:	4a0a      	ldr	r2, [pc, #40]	; (8004aa4 <SysTick_Config+0x40>)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a82:	210f      	movs	r1, #15
 8004a84:	f04f 30ff 	mov.w	r0, #4294967295
 8004a88:	f7ff ff8e 	bl	80049a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a8c:	4b05      	ldr	r3, [pc, #20]	; (8004aa4 <SysTick_Config+0x40>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a92:	4b04      	ldr	r3, [pc, #16]	; (8004aa4 <SysTick_Config+0x40>)
 8004a94:	2207      	movs	r2, #7
 8004a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	e000e010 	.word	0xe000e010

08004aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7ff ff05 	bl	80048c0 <__NVIC_SetPriorityGrouping>
}
 8004ab6:	bf00      	nop
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b086      	sub	sp, #24
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	607a      	str	r2, [r7, #4]
 8004aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004acc:	2300      	movs	r3, #0
 8004ace:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ad0:	f7ff ff1a 	bl	8004908 <__NVIC_GetPriorityGrouping>
 8004ad4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	6978      	ldr	r0, [r7, #20]
 8004adc:	f7ff ff8e 	bl	80049fc <NVIC_EncodePriority>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff ff5d 	bl	80049a8 <__NVIC_SetPriority>
}
 8004aee:	bf00      	nop
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b082      	sub	sp, #8
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	4603      	mov	r3, r0
 8004afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff ff0d 	bl	8004924 <__NVIC_EnableIRQ>
}
 8004b0a:	bf00      	nop
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	4603      	mov	r3, r0
 8004b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff ff1d 	bl	8004960 <__NVIC_DisableIRQ>
}
 8004b26:	bf00      	nop
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b082      	sub	sp, #8
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff ff94 	bl	8004a64 <SysTick_Config>
 8004b3c:	4603      	mov	r3, r0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004b46:	b480      	push	{r7}
 8004b48:	b087      	sub	sp, #28
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	460b      	mov	r3, r1
 8004b50:	607a      	str	r2, [r7, #4]
 8004b52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004b54:	2300      	movs	r3, #0
 8004b56:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8004b58:	7afb      	ldrb	r3, [r7, #11]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d103      	bne.n	8004b66 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	605a      	str	r2, [r3, #4]
      break;
 8004b64:	e002      	b.n	8004b6c <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	75fb      	strb	r3, [r7, #23]
      break;
 8004b6a:	bf00      	nop
  }

  return status;
 8004b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	371c      	adds	r7, #28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e003      	b.n	8004b96 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004b94:	2300      	movs	r3, #0
  }
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
	...

08004ba4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	0c1b      	lsrs	r3, r3, #16
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 031f 	and.w	r3, r3, #31
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc6:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	4b0c      	ldr	r3, [pc, #48]	; (8004c00 <HAL_EXTI_IRQHandler+0x5c>)
 8004bce:	4413      	add	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d009      	beq.n	8004bf6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	4798      	blx	r3
    }
  }
}
 8004bf6:	bf00      	nop
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	40010414 	.word	0x40010414

08004c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c12:	e17f      	b.n	8004f14 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	2101      	movs	r1, #1
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c20:	4013      	ands	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 8171 	beq.w	8004f0e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f003 0303 	and.w	r3, r3, #3
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d005      	beq.n	8004c44 <HAL_GPIO_Init+0x40>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f003 0303 	and.w	r3, r3, #3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d130      	bne.n	8004ca6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	2203      	movs	r2, #3
 8004c50:	fa02 f303 	lsl.w	r3, r2, r3
 8004c54:	43db      	mvns	r3, r3
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	68da      	ldr	r2, [r3, #12]
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	fa02 f303 	lsl.w	r3, r2, r3
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	43db      	mvns	r3, r3
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	4013      	ands	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	091b      	lsrs	r3, r3, #4
 8004c90:	f003 0201 	and.w	r2, r3, #1
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	d118      	bne.n	8004ce4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004cb8:	2201      	movs	r2, #1
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	08db      	lsrs	r3, r3, #3
 8004cce:	f003 0201 	and.w	r2, r3, #1
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f003 0303 	and.w	r3, r3, #3
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	d017      	beq.n	8004d20 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	2203      	movs	r2, #3
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	43db      	mvns	r3, r3
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	4013      	ands	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f003 0303 	and.w	r3, r3, #3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d123      	bne.n	8004d74 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	08da      	lsrs	r2, r3, #3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3208      	adds	r2, #8
 8004d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d38:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	220f      	movs	r2, #15
 8004d44:	fa02 f303 	lsl.w	r3, r2, r3
 8004d48:	43db      	mvns	r3, r3
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f003 0307 	and.w	r3, r3, #7
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	08da      	lsrs	r2, r3, #3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	3208      	adds	r2, #8
 8004d6e:	6939      	ldr	r1, [r7, #16]
 8004d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	2203      	movs	r2, #3
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	43db      	mvns	r3, r3
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f003 0203 	and.w	r2, r3, #3
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 80ac 	beq.w	8004f0e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004db6:	4b5f      	ldr	r3, [pc, #380]	; (8004f34 <HAL_GPIO_Init+0x330>)
 8004db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dba:	4a5e      	ldr	r2, [pc, #376]	; (8004f34 <HAL_GPIO_Init+0x330>)
 8004dbc:	f043 0301 	orr.w	r3, r3, #1
 8004dc0:	6613      	str	r3, [r2, #96]	; 0x60
 8004dc2:	4b5c      	ldr	r3, [pc, #368]	; (8004f34 <HAL_GPIO_Init+0x330>)
 8004dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	60bb      	str	r3, [r7, #8]
 8004dcc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004dce:	4a5a      	ldr	r2, [pc, #360]	; (8004f38 <HAL_GPIO_Init+0x334>)
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	089b      	lsrs	r3, r3, #2
 8004dd4:	3302      	adds	r3, #2
 8004dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dda:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	220f      	movs	r2, #15
 8004de6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dea:	43db      	mvns	r3, r3
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	4013      	ands	r3, r2
 8004df0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004df8:	d025      	beq.n	8004e46 <HAL_GPIO_Init+0x242>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a4f      	ldr	r2, [pc, #316]	; (8004f3c <HAL_GPIO_Init+0x338>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d01f      	beq.n	8004e42 <HAL_GPIO_Init+0x23e>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a4e      	ldr	r2, [pc, #312]	; (8004f40 <HAL_GPIO_Init+0x33c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d019      	beq.n	8004e3e <HAL_GPIO_Init+0x23a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a4d      	ldr	r2, [pc, #308]	; (8004f44 <HAL_GPIO_Init+0x340>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d013      	beq.n	8004e3a <HAL_GPIO_Init+0x236>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a4c      	ldr	r2, [pc, #304]	; (8004f48 <HAL_GPIO_Init+0x344>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00d      	beq.n	8004e36 <HAL_GPIO_Init+0x232>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a4b      	ldr	r2, [pc, #300]	; (8004f4c <HAL_GPIO_Init+0x348>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d007      	beq.n	8004e32 <HAL_GPIO_Init+0x22e>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a4a      	ldr	r2, [pc, #296]	; (8004f50 <HAL_GPIO_Init+0x34c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d101      	bne.n	8004e2e <HAL_GPIO_Init+0x22a>
 8004e2a:	2306      	movs	r3, #6
 8004e2c:	e00c      	b.n	8004e48 <HAL_GPIO_Init+0x244>
 8004e2e:	2307      	movs	r3, #7
 8004e30:	e00a      	b.n	8004e48 <HAL_GPIO_Init+0x244>
 8004e32:	2305      	movs	r3, #5
 8004e34:	e008      	b.n	8004e48 <HAL_GPIO_Init+0x244>
 8004e36:	2304      	movs	r3, #4
 8004e38:	e006      	b.n	8004e48 <HAL_GPIO_Init+0x244>
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e004      	b.n	8004e48 <HAL_GPIO_Init+0x244>
 8004e3e:	2302      	movs	r3, #2
 8004e40:	e002      	b.n	8004e48 <HAL_GPIO_Init+0x244>
 8004e42:	2301      	movs	r3, #1
 8004e44:	e000      	b.n	8004e48 <HAL_GPIO_Init+0x244>
 8004e46:	2300      	movs	r3, #0
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	f002 0203 	and.w	r2, r2, #3
 8004e4e:	0092      	lsls	r2, r2, #2
 8004e50:	4093      	lsls	r3, r2
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e58:	4937      	ldr	r1, [pc, #220]	; (8004f38 <HAL_GPIO_Init+0x334>)
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	089b      	lsrs	r3, r3, #2
 8004e5e:	3302      	adds	r3, #2
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e66:	4b3b      	ldr	r3, [pc, #236]	; (8004f54 <HAL_GPIO_Init+0x350>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	43db      	mvns	r3, r3
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4013      	ands	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e8a:	4a32      	ldr	r2, [pc, #200]	; (8004f54 <HAL_GPIO_Init+0x350>)
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e90:	4b30      	ldr	r3, [pc, #192]	; (8004f54 <HAL_GPIO_Init+0x350>)
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004eb4:	4a27      	ldr	r2, [pc, #156]	; (8004f54 <HAL_GPIO_Init+0x350>)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004eba:	4b26      	ldr	r3, [pc, #152]	; (8004f54 <HAL_GPIO_Init+0x350>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ede:	4a1d      	ldr	r2, [pc, #116]	; (8004f54 <HAL_GPIO_Init+0x350>)
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004ee4:	4b1b      	ldr	r3, [pc, #108]	; (8004f54 <HAL_GPIO_Init+0x350>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	43db      	mvns	r3, r3
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f08:	4a12      	ldr	r2, [pc, #72]	; (8004f54 <HAL_GPIO_Init+0x350>)
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	3301      	adds	r3, #1
 8004f12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f47f ae78 	bne.w	8004c14 <HAL_GPIO_Init+0x10>
  }
}
 8004f24:	bf00      	nop
 8004f26:	bf00      	nop
 8004f28:	371c      	adds	r7, #28
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40021000 	.word	0x40021000
 8004f38:	40010000 	.word	0x40010000
 8004f3c:	48000400 	.word	0x48000400
 8004f40:	48000800 	.word	0x48000800
 8004f44:	48000c00 	.word	0x48000c00
 8004f48:	48001000 	.word	0x48001000
 8004f4c:	48001400 	.word	0x48001400
 8004f50:	48001800 	.word	0x48001800
 8004f54:	40010400 	.word	0x40010400

08004f58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004f66:	e0cd      	b.n	8005104 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004f68:	2201      	movs	r2, #1
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	4013      	ands	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 80c0 	beq.w	80050fe <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004f7e:	4a68      	ldr	r2, [pc, #416]	; (8005120 <HAL_GPIO_DeInit+0x1c8>)
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	089b      	lsrs	r3, r3, #2
 8004f84:	3302      	adds	r3, #2
 8004f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f8a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	220f      	movs	r2, #15
 8004f96:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004fa6:	d025      	beq.n	8004ff4 <HAL_GPIO_DeInit+0x9c>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a5e      	ldr	r2, [pc, #376]	; (8005124 <HAL_GPIO_DeInit+0x1cc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d01f      	beq.n	8004ff0 <HAL_GPIO_DeInit+0x98>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a5d      	ldr	r2, [pc, #372]	; (8005128 <HAL_GPIO_DeInit+0x1d0>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d019      	beq.n	8004fec <HAL_GPIO_DeInit+0x94>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a5c      	ldr	r2, [pc, #368]	; (800512c <HAL_GPIO_DeInit+0x1d4>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d013      	beq.n	8004fe8 <HAL_GPIO_DeInit+0x90>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a5b      	ldr	r2, [pc, #364]	; (8005130 <HAL_GPIO_DeInit+0x1d8>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00d      	beq.n	8004fe4 <HAL_GPIO_DeInit+0x8c>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a5a      	ldr	r2, [pc, #360]	; (8005134 <HAL_GPIO_DeInit+0x1dc>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d007      	beq.n	8004fe0 <HAL_GPIO_DeInit+0x88>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a59      	ldr	r2, [pc, #356]	; (8005138 <HAL_GPIO_DeInit+0x1e0>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d101      	bne.n	8004fdc <HAL_GPIO_DeInit+0x84>
 8004fd8:	2306      	movs	r3, #6
 8004fda:	e00c      	b.n	8004ff6 <HAL_GPIO_DeInit+0x9e>
 8004fdc:	2307      	movs	r3, #7
 8004fde:	e00a      	b.n	8004ff6 <HAL_GPIO_DeInit+0x9e>
 8004fe0:	2305      	movs	r3, #5
 8004fe2:	e008      	b.n	8004ff6 <HAL_GPIO_DeInit+0x9e>
 8004fe4:	2304      	movs	r3, #4
 8004fe6:	e006      	b.n	8004ff6 <HAL_GPIO_DeInit+0x9e>
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e004      	b.n	8004ff6 <HAL_GPIO_DeInit+0x9e>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e002      	b.n	8004ff6 <HAL_GPIO_DeInit+0x9e>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e000      	b.n	8004ff6 <HAL_GPIO_DeInit+0x9e>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	f002 0203 	and.w	r2, r2, #3
 8004ffc:	0092      	lsls	r2, r2, #2
 8004ffe:	4093      	lsls	r3, r2
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	429a      	cmp	r2, r3
 8005004:	d132      	bne.n	800506c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005006:	4b4d      	ldr	r3, [pc, #308]	; (800513c <HAL_GPIO_DeInit+0x1e4>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	43db      	mvns	r3, r3
 800500e:	494b      	ldr	r1, [pc, #300]	; (800513c <HAL_GPIO_DeInit+0x1e4>)
 8005010:	4013      	ands	r3, r2
 8005012:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005014:	4b49      	ldr	r3, [pc, #292]	; (800513c <HAL_GPIO_DeInit+0x1e4>)
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	43db      	mvns	r3, r3
 800501c:	4947      	ldr	r1, [pc, #284]	; (800513c <HAL_GPIO_DeInit+0x1e4>)
 800501e:	4013      	ands	r3, r2
 8005020:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005022:	4b46      	ldr	r3, [pc, #280]	; (800513c <HAL_GPIO_DeInit+0x1e4>)
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	43db      	mvns	r3, r3
 800502a:	4944      	ldr	r1, [pc, #272]	; (800513c <HAL_GPIO_DeInit+0x1e4>)
 800502c:	4013      	ands	r3, r2
 800502e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005030:	4b42      	ldr	r3, [pc, #264]	; (800513c <HAL_GPIO_DeInit+0x1e4>)
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	43db      	mvns	r3, r3
 8005038:	4940      	ldr	r1, [pc, #256]	; (800513c <HAL_GPIO_DeInit+0x1e4>)
 800503a:	4013      	ands	r3, r2
 800503c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f003 0303 	and.w	r3, r3, #3
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	220f      	movs	r2, #15
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800504e:	4a34      	ldr	r2, [pc, #208]	; (8005120 <HAL_GPIO_DeInit+0x1c8>)
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	089b      	lsrs	r3, r3, #2
 8005054:	3302      	adds	r3, #2
 8005056:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	43da      	mvns	r2, r3
 800505e:	4830      	ldr	r0, [pc, #192]	; (8005120 <HAL_GPIO_DeInit+0x1c8>)
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	089b      	lsrs	r3, r3, #2
 8005064:	400a      	ands	r2, r1
 8005066:	3302      	adds	r3, #2
 8005068:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	2103      	movs	r1, #3
 8005076:	fa01 f303 	lsl.w	r3, r1, r3
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	08da      	lsrs	r2, r3, #3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3208      	adds	r2, #8
 8005088:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	220f      	movs	r2, #15
 8005096:	fa02 f303 	lsl.w	r3, r2, r3
 800509a:	43db      	mvns	r3, r3
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	08d2      	lsrs	r2, r2, #3
 80050a0:	4019      	ands	r1, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	3208      	adds	r2, #8
 80050a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689a      	ldr	r2, [r3, #8]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	2103      	movs	r1, #3
 80050b4:	fa01 f303 	lsl.w	r3, r1, r3
 80050b8:	43db      	mvns	r3, r3
 80050ba:	401a      	ands	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	2101      	movs	r1, #1
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	fa01 f303 	lsl.w	r3, r1, r3
 80050cc:	43db      	mvns	r3, r3
 80050ce:	401a      	ands	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	2103      	movs	r1, #3
 80050de:	fa01 f303 	lsl.w	r3, r1, r3
 80050e2:	43db      	mvns	r3, r3
 80050e4:	401a      	ands	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ee:	2101      	movs	r1, #1
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	fa01 f303 	lsl.w	r3, r1, r3
 80050f6:	43db      	mvns	r3, r3
 80050f8:	401a      	ands	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	3301      	adds	r3, #1
 8005102:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	fa22 f303 	lsr.w	r3, r2, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	f47f af2b 	bne.w	8004f68 <HAL_GPIO_DeInit+0x10>
  }
}
 8005112:	bf00      	nop
 8005114:	bf00      	nop
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	40010000 	.word	0x40010000
 8005124:	48000400 	.word	0x48000400
 8005128:	48000800 	.word	0x48000800
 800512c:	48000c00 	.word	0x48000c00
 8005130:	48001000 	.word	0x48001000
 8005134:	48001400 	.word	0x48001400
 8005138:	48001800 	.word	0x48001800
 800513c:	40010400 	.word	0x40010400

08005140 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	460b      	mov	r3, r1
 800514a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691a      	ldr	r2, [r3, #16]
 8005150:	887b      	ldrh	r3, [r7, #2]
 8005152:	4013      	ands	r3, r2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005158:	2301      	movs	r3, #1
 800515a:	73fb      	strb	r3, [r7, #15]
 800515c:	e001      	b.n	8005162 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800515e:	2300      	movs	r3, #0
 8005160:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005162:	7bfb      	ldrb	r3, [r7, #15]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	807b      	strh	r3, [r7, #2]
 800517c:	4613      	mov	r3, r2
 800517e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005180:	787b      	ldrb	r3, [r7, #1]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005186:	887a      	ldrh	r2, [r7, #2]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800518c:	e002      	b.n	8005194 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800518e:	887a      	ldrh	r2, [r7, #2]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	460b      	mov	r3, r1
 80051aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80051b2:	887a      	ldrh	r2, [r7, #2]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4013      	ands	r3, r2
 80051b8:	041a      	lsls	r2, r3, #16
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	43d9      	mvns	r1, r3
 80051be:	887b      	ldrh	r3, [r7, #2]
 80051c0:	400b      	ands	r3, r1
 80051c2:	431a      	orrs	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	619a      	str	r2, [r3, #24]
}
 80051c8:	bf00      	nop
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e08d      	b.n	8005302 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d106      	bne.n	8005200 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7fe fa18 	bl	8003630 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2224      	movs	r2, #36	; 0x24
 8005204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0201 	bic.w	r2, r2, #1
 8005216:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005224:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005234:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d107      	bne.n	800524e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689a      	ldr	r2, [r3, #8]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800524a:	609a      	str	r2, [r3, #8]
 800524c:	e006      	b.n	800525c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689a      	ldr	r2, [r3, #8]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800525a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	2b02      	cmp	r3, #2
 8005262:	d108      	bne.n	8005276 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005272:	605a      	str	r2, [r3, #4]
 8005274:	e007      	b.n	8005286 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005284:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6812      	ldr	r2, [r2, #0]
 8005290:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005298:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691a      	ldr	r2, [r3, #16]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	69d9      	ldr	r1, [r3, #28]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a1a      	ldr	r2, [r3, #32]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af02      	add	r7, sp, #8
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	4608      	mov	r0, r1
 8005316:	4611      	mov	r1, r2
 8005318:	461a      	mov	r2, r3
 800531a:	4603      	mov	r3, r0
 800531c:	817b      	strh	r3, [r7, #10]
 800531e:	460b      	mov	r3, r1
 8005320:	813b      	strh	r3, [r7, #8]
 8005322:	4613      	mov	r3, r2
 8005324:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b20      	cmp	r3, #32
 8005330:	f040 80f9 	bne.w	8005526 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <HAL_I2C_Mem_Write+0x34>
 800533a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800533c:	2b00      	cmp	r3, #0
 800533e:	d105      	bne.n	800534c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005346:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e0ed      	b.n	8005528 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005352:	2b01      	cmp	r3, #1
 8005354:	d101      	bne.n	800535a <HAL_I2C_Mem_Write+0x4e>
 8005356:	2302      	movs	r3, #2
 8005358:	e0e6      	b.n	8005528 <HAL_I2C_Mem_Write+0x21c>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005362:	f7ff fa7d 	bl	8004860 <HAL_GetTick>
 8005366:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	2319      	movs	r3, #25
 800536e:	2201      	movs	r2, #1
 8005370:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f000 fac3 	bl	8005900 <I2C_WaitOnFlagUntilTimeout>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e0d1      	b.n	8005528 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2221      	movs	r2, #33	; 0x21
 8005388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2240      	movs	r2, #64	; 0x40
 8005390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a3a      	ldr	r2, [r7, #32]
 800539e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80053a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053ac:	88f8      	ldrh	r0, [r7, #6]
 80053ae:	893a      	ldrh	r2, [r7, #8]
 80053b0:	8979      	ldrh	r1, [r7, #10]
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	9301      	str	r3, [sp, #4]
 80053b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	4603      	mov	r3, r0
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f9d3 	bl	8005768 <I2C_RequestMemoryWrite>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e0a9      	b.n	8005528 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d8:	b29b      	uxth	r3, r3
 80053da:	2bff      	cmp	r3, #255	; 0xff
 80053dc:	d90e      	bls.n	80053fc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	22ff      	movs	r2, #255	; 0xff
 80053e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	8979      	ldrh	r1, [r7, #10]
 80053ec:	2300      	movs	r3, #0
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 fc3d 	bl	8005c74 <I2C_TransferConfig>
 80053fa:	e00f      	b.n	800541c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800540a:	b2da      	uxtb	r2, r3
 800540c:	8979      	ldrh	r1, [r7, #10]
 800540e:	2300      	movs	r3, #0
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 fc2c 	bl	8005c74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 fabc 	bl	800599e <I2C_WaitOnTXISFlagUntilTimeout>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e07b      	b.n	8005528 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	781a      	ldrb	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544a:	b29b      	uxth	r3, r3
 800544c:	3b01      	subs	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005458:	3b01      	subs	r3, #1
 800545a:	b29a      	uxth	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005464:	b29b      	uxth	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d034      	beq.n	80054d4 <HAL_I2C_Mem_Write+0x1c8>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800546e:	2b00      	cmp	r3, #0
 8005470:	d130      	bne.n	80054d4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005478:	2200      	movs	r2, #0
 800547a:	2180      	movs	r1, #128	; 0x80
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 fa3f 	bl	8005900 <I2C_WaitOnFlagUntilTimeout>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e04d      	b.n	8005528 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005490:	b29b      	uxth	r3, r3
 8005492:	2bff      	cmp	r3, #255	; 0xff
 8005494:	d90e      	bls.n	80054b4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	22ff      	movs	r2, #255	; 0xff
 800549a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	8979      	ldrh	r1, [r7, #10]
 80054a4:	2300      	movs	r3, #0
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 fbe1 	bl	8005c74 <I2C_TransferConfig>
 80054b2:	e00f      	b.n	80054d4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	8979      	ldrh	r1, [r7, #10]
 80054c6:	2300      	movs	r3, #0
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 fbd0 	bl	8005c74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d8:	b29b      	uxth	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d19e      	bne.n	800541c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f000 faa2 	bl	8005a2c <I2C_WaitOnSTOPFlagUntilTimeout>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e01a      	b.n	8005528 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2220      	movs	r2, #32
 80054f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6859      	ldr	r1, [r3, #4]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	4b0a      	ldr	r3, [pc, #40]	; (8005530 <HAL_I2C_Mem_Write+0x224>)
 8005506:	400b      	ands	r3, r1
 8005508:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2220      	movs	r2, #32
 800550e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	e000      	b.n	8005528 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005526:	2302      	movs	r3, #2
  }
}
 8005528:	4618      	mov	r0, r3
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	fe00e800 	.word	0xfe00e800

08005534 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af02      	add	r7, sp, #8
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	4608      	mov	r0, r1
 800553e:	4611      	mov	r1, r2
 8005540:	461a      	mov	r2, r3
 8005542:	4603      	mov	r3, r0
 8005544:	817b      	strh	r3, [r7, #10]
 8005546:	460b      	mov	r3, r1
 8005548:	813b      	strh	r3, [r7, #8]
 800554a:	4613      	mov	r3, r2
 800554c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b20      	cmp	r3, #32
 8005558:	f040 80fd 	bne.w	8005756 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <HAL_I2C_Mem_Read+0x34>
 8005562:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005564:	2b00      	cmp	r3, #0
 8005566:	d105      	bne.n	8005574 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800556e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e0f1      	b.n	8005758 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800557a:	2b01      	cmp	r3, #1
 800557c:	d101      	bne.n	8005582 <HAL_I2C_Mem_Read+0x4e>
 800557e:	2302      	movs	r3, #2
 8005580:	e0ea      	b.n	8005758 <HAL_I2C_Mem_Read+0x224>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800558a:	f7ff f969 	bl	8004860 <HAL_GetTick>
 800558e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	2319      	movs	r3, #25
 8005596:	2201      	movs	r2, #1
 8005598:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 f9af 	bl	8005900 <I2C_WaitOnFlagUntilTimeout>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e0d5      	b.n	8005758 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2222      	movs	r2, #34	; 0x22
 80055b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2240      	movs	r2, #64	; 0x40
 80055b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a3a      	ldr	r2, [r7, #32]
 80055c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80055cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055d4:	88f8      	ldrh	r0, [r7, #6]
 80055d6:	893a      	ldrh	r2, [r7, #8]
 80055d8:	8979      	ldrh	r1, [r7, #10]
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	9301      	str	r3, [sp, #4]
 80055de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	4603      	mov	r3, r0
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 f913 	bl	8005810 <I2C_RequestMemoryRead>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d005      	beq.n	80055fc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e0ad      	b.n	8005758 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005600:	b29b      	uxth	r3, r3
 8005602:	2bff      	cmp	r3, #255	; 0xff
 8005604:	d90e      	bls.n	8005624 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	22ff      	movs	r2, #255	; 0xff
 800560a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005610:	b2da      	uxtb	r2, r3
 8005612:	8979      	ldrh	r1, [r7, #10]
 8005614:	4b52      	ldr	r3, [pc, #328]	; (8005760 <HAL_I2C_Mem_Read+0x22c>)
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 fb29 	bl	8005c74 <I2C_TransferConfig>
 8005622:	e00f      	b.n	8005644 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005632:	b2da      	uxtb	r2, r3
 8005634:	8979      	ldrh	r1, [r7, #10]
 8005636:	4b4a      	ldr	r3, [pc, #296]	; (8005760 <HAL_I2C_Mem_Read+0x22c>)
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f000 fb18 	bl	8005c74 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	9300      	str	r3, [sp, #0]
 8005648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564a:	2200      	movs	r2, #0
 800564c:	2104      	movs	r1, #4
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f000 f956 	bl	8005900 <I2C_WaitOnFlagUntilTimeout>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e07c      	b.n	8005758 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	1c5a      	adds	r2, r3, #1
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567a:	3b01      	subs	r3, #1
 800567c:	b29a      	uxth	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005686:	b29b      	uxth	r3, r3
 8005688:	3b01      	subs	r3, #1
 800568a:	b29a      	uxth	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005694:	b29b      	uxth	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d034      	beq.n	8005704 <HAL_I2C_Mem_Read+0x1d0>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d130      	bne.n	8005704 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	2200      	movs	r2, #0
 80056aa:	2180      	movs	r1, #128	; 0x80
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 f927 	bl	8005900 <I2C_WaitOnFlagUntilTimeout>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e04d      	b.n	8005758 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2bff      	cmp	r3, #255	; 0xff
 80056c4:	d90e      	bls.n	80056e4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	22ff      	movs	r2, #255	; 0xff
 80056ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	8979      	ldrh	r1, [r7, #10]
 80056d4:	2300      	movs	r3, #0
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 fac9 	bl	8005c74 <I2C_TransferConfig>
 80056e2:	e00f      	b.n	8005704 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	8979      	ldrh	r1, [r7, #10]
 80056f6:	2300      	movs	r3, #0
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 fab8 	bl	8005c74 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005708:	b29b      	uxth	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d19a      	bne.n	8005644 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 f98a 	bl	8005a2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e01a      	b.n	8005758 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2220      	movs	r2, #32
 8005728:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6859      	ldr	r1, [r3, #4]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <HAL_I2C_Mem_Read+0x230>)
 8005736:	400b      	ands	r3, r1
 8005738:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2220      	movs	r2, #32
 800573e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	e000      	b.n	8005758 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005756:	2302      	movs	r3, #2
  }
}
 8005758:	4618      	mov	r0, r3
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	80002400 	.word	0x80002400
 8005764:	fe00e800 	.word	0xfe00e800

08005768 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af02      	add	r7, sp, #8
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	4608      	mov	r0, r1
 8005772:	4611      	mov	r1, r2
 8005774:	461a      	mov	r2, r3
 8005776:	4603      	mov	r3, r0
 8005778:	817b      	strh	r3, [r7, #10]
 800577a:	460b      	mov	r3, r1
 800577c:	813b      	strh	r3, [r7, #8]
 800577e:	4613      	mov	r3, r2
 8005780:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005782:	88fb      	ldrh	r3, [r7, #6]
 8005784:	b2da      	uxtb	r2, r3
 8005786:	8979      	ldrh	r1, [r7, #10]
 8005788:	4b20      	ldr	r3, [pc, #128]	; (800580c <I2C_RequestMemoryWrite+0xa4>)
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 fa6f 	bl	8005c74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005796:	69fa      	ldr	r2, [r7, #28]
 8005798:	69b9      	ldr	r1, [r7, #24]
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 f8ff 	bl	800599e <I2C_WaitOnTXISFlagUntilTimeout>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e02c      	b.n	8005804 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057aa:	88fb      	ldrh	r3, [r7, #6]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d105      	bne.n	80057bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057b0:	893b      	ldrh	r3, [r7, #8]
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	629a      	str	r2, [r3, #40]	; 0x28
 80057ba:	e015      	b.n	80057e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80057bc:	893b      	ldrh	r3, [r7, #8]
 80057be:	0a1b      	lsrs	r3, r3, #8
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ca:	69fa      	ldr	r2, [r7, #28]
 80057cc:	69b9      	ldr	r1, [r7, #24]
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 f8e5 	bl	800599e <I2C_WaitOnTXISFlagUntilTimeout>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e012      	b.n	8005804 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057de:	893b      	ldrh	r3, [r7, #8]
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	2200      	movs	r2, #0
 80057f0:	2180      	movs	r1, #128	; 0x80
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 f884 	bl	8005900 <I2C_WaitOnFlagUntilTimeout>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e000      	b.n	8005804 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	80002000 	.word	0x80002000

08005810 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af02      	add	r7, sp, #8
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	4608      	mov	r0, r1
 800581a:	4611      	mov	r1, r2
 800581c:	461a      	mov	r2, r3
 800581e:	4603      	mov	r3, r0
 8005820:	817b      	strh	r3, [r7, #10]
 8005822:	460b      	mov	r3, r1
 8005824:	813b      	strh	r3, [r7, #8]
 8005826:	4613      	mov	r3, r2
 8005828:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800582a:	88fb      	ldrh	r3, [r7, #6]
 800582c:	b2da      	uxtb	r2, r3
 800582e:	8979      	ldrh	r1, [r7, #10]
 8005830:	4b20      	ldr	r3, [pc, #128]	; (80058b4 <I2C_RequestMemoryRead+0xa4>)
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	2300      	movs	r3, #0
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 fa1c 	bl	8005c74 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800583c:	69fa      	ldr	r2, [r7, #28]
 800583e:	69b9      	ldr	r1, [r7, #24]
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 f8ac 	bl	800599e <I2C_WaitOnTXISFlagUntilTimeout>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e02c      	b.n	80058aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005850:	88fb      	ldrh	r3, [r7, #6]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d105      	bne.n	8005862 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005856:	893b      	ldrh	r3, [r7, #8]
 8005858:	b2da      	uxtb	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	629a      	str	r2, [r3, #40]	; 0x28
 8005860:	e015      	b.n	800588e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005862:	893b      	ldrh	r3, [r7, #8]
 8005864:	0a1b      	lsrs	r3, r3, #8
 8005866:	b29b      	uxth	r3, r3
 8005868:	b2da      	uxtb	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005870:	69fa      	ldr	r2, [r7, #28]
 8005872:	69b9      	ldr	r1, [r7, #24]
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 f892 	bl	800599e <I2C_WaitOnTXISFlagUntilTimeout>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d001      	beq.n	8005884 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e012      	b.n	80058aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005884:	893b      	ldrh	r3, [r7, #8]
 8005886:	b2da      	uxtb	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	2200      	movs	r2, #0
 8005896:	2140      	movs	r1, #64	; 0x40
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 f831 	bl	8005900 <I2C_WaitOnFlagUntilTimeout>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e000      	b.n	80058aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	80002000 	.word	0x80002000

080058b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d103      	bne.n	80058d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2200      	movs	r2, #0
 80058d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d007      	beq.n	80058f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699a      	ldr	r2, [r3, #24]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0201 	orr.w	r2, r2, #1
 80058f2:	619a      	str	r2, [r3, #24]
  }
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	4613      	mov	r3, r2
 800590e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005910:	e031      	b.n	8005976 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005918:	d02d      	beq.n	8005976 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800591a:	f7fe ffa1 	bl	8004860 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d302      	bcc.n	8005930 <I2C_WaitOnFlagUntilTimeout+0x30>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d122      	bne.n	8005976 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	4013      	ands	r3, r2
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	429a      	cmp	r2, r3
 800593e:	bf0c      	ite	eq
 8005940:	2301      	moveq	r3, #1
 8005942:	2300      	movne	r3, #0
 8005944:	b2db      	uxtb	r3, r3
 8005946:	461a      	mov	r2, r3
 8005948:	79fb      	ldrb	r3, [r7, #7]
 800594a:	429a      	cmp	r2, r3
 800594c:	d113      	bne.n	8005976 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005952:	f043 0220 	orr.w	r2, r3, #32
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2220      	movs	r2, #32
 800595e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e00f      	b.n	8005996 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	699a      	ldr	r2, [r3, #24]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	4013      	ands	r3, r2
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	429a      	cmp	r2, r3
 8005984:	bf0c      	ite	eq
 8005986:	2301      	moveq	r3, #1
 8005988:	2300      	movne	r3, #0
 800598a:	b2db      	uxtb	r3, r3
 800598c:	461a      	mov	r2, r3
 800598e:	79fb      	ldrb	r3, [r7, #7]
 8005990:	429a      	cmp	r2, r3
 8005992:	d0be      	beq.n	8005912 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b084      	sub	sp, #16
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059aa:	e033      	b.n	8005a14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	68b9      	ldr	r1, [r7, #8]
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 f87f 	bl	8005ab4 <I2C_IsErrorOccurred>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e031      	b.n	8005a24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c6:	d025      	beq.n	8005a14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059c8:	f7fe ff4a 	bl	8004860 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d302      	bcc.n	80059de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d11a      	bne.n	8005a14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d013      	beq.n	8005a14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f0:	f043 0220 	orr.w	r2, r3, #32
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e007      	b.n	8005a24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d1c4      	bne.n	80059ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a38:	e02f      	b.n	8005a9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	68b9      	ldr	r1, [r7, #8]
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 f838 	bl	8005ab4 <I2C_IsErrorOccurred>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e02d      	b.n	8005aaa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a4e:	f7fe ff07 	bl	8004860 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d302      	bcc.n	8005a64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d11a      	bne.n	8005a9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	f003 0320 	and.w	r3, r3, #32
 8005a6e:	2b20      	cmp	r3, #32
 8005a70:	d013      	beq.n	8005a9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a76:	f043 0220 	orr.w	r2, r3, #32
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2220      	movs	r2, #32
 8005a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e007      	b.n	8005aaa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	f003 0320 	and.w	r3, r3, #32
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	d1c8      	bne.n	8005a3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
	...

08005ab4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b08a      	sub	sp, #40	; 0x28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d068      	beq.n	8005bb2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2210      	movs	r2, #16
 8005ae6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ae8:	e049      	b.n	8005b7e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af0:	d045      	beq.n	8005b7e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005af2:	f7fe feb5 	bl	8004860 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d302      	bcc.n	8005b08 <I2C_IsErrorOccurred+0x54>
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d13a      	bne.n	8005b7e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b12:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b1a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b2a:	d121      	bne.n	8005b70 <I2C_IsErrorOccurred+0xbc>
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b32:	d01d      	beq.n	8005b70 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005b34:	7cfb      	ldrb	r3, [r7, #19]
 8005b36:	2b20      	cmp	r3, #32
 8005b38:	d01a      	beq.n	8005b70 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b48:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005b4a:	f7fe fe89 	bl	8004860 <HAL_GetTick>
 8005b4e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b50:	e00e      	b.n	8005b70 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005b52:	f7fe fe85 	bl	8004860 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	2b19      	cmp	r3, #25
 8005b5e:	d907      	bls.n	8005b70 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	f043 0320 	orr.w	r3, r3, #32
 8005b66:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005b6e:	e006      	b.n	8005b7e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	f003 0320 	and.w	r3, r3, #32
 8005b7a:	2b20      	cmp	r3, #32
 8005b7c:	d1e9      	bne.n	8005b52 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	f003 0320 	and.w	r3, r3, #32
 8005b88:	2b20      	cmp	r3, #32
 8005b8a:	d003      	beq.n	8005b94 <I2C_IsErrorOccurred+0xe0>
 8005b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0aa      	beq.n	8005aea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005b94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d103      	bne.n	8005ba4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	f043 0304 	orr.w	r3, r3, #4
 8005baa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00b      	beq.n	8005bdc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	f043 0301 	orr.w	r3, r3, #1
 8005bca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bd4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00b      	beq.n	8005bfe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	f043 0308 	orr.w	r3, r3, #8
 8005bec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bf6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00b      	beq.n	8005c20 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	f043 0302 	orr.w	r3, r3, #2
 8005c0e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d01c      	beq.n	8005c62 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f7ff fe45 	bl	80058b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6859      	ldr	r1, [r3, #4]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	4b0d      	ldr	r3, [pc, #52]	; (8005c70 <I2C_IsErrorOccurred+0x1bc>)
 8005c3a:	400b      	ands	r3, r1
 8005c3c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	431a      	orrs	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005c62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3728      	adds	r7, #40	; 0x28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	fe00e800 	.word	0xfe00e800

08005c74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	607b      	str	r3, [r7, #4]
 8005c7e:	460b      	mov	r3, r1
 8005c80:	817b      	strh	r3, [r7, #10]
 8005c82:	4613      	mov	r3, r2
 8005c84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c86:	897b      	ldrh	r3, [r7, #10]
 8005c88:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c8c:	7a7b      	ldrb	r3, [r7, #9]
 8005c8e:	041b      	lsls	r3, r3, #16
 8005c90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c94:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ca2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	0d5b      	lsrs	r3, r3, #21
 8005cae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005cb2:	4b08      	ldr	r3, [pc, #32]	; (8005cd4 <I2C_TransferConfig+0x60>)
 8005cb4:	430b      	orrs	r3, r1
 8005cb6:	43db      	mvns	r3, r3
 8005cb8:	ea02 0103 	and.w	r1, r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005cc6:	bf00      	nop
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	03ff63ff 	.word	0x03ff63ff

08005cd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b20      	cmp	r3, #32
 8005cec:	d138      	bne.n	8005d60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e032      	b.n	8005d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2224      	movs	r2, #36	; 0x24
 8005d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0201 	bic.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6819      	ldr	r1, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0201 	orr.w	r2, r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	e000      	b.n	8005d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d60:	2302      	movs	r3, #2
  }
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b085      	sub	sp, #20
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
 8005d76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	d139      	bne.n	8005df8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d101      	bne.n	8005d92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	e033      	b.n	8005dfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2224      	movs	r2, #36	; 0x24
 8005d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f022 0201 	bic.w	r2, r2, #1
 8005db0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005dc0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	021b      	lsls	r3, r3, #8
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f042 0201 	orr.w	r2, r2, #1
 8005de2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2220      	movs	r2, #32
 8005de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	e000      	b.n	8005dfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005df8:	2302      	movs	r3, #2
  }
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
	...

08005e08 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005e0c:	4b04      	ldr	r3, [pc, #16]	; (8005e20 <HAL_PWREx_GetVoltageRange+0x18>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	40007000 	.word	0x40007000

08005e24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e32:	d130      	bne.n	8005e96 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e34:	4b23      	ldr	r3, [pc, #140]	; (8005ec4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e40:	d038      	beq.n	8005eb4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e42:	4b20      	ldr	r3, [pc, #128]	; (8005ec4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e4a:	4a1e      	ldr	r2, [pc, #120]	; (8005ec4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e50:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e52:	4b1d      	ldr	r3, [pc, #116]	; (8005ec8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2232      	movs	r2, #50	; 0x32
 8005e58:	fb02 f303 	mul.w	r3, r2, r3
 8005e5c:	4a1b      	ldr	r2, [pc, #108]	; (8005ecc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e62:	0c9b      	lsrs	r3, r3, #18
 8005e64:	3301      	adds	r3, #1
 8005e66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e68:	e002      	b.n	8005e70 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e70:	4b14      	ldr	r3, [pc, #80]	; (8005ec4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e7c:	d102      	bne.n	8005e84 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1f2      	bne.n	8005e6a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e84:	4b0f      	ldr	r3, [pc, #60]	; (8005ec4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e90:	d110      	bne.n	8005eb4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e00f      	b.n	8005eb6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e96:	4b0b      	ldr	r3, [pc, #44]	; (8005ec4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea2:	d007      	beq.n	8005eb4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005ea4:	4b07      	ldr	r3, [pc, #28]	; (8005ec4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005eac:	4a05      	ldr	r2, [pc, #20]	; (8005ec4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005eae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005eb2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	40007000 	.word	0x40007000
 8005ec8:	20000018 	.word	0x20000018
 8005ecc:	431bde83 	.word	0x431bde83

08005ed0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e3ca      	b.n	8006678 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ee2:	4b97      	ldr	r3, [pc, #604]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f003 030c 	and.w	r3, r3, #12
 8005eea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005eec:	4b94      	ldr	r3, [pc, #592]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f003 0303 	and.w	r3, r3, #3
 8005ef4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0310 	and.w	r3, r3, #16
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 80e4 	beq.w	80060cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d007      	beq.n	8005f1a <HAL_RCC_OscConfig+0x4a>
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	2b0c      	cmp	r3, #12
 8005f0e:	f040 808b 	bne.w	8006028 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	f040 8087 	bne.w	8006028 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f1a:	4b89      	ldr	r3, [pc, #548]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d005      	beq.n	8005f32 <HAL_RCC_OscConfig+0x62>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e3a2      	b.n	8006678 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1a      	ldr	r2, [r3, #32]
 8005f36:	4b82      	ldr	r3, [pc, #520]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0308 	and.w	r3, r3, #8
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d004      	beq.n	8005f4c <HAL_RCC_OscConfig+0x7c>
 8005f42:	4b7f      	ldr	r3, [pc, #508]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f4a:	e005      	b.n	8005f58 <HAL_RCC_OscConfig+0x88>
 8005f4c:	4b7c      	ldr	r3, [pc, #496]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8005f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f52:	091b      	lsrs	r3, r3, #4
 8005f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d223      	bcs.n	8005fa4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 fd55 	bl	8006a10 <RCC_SetFlashLatencyFromMSIRange>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e383      	b.n	8006678 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f70:	4b73      	ldr	r3, [pc, #460]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a72      	ldr	r2, [pc, #456]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8005f76:	f043 0308 	orr.w	r3, r3, #8
 8005f7a:	6013      	str	r3, [r2, #0]
 8005f7c:	4b70      	ldr	r3, [pc, #448]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	496d      	ldr	r1, [pc, #436]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f8e:	4b6c      	ldr	r3, [pc, #432]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	021b      	lsls	r3, r3, #8
 8005f9c:	4968      	ldr	r1, [pc, #416]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	604b      	str	r3, [r1, #4]
 8005fa2:	e025      	b.n	8005ff0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fa4:	4b66      	ldr	r3, [pc, #408]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a65      	ldr	r2, [pc, #404]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8005faa:	f043 0308 	orr.w	r3, r3, #8
 8005fae:	6013      	str	r3, [r2, #0]
 8005fb0:	4b63      	ldr	r3, [pc, #396]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	4960      	ldr	r1, [pc, #384]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fc2:	4b5f      	ldr	r3, [pc, #380]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	495b      	ldr	r1, [pc, #364]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d109      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 fd15 	bl	8006a10 <RCC_SetFlashLatencyFromMSIRange>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e343      	b.n	8006678 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ff0:	f000 fc4a 	bl	8006888 <HAL_RCC_GetSysClockFreq>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	4b52      	ldr	r3, [pc, #328]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	091b      	lsrs	r3, r3, #4
 8005ffc:	f003 030f 	and.w	r3, r3, #15
 8006000:	4950      	ldr	r1, [pc, #320]	; (8006144 <HAL_RCC_OscConfig+0x274>)
 8006002:	5ccb      	ldrb	r3, [r1, r3]
 8006004:	f003 031f 	and.w	r3, r3, #31
 8006008:	fa22 f303 	lsr.w	r3, r2, r3
 800600c:	4a4e      	ldr	r2, [pc, #312]	; (8006148 <HAL_RCC_OscConfig+0x278>)
 800600e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006010:	4b4e      	ldr	r3, [pc, #312]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4618      	mov	r0, r3
 8006016:	f7fe fbd3 	bl	80047c0 <HAL_InitTick>
 800601a:	4603      	mov	r3, r0
 800601c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800601e:	7bfb      	ldrb	r3, [r7, #15]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d052      	beq.n	80060ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006024:	7bfb      	ldrb	r3, [r7, #15]
 8006026:	e327      	b.n	8006678 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d032      	beq.n	8006096 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006030:	4b43      	ldr	r3, [pc, #268]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a42      	ldr	r2, [pc, #264]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8006036:	f043 0301 	orr.w	r3, r3, #1
 800603a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800603c:	f7fe fc10 	bl	8004860 <HAL_GetTick>
 8006040:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006042:	e008      	b.n	8006056 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006044:	f7fe fc0c 	bl	8004860 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b02      	cmp	r3, #2
 8006050:	d901      	bls.n	8006056 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e310      	b.n	8006678 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006056:	4b3a      	ldr	r3, [pc, #232]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d0f0      	beq.n	8006044 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006062:	4b37      	ldr	r3, [pc, #220]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a36      	ldr	r2, [pc, #216]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8006068:	f043 0308 	orr.w	r3, r3, #8
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	4b34      	ldr	r3, [pc, #208]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	4931      	ldr	r1, [pc, #196]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 800607c:	4313      	orrs	r3, r2
 800607e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006080:	4b2f      	ldr	r3, [pc, #188]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	021b      	lsls	r3, r3, #8
 800608e:	492c      	ldr	r1, [pc, #176]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8006090:	4313      	orrs	r3, r2
 8006092:	604b      	str	r3, [r1, #4]
 8006094:	e01a      	b.n	80060cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006096:	4b2a      	ldr	r3, [pc, #168]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a29      	ldr	r2, [pc, #164]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 800609c:	f023 0301 	bic.w	r3, r3, #1
 80060a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80060a2:	f7fe fbdd 	bl	8004860 <HAL_GetTick>
 80060a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80060a8:	e008      	b.n	80060bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80060aa:	f7fe fbd9 	bl	8004860 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d901      	bls.n	80060bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e2dd      	b.n	8006678 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80060bc:	4b20      	ldr	r3, [pc, #128]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0302 	and.w	r3, r3, #2
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1f0      	bne.n	80060aa <HAL_RCC_OscConfig+0x1da>
 80060c8:	e000      	b.n	80060cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80060ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d074      	beq.n	80061c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	2b08      	cmp	r3, #8
 80060dc:	d005      	beq.n	80060ea <HAL_RCC_OscConfig+0x21a>
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	2b0c      	cmp	r3, #12
 80060e2:	d10e      	bne.n	8006102 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	d10b      	bne.n	8006102 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060ea:	4b15      	ldr	r3, [pc, #84]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d064      	beq.n	80061c0 <HAL_RCC_OscConfig+0x2f0>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d160      	bne.n	80061c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e2ba      	b.n	8006678 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800610a:	d106      	bne.n	800611a <HAL_RCC_OscConfig+0x24a>
 800610c:	4b0c      	ldr	r3, [pc, #48]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a0b      	ldr	r2, [pc, #44]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8006112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	e026      	b.n	8006168 <HAL_RCC_OscConfig+0x298>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006122:	d115      	bne.n	8006150 <HAL_RCC_OscConfig+0x280>
 8006124:	4b06      	ldr	r3, [pc, #24]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a05      	ldr	r2, [pc, #20]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 800612a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800612e:	6013      	str	r3, [r2, #0]
 8006130:	4b03      	ldr	r3, [pc, #12]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a02      	ldr	r2, [pc, #8]	; (8006140 <HAL_RCC_OscConfig+0x270>)
 8006136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800613a:	6013      	str	r3, [r2, #0]
 800613c:	e014      	b.n	8006168 <HAL_RCC_OscConfig+0x298>
 800613e:	bf00      	nop
 8006140:	40021000 	.word	0x40021000
 8006144:	0800e950 	.word	0x0800e950
 8006148:	20000018 	.word	0x20000018
 800614c:	2000001c 	.word	0x2000001c
 8006150:	4ba0      	ldr	r3, [pc, #640]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a9f      	ldr	r2, [pc, #636]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 8006156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	4b9d      	ldr	r3, [pc, #628]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a9c      	ldr	r2, [pc, #624]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 8006162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d013      	beq.n	8006198 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006170:	f7fe fb76 	bl	8004860 <HAL_GetTick>
 8006174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006176:	e008      	b.n	800618a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006178:	f7fe fb72 	bl	8004860 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b64      	cmp	r3, #100	; 0x64
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e276      	b.n	8006678 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800618a:	4b92      	ldr	r3, [pc, #584]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0f0      	beq.n	8006178 <HAL_RCC_OscConfig+0x2a8>
 8006196:	e014      	b.n	80061c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006198:	f7fe fb62 	bl	8004860 <HAL_GetTick>
 800619c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800619e:	e008      	b.n	80061b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061a0:	f7fe fb5e 	bl	8004860 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b64      	cmp	r3, #100	; 0x64
 80061ac:	d901      	bls.n	80061b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e262      	b.n	8006678 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061b2:	4b88      	ldr	r3, [pc, #544]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1f0      	bne.n	80061a0 <HAL_RCC_OscConfig+0x2d0>
 80061be:	e000      	b.n	80061c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d060      	beq.n	8006290 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	2b04      	cmp	r3, #4
 80061d2:	d005      	beq.n	80061e0 <HAL_RCC_OscConfig+0x310>
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	2b0c      	cmp	r3, #12
 80061d8:	d119      	bne.n	800620e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d116      	bne.n	800620e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061e0:	4b7c      	ldr	r3, [pc, #496]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d005      	beq.n	80061f8 <HAL_RCC_OscConfig+0x328>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d101      	bne.n	80061f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e23f      	b.n	8006678 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061f8:	4b76      	ldr	r3, [pc, #472]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	061b      	lsls	r3, r3, #24
 8006206:	4973      	ldr	r1, [pc, #460]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 8006208:	4313      	orrs	r3, r2
 800620a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800620c:	e040      	b.n	8006290 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d023      	beq.n	800625e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006216:	4b6f      	ldr	r3, [pc, #444]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a6e      	ldr	r2, [pc, #440]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 800621c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006222:	f7fe fb1d 	bl	8004860 <HAL_GetTick>
 8006226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006228:	e008      	b.n	800623c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800622a:	f7fe fb19 	bl	8004860 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	2b02      	cmp	r3, #2
 8006236:	d901      	bls.n	800623c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e21d      	b.n	8006678 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800623c:	4b65      	ldr	r3, [pc, #404]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0f0      	beq.n	800622a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006248:	4b62      	ldr	r3, [pc, #392]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	061b      	lsls	r3, r3, #24
 8006256:	495f      	ldr	r1, [pc, #380]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 8006258:	4313      	orrs	r3, r2
 800625a:	604b      	str	r3, [r1, #4]
 800625c:	e018      	b.n	8006290 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800625e:	4b5d      	ldr	r3, [pc, #372]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a5c      	ldr	r2, [pc, #368]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 8006264:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006268:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800626a:	f7fe faf9 	bl	8004860 <HAL_GetTick>
 800626e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006270:	e008      	b.n	8006284 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006272:	f7fe faf5 	bl	8004860 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b02      	cmp	r3, #2
 800627e:	d901      	bls.n	8006284 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e1f9      	b.n	8006678 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006284:	4b53      	ldr	r3, [pc, #332]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1f0      	bne.n	8006272 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0308 	and.w	r3, r3, #8
 8006298:	2b00      	cmp	r3, #0
 800629a:	d03c      	beq.n	8006316 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d01c      	beq.n	80062de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062a4:	4b4b      	ldr	r3, [pc, #300]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 80062a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062aa:	4a4a      	ldr	r2, [pc, #296]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 80062ac:	f043 0301 	orr.w	r3, r3, #1
 80062b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b4:	f7fe fad4 	bl	8004860 <HAL_GetTick>
 80062b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062ba:	e008      	b.n	80062ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062bc:	f7fe fad0 	bl	8004860 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d901      	bls.n	80062ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e1d4      	b.n	8006678 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062ce:	4b41      	ldr	r3, [pc, #260]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 80062d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d0ef      	beq.n	80062bc <HAL_RCC_OscConfig+0x3ec>
 80062dc:	e01b      	b.n	8006316 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062de:	4b3d      	ldr	r3, [pc, #244]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 80062e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062e4:	4a3b      	ldr	r2, [pc, #236]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 80062e6:	f023 0301 	bic.w	r3, r3, #1
 80062ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ee:	f7fe fab7 	bl	8004860 <HAL_GetTick>
 80062f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80062f4:	e008      	b.n	8006308 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062f6:	f7fe fab3 	bl	8004860 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d901      	bls.n	8006308 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e1b7      	b.n	8006678 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006308:	4b32      	ldr	r3, [pc, #200]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 800630a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1ef      	bne.n	80062f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0304 	and.w	r3, r3, #4
 800631e:	2b00      	cmp	r3, #0
 8006320:	f000 80a6 	beq.w	8006470 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006324:	2300      	movs	r3, #0
 8006326:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006328:	4b2a      	ldr	r3, [pc, #168]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 800632a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10d      	bne.n	8006350 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006334:	4b27      	ldr	r3, [pc, #156]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 8006336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006338:	4a26      	ldr	r2, [pc, #152]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 800633a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800633e:	6593      	str	r3, [r2, #88]	; 0x58
 8006340:	4b24      	ldr	r3, [pc, #144]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 8006342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006348:	60bb      	str	r3, [r7, #8]
 800634a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800634c:	2301      	movs	r3, #1
 800634e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006350:	4b21      	ldr	r3, [pc, #132]	; (80063d8 <HAL_RCC_OscConfig+0x508>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006358:	2b00      	cmp	r3, #0
 800635a:	d118      	bne.n	800638e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800635c:	4b1e      	ldr	r3, [pc, #120]	; (80063d8 <HAL_RCC_OscConfig+0x508>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a1d      	ldr	r2, [pc, #116]	; (80063d8 <HAL_RCC_OscConfig+0x508>)
 8006362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006366:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006368:	f7fe fa7a 	bl	8004860 <HAL_GetTick>
 800636c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800636e:	e008      	b.n	8006382 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006370:	f7fe fa76 	bl	8004860 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	2b02      	cmp	r3, #2
 800637c:	d901      	bls.n	8006382 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e17a      	b.n	8006678 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006382:	4b15      	ldr	r3, [pc, #84]	; (80063d8 <HAL_RCC_OscConfig+0x508>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800638a:	2b00      	cmp	r3, #0
 800638c:	d0f0      	beq.n	8006370 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d108      	bne.n	80063a8 <HAL_RCC_OscConfig+0x4d8>
 8006396:	4b0f      	ldr	r3, [pc, #60]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 8006398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800639c:	4a0d      	ldr	r2, [pc, #52]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 800639e:	f043 0301 	orr.w	r3, r3, #1
 80063a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80063a6:	e029      	b.n	80063fc <HAL_RCC_OscConfig+0x52c>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	2b05      	cmp	r3, #5
 80063ae:	d115      	bne.n	80063dc <HAL_RCC_OscConfig+0x50c>
 80063b0:	4b08      	ldr	r3, [pc, #32]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 80063b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063b6:	4a07      	ldr	r2, [pc, #28]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 80063b8:	f043 0304 	orr.w	r3, r3, #4
 80063bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80063c0:	4b04      	ldr	r3, [pc, #16]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 80063c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c6:	4a03      	ldr	r2, [pc, #12]	; (80063d4 <HAL_RCC_OscConfig+0x504>)
 80063c8:	f043 0301 	orr.w	r3, r3, #1
 80063cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80063d0:	e014      	b.n	80063fc <HAL_RCC_OscConfig+0x52c>
 80063d2:	bf00      	nop
 80063d4:	40021000 	.word	0x40021000
 80063d8:	40007000 	.word	0x40007000
 80063dc:	4b9c      	ldr	r3, [pc, #624]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 80063de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e2:	4a9b      	ldr	r2, [pc, #620]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 80063e4:	f023 0301 	bic.w	r3, r3, #1
 80063e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80063ec:	4b98      	ldr	r3, [pc, #608]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 80063ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f2:	4a97      	ldr	r2, [pc, #604]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 80063f4:	f023 0304 	bic.w	r3, r3, #4
 80063f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d016      	beq.n	8006432 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006404:	f7fe fa2c 	bl	8004860 <HAL_GetTick>
 8006408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800640a:	e00a      	b.n	8006422 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800640c:	f7fe fa28 	bl	8004860 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	f241 3288 	movw	r2, #5000	; 0x1388
 800641a:	4293      	cmp	r3, r2
 800641c:	d901      	bls.n	8006422 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e12a      	b.n	8006678 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006422:	4b8b      	ldr	r3, [pc, #556]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 8006424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d0ed      	beq.n	800640c <HAL_RCC_OscConfig+0x53c>
 8006430:	e015      	b.n	800645e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006432:	f7fe fa15 	bl	8004860 <HAL_GetTick>
 8006436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006438:	e00a      	b.n	8006450 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800643a:	f7fe fa11 	bl	8004860 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	f241 3288 	movw	r2, #5000	; 0x1388
 8006448:	4293      	cmp	r3, r2
 800644a:	d901      	bls.n	8006450 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e113      	b.n	8006678 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006450:	4b7f      	ldr	r3, [pc, #508]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 8006452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1ed      	bne.n	800643a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800645e:	7ffb      	ldrb	r3, [r7, #31]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d105      	bne.n	8006470 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006464:	4b7a      	ldr	r3, [pc, #488]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 8006466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006468:	4a79      	ldr	r2, [pc, #484]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 800646a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800646e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 80fe 	beq.w	8006676 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647e:	2b02      	cmp	r3, #2
 8006480:	f040 80d0 	bne.w	8006624 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006484:	4b72      	ldr	r3, [pc, #456]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f003 0203 	and.w	r2, r3, #3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006494:	429a      	cmp	r2, r3
 8006496:	d130      	bne.n	80064fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a2:	3b01      	subs	r3, #1
 80064a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d127      	bne.n	80064fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d11f      	bne.n	80064fa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80064c4:	2a07      	cmp	r2, #7
 80064c6:	bf14      	ite	ne
 80064c8:	2201      	movne	r2, #1
 80064ca:	2200      	moveq	r2, #0
 80064cc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d113      	bne.n	80064fa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064dc:	085b      	lsrs	r3, r3, #1
 80064de:	3b01      	subs	r3, #1
 80064e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d109      	bne.n	80064fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f0:	085b      	lsrs	r3, r3, #1
 80064f2:	3b01      	subs	r3, #1
 80064f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d06e      	beq.n	80065d8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	2b0c      	cmp	r3, #12
 80064fe:	d069      	beq.n	80065d4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006500:	4b53      	ldr	r3, [pc, #332]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d105      	bne.n	8006518 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800650c:	4b50      	ldr	r3, [pc, #320]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e0ad      	b.n	8006678 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800651c:	4b4c      	ldr	r3, [pc, #304]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a4b      	ldr	r2, [pc, #300]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 8006522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006526:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006528:	f7fe f99a 	bl	8004860 <HAL_GetTick>
 800652c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800652e:	e008      	b.n	8006542 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006530:	f7fe f996 	bl	8004860 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e09a      	b.n	8006678 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006542:	4b43      	ldr	r3, [pc, #268]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1f0      	bne.n	8006530 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800654e:	4b40      	ldr	r3, [pc, #256]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 8006550:	68da      	ldr	r2, [r3, #12]
 8006552:	4b40      	ldr	r3, [pc, #256]	; (8006654 <HAL_RCC_OscConfig+0x784>)
 8006554:	4013      	ands	r3, r2
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800655e:	3a01      	subs	r2, #1
 8006560:	0112      	lsls	r2, r2, #4
 8006562:	4311      	orrs	r1, r2
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006568:	0212      	lsls	r2, r2, #8
 800656a:	4311      	orrs	r1, r2
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006570:	0852      	lsrs	r2, r2, #1
 8006572:	3a01      	subs	r2, #1
 8006574:	0552      	lsls	r2, r2, #21
 8006576:	4311      	orrs	r1, r2
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800657c:	0852      	lsrs	r2, r2, #1
 800657e:	3a01      	subs	r2, #1
 8006580:	0652      	lsls	r2, r2, #25
 8006582:	4311      	orrs	r1, r2
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006588:	0912      	lsrs	r2, r2, #4
 800658a:	0452      	lsls	r2, r2, #17
 800658c:	430a      	orrs	r2, r1
 800658e:	4930      	ldr	r1, [pc, #192]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 8006590:	4313      	orrs	r3, r2
 8006592:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006594:	4b2e      	ldr	r3, [pc, #184]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a2d      	ldr	r2, [pc, #180]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 800659a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800659e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80065a0:	4b2b      	ldr	r3, [pc, #172]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	4a2a      	ldr	r2, [pc, #168]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 80065a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80065ac:	f7fe f958 	bl	8004860 <HAL_GetTick>
 80065b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065b2:	e008      	b.n	80065c6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065b4:	f7fe f954 	bl	8004860 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e058      	b.n	8006678 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065c6:	4b22      	ldr	r3, [pc, #136]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0f0      	beq.n	80065b4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80065d2:	e050      	b.n	8006676 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e04f      	b.n	8006678 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065d8:	4b1d      	ldr	r3, [pc, #116]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d148      	bne.n	8006676 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80065e4:	4b1a      	ldr	r3, [pc, #104]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a19      	ldr	r2, [pc, #100]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 80065ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80065f0:	4b17      	ldr	r3, [pc, #92]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	4a16      	ldr	r2, [pc, #88]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 80065f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80065fc:	f7fe f930 	bl	8004860 <HAL_GetTick>
 8006600:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006602:	e008      	b.n	8006616 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006604:	f7fe f92c 	bl	8004860 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b02      	cmp	r3, #2
 8006610:	d901      	bls.n	8006616 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e030      	b.n	8006678 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006616:	4b0e      	ldr	r3, [pc, #56]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0f0      	beq.n	8006604 <HAL_RCC_OscConfig+0x734>
 8006622:	e028      	b.n	8006676 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	2b0c      	cmp	r3, #12
 8006628:	d023      	beq.n	8006672 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800662a:	4b09      	ldr	r3, [pc, #36]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a08      	ldr	r2, [pc, #32]	; (8006650 <HAL_RCC_OscConfig+0x780>)
 8006630:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006636:	f7fe f913 	bl	8004860 <HAL_GetTick>
 800663a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800663c:	e00c      	b.n	8006658 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800663e:	f7fe f90f 	bl	8004860 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b02      	cmp	r3, #2
 800664a:	d905      	bls.n	8006658 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e013      	b.n	8006678 <HAL_RCC_OscConfig+0x7a8>
 8006650:	40021000 	.word	0x40021000
 8006654:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006658:	4b09      	ldr	r3, [pc, #36]	; (8006680 <HAL_RCC_OscConfig+0x7b0>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1ec      	bne.n	800663e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006664:	4b06      	ldr	r3, [pc, #24]	; (8006680 <HAL_RCC_OscConfig+0x7b0>)
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	4905      	ldr	r1, [pc, #20]	; (8006680 <HAL_RCC_OscConfig+0x7b0>)
 800666a:	4b06      	ldr	r3, [pc, #24]	; (8006684 <HAL_RCC_OscConfig+0x7b4>)
 800666c:	4013      	ands	r3, r2
 800666e:	60cb      	str	r3, [r1, #12]
 8006670:	e001      	b.n	8006676 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e000      	b.n	8006678 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3720      	adds	r7, #32
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	40021000 	.word	0x40021000
 8006684:	feeefffc 	.word	0xfeeefffc

08006688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e0e7      	b.n	800686c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800669c:	4b75      	ldr	r3, [pc, #468]	; (8006874 <HAL_RCC_ClockConfig+0x1ec>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0307 	and.w	r3, r3, #7
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d910      	bls.n	80066cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066aa:	4b72      	ldr	r3, [pc, #456]	; (8006874 <HAL_RCC_ClockConfig+0x1ec>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f023 0207 	bic.w	r2, r3, #7
 80066b2:	4970      	ldr	r1, [pc, #448]	; (8006874 <HAL_RCC_ClockConfig+0x1ec>)
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ba:	4b6e      	ldr	r3, [pc, #440]	; (8006874 <HAL_RCC_ClockConfig+0x1ec>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0307 	and.w	r3, r3, #7
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d001      	beq.n	80066cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e0cf      	b.n	800686c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0302 	and.w	r3, r3, #2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d010      	beq.n	80066fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689a      	ldr	r2, [r3, #8]
 80066dc:	4b66      	ldr	r3, [pc, #408]	; (8006878 <HAL_RCC_ClockConfig+0x1f0>)
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d908      	bls.n	80066fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066e8:	4b63      	ldr	r3, [pc, #396]	; (8006878 <HAL_RCC_ClockConfig+0x1f0>)
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	4960      	ldr	r1, [pc, #384]	; (8006878 <HAL_RCC_ClockConfig+0x1f0>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	2b00      	cmp	r3, #0
 8006704:	d04c      	beq.n	80067a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	2b03      	cmp	r3, #3
 800670c:	d107      	bne.n	800671e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800670e:	4b5a      	ldr	r3, [pc, #360]	; (8006878 <HAL_RCC_ClockConfig+0x1f0>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d121      	bne.n	800675e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e0a6      	b.n	800686c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	2b02      	cmp	r3, #2
 8006724:	d107      	bne.n	8006736 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006726:	4b54      	ldr	r3, [pc, #336]	; (8006878 <HAL_RCC_ClockConfig+0x1f0>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d115      	bne.n	800675e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e09a      	b.n	800686c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d107      	bne.n	800674e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800673e:	4b4e      	ldr	r3, [pc, #312]	; (8006878 <HAL_RCC_ClockConfig+0x1f0>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d109      	bne.n	800675e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e08e      	b.n	800686c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800674e:	4b4a      	ldr	r3, [pc, #296]	; (8006878 <HAL_RCC_ClockConfig+0x1f0>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e086      	b.n	800686c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800675e:	4b46      	ldr	r3, [pc, #280]	; (8006878 <HAL_RCC_ClockConfig+0x1f0>)
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f023 0203 	bic.w	r2, r3, #3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	4943      	ldr	r1, [pc, #268]	; (8006878 <HAL_RCC_ClockConfig+0x1f0>)
 800676c:	4313      	orrs	r3, r2
 800676e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006770:	f7fe f876 	bl	8004860 <HAL_GetTick>
 8006774:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006776:	e00a      	b.n	800678e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006778:	f7fe f872 	bl	8004860 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	f241 3288 	movw	r2, #5000	; 0x1388
 8006786:	4293      	cmp	r3, r2
 8006788:	d901      	bls.n	800678e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e06e      	b.n	800686c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800678e:	4b3a      	ldr	r3, [pc, #232]	; (8006878 <HAL_RCC_ClockConfig+0x1f0>)
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f003 020c 	and.w	r2, r3, #12
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	429a      	cmp	r2, r3
 800679e:	d1eb      	bne.n	8006778 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0302 	and.w	r3, r3, #2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d010      	beq.n	80067ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689a      	ldr	r2, [r3, #8]
 80067b0:	4b31      	ldr	r3, [pc, #196]	; (8006878 <HAL_RCC_ClockConfig+0x1f0>)
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d208      	bcs.n	80067ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067bc:	4b2e      	ldr	r3, [pc, #184]	; (8006878 <HAL_RCC_ClockConfig+0x1f0>)
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	492b      	ldr	r1, [pc, #172]	; (8006878 <HAL_RCC_ClockConfig+0x1f0>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067ce:	4b29      	ldr	r3, [pc, #164]	; (8006874 <HAL_RCC_ClockConfig+0x1ec>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0307 	and.w	r3, r3, #7
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d210      	bcs.n	80067fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067dc:	4b25      	ldr	r3, [pc, #148]	; (8006874 <HAL_RCC_ClockConfig+0x1ec>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f023 0207 	bic.w	r2, r3, #7
 80067e4:	4923      	ldr	r1, [pc, #140]	; (8006874 <HAL_RCC_ClockConfig+0x1ec>)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ec:	4b21      	ldr	r3, [pc, #132]	; (8006874 <HAL_RCC_ClockConfig+0x1ec>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0307 	and.w	r3, r3, #7
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d001      	beq.n	80067fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e036      	b.n	800686c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0304 	and.w	r3, r3, #4
 8006806:	2b00      	cmp	r3, #0
 8006808:	d008      	beq.n	800681c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800680a:	4b1b      	ldr	r3, [pc, #108]	; (8006878 <HAL_RCC_ClockConfig+0x1f0>)
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	4918      	ldr	r1, [pc, #96]	; (8006878 <HAL_RCC_ClockConfig+0x1f0>)
 8006818:	4313      	orrs	r3, r2
 800681a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0308 	and.w	r3, r3, #8
 8006824:	2b00      	cmp	r3, #0
 8006826:	d009      	beq.n	800683c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006828:	4b13      	ldr	r3, [pc, #76]	; (8006878 <HAL_RCC_ClockConfig+0x1f0>)
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	00db      	lsls	r3, r3, #3
 8006836:	4910      	ldr	r1, [pc, #64]	; (8006878 <HAL_RCC_ClockConfig+0x1f0>)
 8006838:	4313      	orrs	r3, r2
 800683a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800683c:	f000 f824 	bl	8006888 <HAL_RCC_GetSysClockFreq>
 8006840:	4602      	mov	r2, r0
 8006842:	4b0d      	ldr	r3, [pc, #52]	; (8006878 <HAL_RCC_ClockConfig+0x1f0>)
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	091b      	lsrs	r3, r3, #4
 8006848:	f003 030f 	and.w	r3, r3, #15
 800684c:	490b      	ldr	r1, [pc, #44]	; (800687c <HAL_RCC_ClockConfig+0x1f4>)
 800684e:	5ccb      	ldrb	r3, [r1, r3]
 8006850:	f003 031f 	and.w	r3, r3, #31
 8006854:	fa22 f303 	lsr.w	r3, r2, r3
 8006858:	4a09      	ldr	r2, [pc, #36]	; (8006880 <HAL_RCC_ClockConfig+0x1f8>)
 800685a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800685c:	4b09      	ldr	r3, [pc, #36]	; (8006884 <HAL_RCC_ClockConfig+0x1fc>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4618      	mov	r0, r3
 8006862:	f7fd ffad 	bl	80047c0 <HAL_InitTick>
 8006866:	4603      	mov	r3, r0
 8006868:	72fb      	strb	r3, [r7, #11]

  return status;
 800686a:	7afb      	ldrb	r3, [r7, #11]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	40022000 	.word	0x40022000
 8006878:	40021000 	.word	0x40021000
 800687c:	0800e950 	.word	0x0800e950
 8006880:	20000018 	.word	0x20000018
 8006884:	2000001c 	.word	0x2000001c

08006888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006888:	b480      	push	{r7}
 800688a:	b089      	sub	sp, #36	; 0x24
 800688c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800688e:	2300      	movs	r3, #0
 8006890:	61fb      	str	r3, [r7, #28]
 8006892:	2300      	movs	r3, #0
 8006894:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006896:	4b3e      	ldr	r3, [pc, #248]	; (8006990 <HAL_RCC_GetSysClockFreq+0x108>)
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f003 030c 	and.w	r3, r3, #12
 800689e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068a0:	4b3b      	ldr	r3, [pc, #236]	; (8006990 <HAL_RCC_GetSysClockFreq+0x108>)
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f003 0303 	and.w	r3, r3, #3
 80068a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d005      	beq.n	80068bc <HAL_RCC_GetSysClockFreq+0x34>
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	2b0c      	cmp	r3, #12
 80068b4:	d121      	bne.n	80068fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d11e      	bne.n	80068fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80068bc:	4b34      	ldr	r3, [pc, #208]	; (8006990 <HAL_RCC_GetSysClockFreq+0x108>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0308 	and.w	r3, r3, #8
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d107      	bne.n	80068d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80068c8:	4b31      	ldr	r3, [pc, #196]	; (8006990 <HAL_RCC_GetSysClockFreq+0x108>)
 80068ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068ce:	0a1b      	lsrs	r3, r3, #8
 80068d0:	f003 030f 	and.w	r3, r3, #15
 80068d4:	61fb      	str	r3, [r7, #28]
 80068d6:	e005      	b.n	80068e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80068d8:	4b2d      	ldr	r3, [pc, #180]	; (8006990 <HAL_RCC_GetSysClockFreq+0x108>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	091b      	lsrs	r3, r3, #4
 80068de:	f003 030f 	and.w	r3, r3, #15
 80068e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80068e4:	4a2b      	ldr	r2, [pc, #172]	; (8006994 <HAL_RCC_GetSysClockFreq+0x10c>)
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10d      	bne.n	8006910 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80068f8:	e00a      	b.n	8006910 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	d102      	bne.n	8006906 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006900:	4b25      	ldr	r3, [pc, #148]	; (8006998 <HAL_RCC_GetSysClockFreq+0x110>)
 8006902:	61bb      	str	r3, [r7, #24]
 8006904:	e004      	b.n	8006910 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	2b08      	cmp	r3, #8
 800690a:	d101      	bne.n	8006910 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800690c:	4b23      	ldr	r3, [pc, #140]	; (800699c <HAL_RCC_GetSysClockFreq+0x114>)
 800690e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	2b0c      	cmp	r3, #12
 8006914:	d134      	bne.n	8006980 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006916:	4b1e      	ldr	r3, [pc, #120]	; (8006990 <HAL_RCC_GetSysClockFreq+0x108>)
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	f003 0303 	and.w	r3, r3, #3
 800691e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2b02      	cmp	r3, #2
 8006924:	d003      	beq.n	800692e <HAL_RCC_GetSysClockFreq+0xa6>
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2b03      	cmp	r3, #3
 800692a:	d003      	beq.n	8006934 <HAL_RCC_GetSysClockFreq+0xac>
 800692c:	e005      	b.n	800693a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800692e:	4b1a      	ldr	r3, [pc, #104]	; (8006998 <HAL_RCC_GetSysClockFreq+0x110>)
 8006930:	617b      	str	r3, [r7, #20]
      break;
 8006932:	e005      	b.n	8006940 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006934:	4b19      	ldr	r3, [pc, #100]	; (800699c <HAL_RCC_GetSysClockFreq+0x114>)
 8006936:	617b      	str	r3, [r7, #20]
      break;
 8006938:	e002      	b.n	8006940 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	617b      	str	r3, [r7, #20]
      break;
 800693e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006940:	4b13      	ldr	r3, [pc, #76]	; (8006990 <HAL_RCC_GetSysClockFreq+0x108>)
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	091b      	lsrs	r3, r3, #4
 8006946:	f003 0307 	and.w	r3, r3, #7
 800694a:	3301      	adds	r3, #1
 800694c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800694e:	4b10      	ldr	r3, [pc, #64]	; (8006990 <HAL_RCC_GetSysClockFreq+0x108>)
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	0a1b      	lsrs	r3, r3, #8
 8006954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	fb03 f202 	mul.w	r2, r3, r2
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	fbb2 f3f3 	udiv	r3, r2, r3
 8006964:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006966:	4b0a      	ldr	r3, [pc, #40]	; (8006990 <HAL_RCC_GetSysClockFreq+0x108>)
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	0e5b      	lsrs	r3, r3, #25
 800696c:	f003 0303 	and.w	r3, r3, #3
 8006970:	3301      	adds	r3, #1
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	fbb2 f3f3 	udiv	r3, r2, r3
 800697e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006980:	69bb      	ldr	r3, [r7, #24]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3724      	adds	r7, #36	; 0x24
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	40021000 	.word	0x40021000
 8006994:	0800e968 	.word	0x0800e968
 8006998:	00f42400 	.word	0x00f42400
 800699c:	007a1200 	.word	0x007a1200

080069a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069a4:	4b03      	ldr	r3, [pc, #12]	; (80069b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80069a6:	681b      	ldr	r3, [r3, #0]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	20000018 	.word	0x20000018

080069b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80069bc:	f7ff fff0 	bl	80069a0 <HAL_RCC_GetHCLKFreq>
 80069c0:	4602      	mov	r2, r0
 80069c2:	4b06      	ldr	r3, [pc, #24]	; (80069dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	0a1b      	lsrs	r3, r3, #8
 80069c8:	f003 0307 	and.w	r3, r3, #7
 80069cc:	4904      	ldr	r1, [pc, #16]	; (80069e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80069ce:	5ccb      	ldrb	r3, [r1, r3]
 80069d0:	f003 031f 	and.w	r3, r3, #31
 80069d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069d8:	4618      	mov	r0, r3
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	40021000 	.word	0x40021000
 80069e0:	0800e960 	.word	0x0800e960

080069e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80069e8:	f7ff ffda 	bl	80069a0 <HAL_RCC_GetHCLKFreq>
 80069ec:	4602      	mov	r2, r0
 80069ee:	4b06      	ldr	r3, [pc, #24]	; (8006a08 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	0adb      	lsrs	r3, r3, #11
 80069f4:	f003 0307 	and.w	r3, r3, #7
 80069f8:	4904      	ldr	r1, [pc, #16]	; (8006a0c <HAL_RCC_GetPCLK2Freq+0x28>)
 80069fa:	5ccb      	ldrb	r3, [r1, r3]
 80069fc:	f003 031f 	and.w	r3, r3, #31
 8006a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	40021000 	.word	0x40021000
 8006a0c:	0800e960 	.word	0x0800e960

08006a10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006a18:	2300      	movs	r3, #0
 8006a1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006a1c:	4b2a      	ldr	r3, [pc, #168]	; (8006ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d003      	beq.n	8006a30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006a28:	f7ff f9ee 	bl	8005e08 <HAL_PWREx_GetVoltageRange>
 8006a2c:	6178      	str	r0, [r7, #20]
 8006a2e:	e014      	b.n	8006a5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a30:	4b25      	ldr	r3, [pc, #148]	; (8006ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a34:	4a24      	ldr	r2, [pc, #144]	; (8006ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a3a:	6593      	str	r3, [r2, #88]	; 0x58
 8006a3c:	4b22      	ldr	r3, [pc, #136]	; (8006ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a44:	60fb      	str	r3, [r7, #12]
 8006a46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006a48:	f7ff f9de 	bl	8005e08 <HAL_PWREx_GetVoltageRange>
 8006a4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006a4e:	4b1e      	ldr	r3, [pc, #120]	; (8006ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a52:	4a1d      	ldr	r2, [pc, #116]	; (8006ac8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a60:	d10b      	bne.n	8006a7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b80      	cmp	r3, #128	; 0x80
 8006a66:	d919      	bls.n	8006a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2ba0      	cmp	r3, #160	; 0xa0
 8006a6c:	d902      	bls.n	8006a74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006a6e:	2302      	movs	r3, #2
 8006a70:	613b      	str	r3, [r7, #16]
 8006a72:	e013      	b.n	8006a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006a74:	2301      	movs	r3, #1
 8006a76:	613b      	str	r3, [r7, #16]
 8006a78:	e010      	b.n	8006a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b80      	cmp	r3, #128	; 0x80
 8006a7e:	d902      	bls.n	8006a86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006a80:	2303      	movs	r3, #3
 8006a82:	613b      	str	r3, [r7, #16]
 8006a84:	e00a      	b.n	8006a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b80      	cmp	r3, #128	; 0x80
 8006a8a:	d102      	bne.n	8006a92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	613b      	str	r3, [r7, #16]
 8006a90:	e004      	b.n	8006a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2b70      	cmp	r3, #112	; 0x70
 8006a96:	d101      	bne.n	8006a9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006a98:	2301      	movs	r3, #1
 8006a9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006a9c:	4b0b      	ldr	r3, [pc, #44]	; (8006acc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f023 0207 	bic.w	r2, r3, #7
 8006aa4:	4909      	ldr	r1, [pc, #36]	; (8006acc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006aac:	4b07      	ldr	r3, [pc, #28]	; (8006acc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0307 	and.w	r3, r3, #7
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d001      	beq.n	8006abe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e000      	b.n	8006ac0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3718      	adds	r7, #24
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	40021000 	.word	0x40021000
 8006acc:	40022000 	.word	0x40022000

08006ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ad8:	2300      	movs	r3, #0
 8006ada:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006adc:	2300      	movs	r3, #0
 8006ade:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d041      	beq.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006af0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006af4:	d02a      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006af6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006afa:	d824      	bhi.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006afc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b00:	d008      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006b02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b06:	d81e      	bhi.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00a      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006b0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b10:	d010      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006b12:	e018      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006b14:	4b86      	ldr	r3, [pc, #536]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	4a85      	ldr	r2, [pc, #532]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b1e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006b20:	e015      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	3304      	adds	r3, #4
 8006b26:	2100      	movs	r1, #0
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 fabb 	bl	80070a4 <RCCEx_PLLSAI1_Config>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006b32:	e00c      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	3320      	adds	r3, #32
 8006b38:	2100      	movs	r1, #0
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 fba6 	bl	800728c <RCCEx_PLLSAI2_Config>
 8006b40:	4603      	mov	r3, r0
 8006b42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006b44:	e003      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	74fb      	strb	r3, [r7, #19]
      break;
 8006b4a:	e000      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006b4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b4e:	7cfb      	ldrb	r3, [r7, #19]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10b      	bne.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b54:	4b76      	ldr	r3, [pc, #472]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b62:	4973      	ldr	r1, [pc, #460]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b64:	4313      	orrs	r3, r2
 8006b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006b6a:	e001      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6c:	7cfb      	ldrb	r3, [r7, #19]
 8006b6e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d041      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b84:	d02a      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006b86:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b8a:	d824      	bhi.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006b8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b90:	d008      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006b92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b96:	d81e      	bhi.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00a      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ba0:	d010      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006ba2:	e018      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006ba4:	4b62      	ldr	r3, [pc, #392]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	4a61      	ldr	r2, [pc, #388]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006bb0:	e015      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	2100      	movs	r1, #0
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f000 fa73 	bl	80070a4 <RCCEx_PLLSAI1_Config>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006bc2:	e00c      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	3320      	adds	r3, #32
 8006bc8:	2100      	movs	r1, #0
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 fb5e 	bl	800728c <RCCEx_PLLSAI2_Config>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006bd4:	e003      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	74fb      	strb	r3, [r7, #19]
      break;
 8006bda:	e000      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006bdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bde:	7cfb      	ldrb	r3, [r7, #19]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10b      	bne.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006be4:	4b52      	ldr	r3, [pc, #328]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bf2:	494f      	ldr	r1, [pc, #316]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006bfa:	e001      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bfc:	7cfb      	ldrb	r3, [r7, #19]
 8006bfe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 80a0 	beq.w	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006c12:	4b47      	ldr	r3, [pc, #284]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e000      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006c22:	2300      	movs	r3, #0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00d      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c28:	4b41      	ldr	r3, [pc, #260]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c2c:	4a40      	ldr	r2, [pc, #256]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c32:	6593      	str	r3, [r2, #88]	; 0x58
 8006c34:	4b3e      	ldr	r3, [pc, #248]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c3c:	60bb      	str	r3, [r7, #8]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c40:	2301      	movs	r3, #1
 8006c42:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c44:	4b3b      	ldr	r3, [pc, #236]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a3a      	ldr	r2, [pc, #232]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c50:	f7fd fe06 	bl	8004860 <HAL_GetTick>
 8006c54:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006c56:	e009      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c58:	f7fd fe02 	bl	8004860 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d902      	bls.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	74fb      	strb	r3, [r7, #19]
        break;
 8006c6a:	e005      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006c6c:	4b31      	ldr	r3, [pc, #196]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d0ef      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006c78:	7cfb      	ldrb	r3, [r7, #19]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d15c      	bne.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006c7e:	4b2c      	ldr	r3, [pc, #176]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c88:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d01f      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d019      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006c9c:	4b24      	ldr	r3, [pc, #144]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ca6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ca8:	4b21      	ldr	r3, [pc, #132]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cae:	4a20      	ldr	r2, [pc, #128]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006cb8:	4b1d      	ldr	r3, [pc, #116]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cbe:	4a1c      	ldr	r2, [pc, #112]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006cc8:	4a19      	ldr	r2, [pc, #100]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d016      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cda:	f7fd fdc1 	bl	8004860 <HAL_GetTick>
 8006cde:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ce0:	e00b      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ce2:	f7fd fdbd 	bl	8004860 <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d902      	bls.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	74fb      	strb	r3, [r7, #19]
            break;
 8006cf8:	e006      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cfa:	4b0d      	ldr	r3, [pc, #52]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d00:	f003 0302 	and.w	r3, r3, #2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d0ec      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006d08:	7cfb      	ldrb	r3, [r7, #19]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10c      	bne.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d0e:	4b08      	ldr	r3, [pc, #32]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d1e:	4904      	ldr	r1, [pc, #16]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006d26:	e009      	b.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d28:	7cfb      	ldrb	r3, [r7, #19]
 8006d2a:	74bb      	strb	r3, [r7, #18]
 8006d2c:	e006      	b.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006d2e:	bf00      	nop
 8006d30:	40021000 	.word	0x40021000
 8006d34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d38:	7cfb      	ldrb	r3, [r7, #19]
 8006d3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d3c:	7c7b      	ldrb	r3, [r7, #17]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d105      	bne.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d42:	4b9e      	ldr	r3, [pc, #632]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d46:	4a9d      	ldr	r2, [pc, #628]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00a      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d5a:	4b98      	ldr	r3, [pc, #608]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d60:	f023 0203 	bic.w	r2, r3, #3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d68:	4994      	ldr	r1, [pc, #592]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0302 	and.w	r3, r3, #2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d7c:	4b8f      	ldr	r3, [pc, #572]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d82:	f023 020c 	bic.w	r2, r3, #12
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8a:	498c      	ldr	r1, [pc, #560]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0304 	and.w	r3, r3, #4
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00a      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006d9e:	4b87      	ldr	r3, [pc, #540]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006da4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dac:	4983      	ldr	r1, [pc, #524]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0308 	and.w	r3, r3, #8
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00a      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006dc0:	4b7e      	ldr	r3, [pc, #504]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dce:	497b      	ldr	r1, [pc, #492]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0310 	and.w	r3, r3, #16
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00a      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006de2:	4b76      	ldr	r3, [pc, #472]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006df0:	4972      	ldr	r1, [pc, #456]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0320 	and.w	r3, r3, #32
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00a      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e04:	4b6d      	ldr	r3, [pc, #436]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e12:	496a      	ldr	r1, [pc, #424]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00a      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e26:	4b65      	ldr	r3, [pc, #404]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e34:	4961      	ldr	r1, [pc, #388]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00a      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e48:	4b5c      	ldr	r3, [pc, #368]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e56:	4959      	ldr	r1, [pc, #356]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00a      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e6a:	4b54      	ldr	r3, [pc, #336]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e70:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e78:	4950      	ldr	r1, [pc, #320]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00a      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e8c:	4b4b      	ldr	r3, [pc, #300]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e92:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9a:	4948      	ldr	r1, [pc, #288]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006eae:	4b43      	ldr	r3, [pc, #268]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ebc:	493f      	ldr	r1, [pc, #252]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d028      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ed0:	4b3a      	ldr	r3, [pc, #232]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ed6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ede:	4937      	ldr	r1, [pc, #220]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006eee:	d106      	bne.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ef0:	4b32      	ldr	r3, [pc, #200]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	4a31      	ldr	r2, [pc, #196]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ef6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006efa:	60d3      	str	r3, [r2, #12]
 8006efc:	e011      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f06:	d10c      	bne.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 f8c8 	bl	80070a4 <RCCEx_PLLSAI1_Config>
 8006f14:	4603      	mov	r3, r0
 8006f16:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006f18:	7cfb      	ldrb	r3, [r7, #19]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d001      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006f1e:	7cfb      	ldrb	r3, [r7, #19]
 8006f20:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d028      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006f2e:	4b23      	ldr	r3, [pc, #140]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3c:	491f      	ldr	r1, [pc, #124]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f4c:	d106      	bne.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f4e:	4b1b      	ldr	r3, [pc, #108]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	4a1a      	ldr	r2, [pc, #104]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f58:	60d3      	str	r3, [r2, #12]
 8006f5a:	e011      	b.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f64:	d10c      	bne.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	2101      	movs	r1, #1
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 f899 	bl	80070a4 <RCCEx_PLLSAI1_Config>
 8006f72:	4603      	mov	r3, r0
 8006f74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006f76:	7cfb      	ldrb	r3, [r7, #19]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d001      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006f7c:	7cfb      	ldrb	r3, [r7, #19]
 8006f7e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d02b      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f8c:	4b0b      	ldr	r3, [pc, #44]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f9a:	4908      	ldr	r1, [pc, #32]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006faa:	d109      	bne.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fac:	4b03      	ldr	r3, [pc, #12]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	4a02      	ldr	r2, [pc, #8]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fb6:	60d3      	str	r3, [r2, #12]
 8006fb8:	e014      	b.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006fba:	bf00      	nop
 8006fbc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fc8:	d10c      	bne.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	3304      	adds	r3, #4
 8006fce:	2101      	movs	r1, #1
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f000 f867 	bl	80070a4 <RCCEx_PLLSAI1_Config>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006fda:	7cfb      	ldrb	r3, [r7, #19]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d001      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006fe0:	7cfb      	ldrb	r3, [r7, #19]
 8006fe2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d02f      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ff0:	4b2b      	ldr	r3, [pc, #172]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ffe:	4928      	ldr	r1, [pc, #160]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007000:	4313      	orrs	r3, r2
 8007002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800700a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800700e:	d10d      	bne.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3304      	adds	r3, #4
 8007014:	2102      	movs	r1, #2
 8007016:	4618      	mov	r0, r3
 8007018:	f000 f844 	bl	80070a4 <RCCEx_PLLSAI1_Config>
 800701c:	4603      	mov	r3, r0
 800701e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007020:	7cfb      	ldrb	r3, [r7, #19]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d014      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007026:	7cfb      	ldrb	r3, [r7, #19]
 8007028:	74bb      	strb	r3, [r7, #18]
 800702a:	e011      	b.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007034:	d10c      	bne.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	3320      	adds	r3, #32
 800703a:	2102      	movs	r1, #2
 800703c:	4618      	mov	r0, r3
 800703e:	f000 f925 	bl	800728c <RCCEx_PLLSAI2_Config>
 8007042:	4603      	mov	r3, r0
 8007044:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007046:	7cfb      	ldrb	r3, [r7, #19]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800704c:	7cfb      	ldrb	r3, [r7, #19]
 800704e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00a      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800705c:	4b10      	ldr	r3, [pc, #64]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800705e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007062:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800706a:	490d      	ldr	r1, [pc, #52]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800706c:	4313      	orrs	r3, r2
 800706e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00b      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800707e:	4b08      	ldr	r3, [pc, #32]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007084:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800708e:	4904      	ldr	r1, [pc, #16]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007090:	4313      	orrs	r3, r2
 8007092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007096:	7cbb      	ldrb	r3, [r7, #18]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	40021000 	.word	0x40021000

080070a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80070b2:	4b75      	ldr	r3, [pc, #468]	; (8007288 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	f003 0303 	and.w	r3, r3, #3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d018      	beq.n	80070f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80070be:	4b72      	ldr	r3, [pc, #456]	; (8007288 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	f003 0203 	and.w	r2, r3, #3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d10d      	bne.n	80070ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
       ||
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d009      	beq.n	80070ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80070d6:	4b6c      	ldr	r3, [pc, #432]	; (8007288 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	091b      	lsrs	r3, r3, #4
 80070dc:	f003 0307 	and.w	r3, r3, #7
 80070e0:	1c5a      	adds	r2, r3, #1
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
       ||
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d047      	beq.n	800717a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	73fb      	strb	r3, [r7, #15]
 80070ee:	e044      	b.n	800717a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b03      	cmp	r3, #3
 80070f6:	d018      	beq.n	800712a <RCCEx_PLLSAI1_Config+0x86>
 80070f8:	2b03      	cmp	r3, #3
 80070fa:	d825      	bhi.n	8007148 <RCCEx_PLLSAI1_Config+0xa4>
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d002      	beq.n	8007106 <RCCEx_PLLSAI1_Config+0x62>
 8007100:	2b02      	cmp	r3, #2
 8007102:	d009      	beq.n	8007118 <RCCEx_PLLSAI1_Config+0x74>
 8007104:	e020      	b.n	8007148 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007106:	4b60      	ldr	r3, [pc, #384]	; (8007288 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b00      	cmp	r3, #0
 8007110:	d11d      	bne.n	800714e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007116:	e01a      	b.n	800714e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007118:	4b5b      	ldr	r3, [pc, #364]	; (8007288 <RCCEx_PLLSAI1_Config+0x1e4>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007120:	2b00      	cmp	r3, #0
 8007122:	d116      	bne.n	8007152 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007128:	e013      	b.n	8007152 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800712a:	4b57      	ldr	r3, [pc, #348]	; (8007288 <RCCEx_PLLSAI1_Config+0x1e4>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10f      	bne.n	8007156 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007136:	4b54      	ldr	r3, [pc, #336]	; (8007288 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d109      	bne.n	8007156 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007146:	e006      	b.n	8007156 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	73fb      	strb	r3, [r7, #15]
      break;
 800714c:	e004      	b.n	8007158 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800714e:	bf00      	nop
 8007150:	e002      	b.n	8007158 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007152:	bf00      	nop
 8007154:	e000      	b.n	8007158 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007156:	bf00      	nop
    }

    if(status == HAL_OK)
 8007158:	7bfb      	ldrb	r3, [r7, #15]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10d      	bne.n	800717a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800715e:	4b4a      	ldr	r3, [pc, #296]	; (8007288 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6819      	ldr	r1, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	3b01      	subs	r3, #1
 8007170:	011b      	lsls	r3, r3, #4
 8007172:	430b      	orrs	r3, r1
 8007174:	4944      	ldr	r1, [pc, #272]	; (8007288 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007176:	4313      	orrs	r3, r2
 8007178:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800717a:	7bfb      	ldrb	r3, [r7, #15]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d17d      	bne.n	800727c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007180:	4b41      	ldr	r3, [pc, #260]	; (8007288 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a40      	ldr	r2, [pc, #256]	; (8007288 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007186:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800718a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800718c:	f7fd fb68 	bl	8004860 <HAL_GetTick>
 8007190:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007192:	e009      	b.n	80071a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007194:	f7fd fb64 	bl	8004860 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d902      	bls.n	80071a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	73fb      	strb	r3, [r7, #15]
        break;
 80071a6:	e005      	b.n	80071b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80071a8:	4b37      	ldr	r3, [pc, #220]	; (8007288 <RCCEx_PLLSAI1_Config+0x1e4>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1ef      	bne.n	8007194 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d160      	bne.n	800727c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d111      	bne.n	80071e4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80071c0:	4b31      	ldr	r3, [pc, #196]	; (8007288 <RCCEx_PLLSAI1_Config+0x1e4>)
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80071c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	6892      	ldr	r2, [r2, #8]
 80071d0:	0211      	lsls	r1, r2, #8
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	68d2      	ldr	r2, [r2, #12]
 80071d6:	0912      	lsrs	r2, r2, #4
 80071d8:	0452      	lsls	r2, r2, #17
 80071da:	430a      	orrs	r2, r1
 80071dc:	492a      	ldr	r1, [pc, #168]	; (8007288 <RCCEx_PLLSAI1_Config+0x1e4>)
 80071de:	4313      	orrs	r3, r2
 80071e0:	610b      	str	r3, [r1, #16]
 80071e2:	e027      	b.n	8007234 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d112      	bne.n	8007210 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80071ea:	4b27      	ldr	r3, [pc, #156]	; (8007288 <RCCEx_PLLSAI1_Config+0x1e4>)
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80071f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	6892      	ldr	r2, [r2, #8]
 80071fa:	0211      	lsls	r1, r2, #8
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	6912      	ldr	r2, [r2, #16]
 8007200:	0852      	lsrs	r2, r2, #1
 8007202:	3a01      	subs	r2, #1
 8007204:	0552      	lsls	r2, r2, #21
 8007206:	430a      	orrs	r2, r1
 8007208:	491f      	ldr	r1, [pc, #124]	; (8007288 <RCCEx_PLLSAI1_Config+0x1e4>)
 800720a:	4313      	orrs	r3, r2
 800720c:	610b      	str	r3, [r1, #16]
 800720e:	e011      	b.n	8007234 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007210:	4b1d      	ldr	r3, [pc, #116]	; (8007288 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007218:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	6892      	ldr	r2, [r2, #8]
 8007220:	0211      	lsls	r1, r2, #8
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	6952      	ldr	r2, [r2, #20]
 8007226:	0852      	lsrs	r2, r2, #1
 8007228:	3a01      	subs	r2, #1
 800722a:	0652      	lsls	r2, r2, #25
 800722c:	430a      	orrs	r2, r1
 800722e:	4916      	ldr	r1, [pc, #88]	; (8007288 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007230:	4313      	orrs	r3, r2
 8007232:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007234:	4b14      	ldr	r3, [pc, #80]	; (8007288 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a13      	ldr	r2, [pc, #76]	; (8007288 <RCCEx_PLLSAI1_Config+0x1e4>)
 800723a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800723e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007240:	f7fd fb0e 	bl	8004860 <HAL_GetTick>
 8007244:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007246:	e009      	b.n	800725c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007248:	f7fd fb0a 	bl	8004860 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b02      	cmp	r3, #2
 8007254:	d902      	bls.n	800725c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	73fb      	strb	r3, [r7, #15]
          break;
 800725a:	e005      	b.n	8007268 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800725c:	4b0a      	ldr	r3, [pc, #40]	; (8007288 <RCCEx_PLLSAI1_Config+0x1e4>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d0ef      	beq.n	8007248 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007268:	7bfb      	ldrb	r3, [r7, #15]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d106      	bne.n	800727c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800726e:	4b06      	ldr	r3, [pc, #24]	; (8007288 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007270:	691a      	ldr	r2, [r3, #16]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	4904      	ldr	r1, [pc, #16]	; (8007288 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007278:	4313      	orrs	r3, r2
 800727a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800727c:	7bfb      	ldrb	r3, [r7, #15]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	40021000 	.word	0x40021000

0800728c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007296:	2300      	movs	r3, #0
 8007298:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800729a:	4b6a      	ldr	r3, [pc, #424]	; (8007444 <RCCEx_PLLSAI2_Config+0x1b8>)
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	f003 0303 	and.w	r3, r3, #3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d018      	beq.n	80072d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80072a6:	4b67      	ldr	r3, [pc, #412]	; (8007444 <RCCEx_PLLSAI2_Config+0x1b8>)
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f003 0203 	and.w	r2, r3, #3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d10d      	bne.n	80072d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
       ||
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d009      	beq.n	80072d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80072be:	4b61      	ldr	r3, [pc, #388]	; (8007444 <RCCEx_PLLSAI2_Config+0x1b8>)
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	091b      	lsrs	r3, r3, #4
 80072c4:	f003 0307 	and.w	r3, r3, #7
 80072c8:	1c5a      	adds	r2, r3, #1
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685b      	ldr	r3, [r3, #4]
       ||
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d047      	beq.n	8007362 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	73fb      	strb	r3, [r7, #15]
 80072d6:	e044      	b.n	8007362 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b03      	cmp	r3, #3
 80072de:	d018      	beq.n	8007312 <RCCEx_PLLSAI2_Config+0x86>
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	d825      	bhi.n	8007330 <RCCEx_PLLSAI2_Config+0xa4>
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d002      	beq.n	80072ee <RCCEx_PLLSAI2_Config+0x62>
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d009      	beq.n	8007300 <RCCEx_PLLSAI2_Config+0x74>
 80072ec:	e020      	b.n	8007330 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80072ee:	4b55      	ldr	r3, [pc, #340]	; (8007444 <RCCEx_PLLSAI2_Config+0x1b8>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0302 	and.w	r3, r3, #2
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d11d      	bne.n	8007336 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072fe:	e01a      	b.n	8007336 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007300:	4b50      	ldr	r3, [pc, #320]	; (8007444 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007308:	2b00      	cmp	r3, #0
 800730a:	d116      	bne.n	800733a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007310:	e013      	b.n	800733a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007312:	4b4c      	ldr	r3, [pc, #304]	; (8007444 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10f      	bne.n	800733e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800731e:	4b49      	ldr	r3, [pc, #292]	; (8007444 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d109      	bne.n	800733e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800732e:	e006      	b.n	800733e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	73fb      	strb	r3, [r7, #15]
      break;
 8007334:	e004      	b.n	8007340 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007336:	bf00      	nop
 8007338:	e002      	b.n	8007340 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800733a:	bf00      	nop
 800733c:	e000      	b.n	8007340 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800733e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007340:	7bfb      	ldrb	r3, [r7, #15]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10d      	bne.n	8007362 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007346:	4b3f      	ldr	r3, [pc, #252]	; (8007444 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6819      	ldr	r1, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	3b01      	subs	r3, #1
 8007358:	011b      	lsls	r3, r3, #4
 800735a:	430b      	orrs	r3, r1
 800735c:	4939      	ldr	r1, [pc, #228]	; (8007444 <RCCEx_PLLSAI2_Config+0x1b8>)
 800735e:	4313      	orrs	r3, r2
 8007360:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007362:	7bfb      	ldrb	r3, [r7, #15]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d167      	bne.n	8007438 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007368:	4b36      	ldr	r3, [pc, #216]	; (8007444 <RCCEx_PLLSAI2_Config+0x1b8>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a35      	ldr	r2, [pc, #212]	; (8007444 <RCCEx_PLLSAI2_Config+0x1b8>)
 800736e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007372:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007374:	f7fd fa74 	bl	8004860 <HAL_GetTick>
 8007378:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800737a:	e009      	b.n	8007390 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800737c:	f7fd fa70 	bl	8004860 <HAL_GetTick>
 8007380:	4602      	mov	r2, r0
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	2b02      	cmp	r3, #2
 8007388:	d902      	bls.n	8007390 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	73fb      	strb	r3, [r7, #15]
        break;
 800738e:	e005      	b.n	800739c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007390:	4b2c      	ldr	r3, [pc, #176]	; (8007444 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1ef      	bne.n	800737c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800739c:	7bfb      	ldrb	r3, [r7, #15]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d14a      	bne.n	8007438 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d111      	bne.n	80073cc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80073a8:	4b26      	ldr	r3, [pc, #152]	; (8007444 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073aa:	695b      	ldr	r3, [r3, #20]
 80073ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80073b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	6892      	ldr	r2, [r2, #8]
 80073b8:	0211      	lsls	r1, r2, #8
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	68d2      	ldr	r2, [r2, #12]
 80073be:	0912      	lsrs	r2, r2, #4
 80073c0:	0452      	lsls	r2, r2, #17
 80073c2:	430a      	orrs	r2, r1
 80073c4:	491f      	ldr	r1, [pc, #124]	; (8007444 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	614b      	str	r3, [r1, #20]
 80073ca:	e011      	b.n	80073f0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80073cc:	4b1d      	ldr	r3, [pc, #116]	; (8007444 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80073d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	6892      	ldr	r2, [r2, #8]
 80073dc:	0211      	lsls	r1, r2, #8
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	6912      	ldr	r2, [r2, #16]
 80073e2:	0852      	lsrs	r2, r2, #1
 80073e4:	3a01      	subs	r2, #1
 80073e6:	0652      	lsls	r2, r2, #25
 80073e8:	430a      	orrs	r2, r1
 80073ea:	4916      	ldr	r1, [pc, #88]	; (8007444 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80073f0:	4b14      	ldr	r3, [pc, #80]	; (8007444 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a13      	ldr	r2, [pc, #76]	; (8007444 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073fc:	f7fd fa30 	bl	8004860 <HAL_GetTick>
 8007400:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007402:	e009      	b.n	8007418 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007404:	f7fd fa2c 	bl	8004860 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	2b02      	cmp	r3, #2
 8007410:	d902      	bls.n	8007418 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	73fb      	strb	r3, [r7, #15]
          break;
 8007416:	e005      	b.n	8007424 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007418:	4b0a      	ldr	r3, [pc, #40]	; (8007444 <RCCEx_PLLSAI2_Config+0x1b8>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d0ef      	beq.n	8007404 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007424:	7bfb      	ldrb	r3, [r7, #15]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d106      	bne.n	8007438 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800742a:	4b06      	ldr	r3, [pc, #24]	; (8007444 <RCCEx_PLLSAI2_Config+0x1b8>)
 800742c:	695a      	ldr	r2, [r3, #20]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	695b      	ldr	r3, [r3, #20]
 8007432:	4904      	ldr	r1, [pc, #16]	; (8007444 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007434:	4313      	orrs	r3, r2
 8007436:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007438:	7bfb      	ldrb	r3, [r7, #15]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	40021000 	.word	0x40021000

08007448 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e095      	b.n	8007586 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745e:	2b00      	cmp	r3, #0
 8007460:	d108      	bne.n	8007474 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800746a:	d009      	beq.n	8007480 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	61da      	str	r2, [r3, #28]
 8007472:	e005      	b.n	8007480 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d106      	bne.n	80074a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f877 	bl	800758e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2202      	movs	r2, #2
 80074a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074c0:	d902      	bls.n	80074c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80074c2:	2300      	movs	r3, #0
 80074c4:	60fb      	str	r3, [r7, #12]
 80074c6:	e002      	b.n	80074ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80074c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80074d6:	d007      	beq.n	80074e8 <HAL_SPI_Init+0xa0>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074e0:	d002      	beq.n	80074e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074f8:	431a      	orrs	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	431a      	orrs	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	431a      	orrs	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007516:	431a      	orrs	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007520:	431a      	orrs	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800752a:	ea42 0103 	orr.w	r1, r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007532:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	430a      	orrs	r2, r1
 800753c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	0c1b      	lsrs	r3, r3, #16
 8007544:	f003 0204 	and.w	r2, r3, #4
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754c:	f003 0310 	and.w	r3, r3, #16
 8007550:	431a      	orrs	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007556:	f003 0308 	and.w	r3, r3, #8
 800755a:	431a      	orrs	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007564:	ea42 0103 	orr.w	r1, r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	430a      	orrs	r2, r1
 8007574:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800758e:	b480      	push	{r7}
 8007590:	b083      	sub	sp, #12
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007596:	bf00      	nop
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b08a      	sub	sp, #40	; 0x28
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	60f8      	str	r0, [r7, #12]
 80075aa:	60b9      	str	r1, [r7, #8]
 80075ac:	607a      	str	r2, [r7, #4]
 80075ae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80075b0:	2301      	movs	r3, #1
 80075b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80075b4:	2300      	movs	r3, #0
 80075b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d101      	bne.n	80075c8 <HAL_SPI_TransmitReceive+0x26>
 80075c4:	2302      	movs	r3, #2
 80075c6:	e20a      	b.n	80079de <HAL_SPI_TransmitReceive+0x43c>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075d0:	f7fd f946 	bl	8004860 <HAL_GetTick>
 80075d4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075dc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80075e4:	887b      	ldrh	r3, [r7, #2]
 80075e6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80075e8:	887b      	ldrh	r3, [r7, #2]
 80075ea:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80075ec:	7efb      	ldrb	r3, [r7, #27]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d00e      	beq.n	8007610 <HAL_SPI_TransmitReceive+0x6e>
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075f8:	d106      	bne.n	8007608 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d102      	bne.n	8007608 <HAL_SPI_TransmitReceive+0x66>
 8007602:	7efb      	ldrb	r3, [r7, #27]
 8007604:	2b04      	cmp	r3, #4
 8007606:	d003      	beq.n	8007610 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007608:	2302      	movs	r3, #2
 800760a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800760e:	e1e0      	b.n	80079d2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d005      	beq.n	8007622 <HAL_SPI_TransmitReceive+0x80>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d002      	beq.n	8007622 <HAL_SPI_TransmitReceive+0x80>
 800761c:	887b      	ldrh	r3, [r7, #2]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d103      	bne.n	800762a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007628:	e1d3      	b.n	80079d2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b04      	cmp	r3, #4
 8007634:	d003      	beq.n	800763e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2205      	movs	r2, #5
 800763a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	887a      	ldrh	r2, [r7, #2]
 800764e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	887a      	ldrh	r2, [r7, #2]
 8007656:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	887a      	ldrh	r2, [r7, #2]
 8007664:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	887a      	ldrh	r2, [r7, #2]
 800766a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007680:	d802      	bhi.n	8007688 <HAL_SPI_TransmitReceive+0xe6>
 8007682:	8a3b      	ldrh	r3, [r7, #16]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d908      	bls.n	800769a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685a      	ldr	r2, [r3, #4]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007696:	605a      	str	r2, [r3, #4]
 8007698:	e007      	b.n	80076aa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076a8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b4:	2b40      	cmp	r3, #64	; 0x40
 80076b6:	d007      	beq.n	80076c8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80076d0:	f240 8081 	bls.w	80077d6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d002      	beq.n	80076e2 <HAL_SPI_TransmitReceive+0x140>
 80076dc:	8a7b      	ldrh	r3, [r7, #18]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d16d      	bne.n	80077be <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e6:	881a      	ldrh	r2, [r3, #0]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f2:	1c9a      	adds	r2, r3, #2
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	3b01      	subs	r3, #1
 8007700:	b29a      	uxth	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007706:	e05a      	b.n	80077be <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f003 0302 	and.w	r3, r3, #2
 8007712:	2b02      	cmp	r3, #2
 8007714:	d11b      	bne.n	800774e <HAL_SPI_TransmitReceive+0x1ac>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800771a:	b29b      	uxth	r3, r3
 800771c:	2b00      	cmp	r3, #0
 800771e:	d016      	beq.n	800774e <HAL_SPI_TransmitReceive+0x1ac>
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	2b01      	cmp	r3, #1
 8007724:	d113      	bne.n	800774e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772a:	881a      	ldrh	r2, [r3, #0]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007736:	1c9a      	adds	r2, r3, #2
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007740:	b29b      	uxth	r3, r3
 8007742:	3b01      	subs	r3, #1
 8007744:	b29a      	uxth	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800774a:	2300      	movs	r3, #0
 800774c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	2b01      	cmp	r3, #1
 800775a:	d11c      	bne.n	8007796 <HAL_SPI_TransmitReceive+0x1f4>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007762:	b29b      	uxth	r3, r3
 8007764:	2b00      	cmp	r3, #0
 8007766:	d016      	beq.n	8007796 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68da      	ldr	r2, [r3, #12]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007772:	b292      	uxth	r2, r2
 8007774:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	1c9a      	adds	r2, r3, #2
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007786:	b29b      	uxth	r3, r3
 8007788:	3b01      	subs	r3, #1
 800778a:	b29a      	uxth	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007792:	2301      	movs	r3, #1
 8007794:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007796:	f7fd f863 	bl	8004860 <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d80b      	bhi.n	80077be <HAL_SPI_TransmitReceive+0x21c>
 80077a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ac:	d007      	beq.n	80077be <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80077bc:	e109      	b.n	80079d2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d19f      	bne.n	8007708 <HAL_SPI_TransmitReceive+0x166>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d199      	bne.n	8007708 <HAL_SPI_TransmitReceive+0x166>
 80077d4:	e0e3      	b.n	800799e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d003      	beq.n	80077e6 <HAL_SPI_TransmitReceive+0x244>
 80077de:	8a7b      	ldrh	r3, [r7, #18]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	f040 80cf 	bne.w	8007984 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d912      	bls.n	8007816 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f4:	881a      	ldrh	r2, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007800:	1c9a      	adds	r2, r3, #2
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800780a:	b29b      	uxth	r3, r3
 800780c:	3b02      	subs	r3, #2
 800780e:	b29a      	uxth	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007814:	e0b6      	b.n	8007984 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	330c      	adds	r3, #12
 8007820:	7812      	ldrb	r2, [r2, #0]
 8007822:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007828:	1c5a      	adds	r2, r3, #1
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007832:	b29b      	uxth	r3, r3
 8007834:	3b01      	subs	r3, #1
 8007836:	b29a      	uxth	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800783c:	e0a2      	b.n	8007984 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f003 0302 	and.w	r3, r3, #2
 8007848:	2b02      	cmp	r3, #2
 800784a:	d134      	bne.n	80078b6 <HAL_SPI_TransmitReceive+0x314>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007850:	b29b      	uxth	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d02f      	beq.n	80078b6 <HAL_SPI_TransmitReceive+0x314>
 8007856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007858:	2b01      	cmp	r3, #1
 800785a:	d12c      	bne.n	80078b6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007860:	b29b      	uxth	r3, r3
 8007862:	2b01      	cmp	r3, #1
 8007864:	d912      	bls.n	800788c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786a:	881a      	ldrh	r2, [r3, #0]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007876:	1c9a      	adds	r2, r3, #2
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007880:	b29b      	uxth	r3, r3
 8007882:	3b02      	subs	r3, #2
 8007884:	b29a      	uxth	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	87da      	strh	r2, [r3, #62]	; 0x3e
 800788a:	e012      	b.n	80078b2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	330c      	adds	r3, #12
 8007896:	7812      	ldrb	r2, [r2, #0]
 8007898:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	3b01      	subs	r3, #1
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078b2:	2300      	movs	r3, #0
 80078b4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d148      	bne.n	8007956 <HAL_SPI_TransmitReceive+0x3b4>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d042      	beq.n	8007956 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d923      	bls.n	8007924 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68da      	ldr	r2, [r3, #12]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e6:	b292      	uxth	r2, r2
 80078e8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	1c9a      	adds	r2, r3, #2
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	3b02      	subs	r3, #2
 80078fe:	b29a      	uxth	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b01      	cmp	r3, #1
 8007910:	d81f      	bhi.n	8007952 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	685a      	ldr	r2, [r3, #4]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007920:	605a      	str	r2, [r3, #4]
 8007922:	e016      	b.n	8007952 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f103 020c 	add.w	r2, r3, #12
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007930:	7812      	ldrb	r2, [r2, #0]
 8007932:	b2d2      	uxtb	r2, r2
 8007934:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793a:	1c5a      	adds	r2, r3, #1
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007946:	b29b      	uxth	r3, r3
 8007948:	3b01      	subs	r3, #1
 800794a:	b29a      	uxth	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007952:	2301      	movs	r3, #1
 8007954:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007956:	f7fc ff83 	bl	8004860 <HAL_GetTick>
 800795a:	4602      	mov	r2, r0
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007962:	429a      	cmp	r2, r3
 8007964:	d803      	bhi.n	800796e <HAL_SPI_TransmitReceive+0x3cc>
 8007966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796c:	d102      	bne.n	8007974 <HAL_SPI_TransmitReceive+0x3d2>
 800796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007970:	2b00      	cmp	r3, #0
 8007972:	d107      	bne.n	8007984 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007982:	e026      	b.n	80079d2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007988:	b29b      	uxth	r3, r3
 800798a:	2b00      	cmp	r3, #0
 800798c:	f47f af57 	bne.w	800783e <HAL_SPI_TransmitReceive+0x29c>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007996:	b29b      	uxth	r3, r3
 8007998:	2b00      	cmp	r3, #0
 800799a:	f47f af50 	bne.w	800783e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800799e:	69fa      	ldr	r2, [r7, #28]
 80079a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f000 f94c 	bl	8007c40 <SPI_EndRxTxTransaction>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d005      	beq.n	80079ba <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2220      	movs	r2, #32
 80079b8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079c8:	e003      	b.n	80079d2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80079da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3728      	adds	r7, #40	; 0x28
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80079f4:	b2db      	uxtb	r3, r3
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
	...

08007a04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b088      	sub	sp, #32
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	603b      	str	r3, [r7, #0]
 8007a10:	4613      	mov	r3, r2
 8007a12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a14:	f7fc ff24 	bl	8004860 <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1c:	1a9b      	subs	r3, r3, r2
 8007a1e:	683a      	ldr	r2, [r7, #0]
 8007a20:	4413      	add	r3, r2
 8007a22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a24:	f7fc ff1c 	bl	8004860 <HAL_GetTick>
 8007a28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a2a:	4b39      	ldr	r3, [pc, #228]	; (8007b10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	015b      	lsls	r3, r3, #5
 8007a30:	0d1b      	lsrs	r3, r3, #20
 8007a32:	69fa      	ldr	r2, [r7, #28]
 8007a34:	fb02 f303 	mul.w	r3, r2, r3
 8007a38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a3a:	e054      	b.n	8007ae6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a42:	d050      	beq.n	8007ae6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a44:	f7fc ff0c 	bl	8004860 <HAL_GetTick>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	69fa      	ldr	r2, [r7, #28]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d902      	bls.n	8007a5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d13d      	bne.n	8007ad6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	685a      	ldr	r2, [r3, #4]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a72:	d111      	bne.n	8007a98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a7c:	d004      	beq.n	8007a88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a86:	d107      	bne.n	8007a98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aa0:	d10f      	bne.n	8007ac2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ab0:	601a      	str	r2, [r3, #0]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ac0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e017      	b.n	8007b06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007adc:	2300      	movs	r3, #0
 8007ade:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	689a      	ldr	r2, [r3, #8]
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	4013      	ands	r3, r2
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	bf0c      	ite	eq
 8007af6:	2301      	moveq	r3, #1
 8007af8:	2300      	movne	r3, #0
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	461a      	mov	r2, r3
 8007afe:	79fb      	ldrb	r3, [r7, #7]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d19b      	bne.n	8007a3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3720      	adds	r7, #32
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	20000018 	.word	0x20000018

08007b14 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b08a      	sub	sp, #40	; 0x28
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
 8007b20:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007b22:	2300      	movs	r3, #0
 8007b24:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007b26:	f7fc fe9b 	bl	8004860 <HAL_GetTick>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2e:	1a9b      	subs	r3, r3, r2
 8007b30:	683a      	ldr	r2, [r7, #0]
 8007b32:	4413      	add	r3, r2
 8007b34:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007b36:	f7fc fe93 	bl	8004860 <HAL_GetTick>
 8007b3a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	330c      	adds	r3, #12
 8007b42:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007b44:	4b3d      	ldr	r3, [pc, #244]	; (8007c3c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	00da      	lsls	r2, r3, #3
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	0d1b      	lsrs	r3, r3, #20
 8007b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b56:	fb02 f303 	mul.w	r3, r2, r3
 8007b5a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007b5c:	e060      	b.n	8007c20 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007b64:	d107      	bne.n	8007b76 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d104      	bne.n	8007b76 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7c:	d050      	beq.n	8007c20 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b7e:	f7fc fe6f 	bl	8004860 <HAL_GetTick>
 8007b82:	4602      	mov	r2, r0
 8007b84:	6a3b      	ldr	r3, [r7, #32]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d902      	bls.n	8007b94 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d13d      	bne.n	8007c10 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	685a      	ldr	r2, [r3, #4]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ba2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bac:	d111      	bne.n	8007bd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bb6:	d004      	beq.n	8007bc2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bc0:	d107      	bne.n	8007bd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bd0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bda:	d10f      	bne.n	8007bfc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bea:	601a      	str	r2, [r3, #0]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bfa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e010      	b.n	8007c32 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d101      	bne.n	8007c1a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007c16:	2300      	movs	r3, #0
 8007c18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	689a      	ldr	r2, [r3, #8]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	4013      	ands	r3, r2
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d196      	bne.n	8007b5e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3728      	adds	r7, #40	; 0x28
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	20000018 	.word	0x20000018

08007c40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af02      	add	r7, sp, #8
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f7ff ff5b 	bl	8007b14 <SPI_WaitFifoStateUntilTimeout>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d007      	beq.n	8007c74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c68:	f043 0220 	orr.w	r2, r3, #32
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c70:	2303      	movs	r3, #3
 8007c72:	e027      	b.n	8007cc4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2180      	movs	r1, #128	; 0x80
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f7ff fec0 	bl	8007a04 <SPI_WaitFlagStateUntilTimeout>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d007      	beq.n	8007c9a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c8e:	f043 0220 	orr.w	r2, r3, #32
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e014      	b.n	8007cc4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f7ff ff34 	bl	8007b14 <SPI_WaitFifoStateUntilTimeout>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d007      	beq.n	8007cc2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cb6:	f043 0220 	orr.w	r2, r3, #32
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e000      	b.n	8007cc4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d101      	bne.n	8007cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e040      	b.n	8007d60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d106      	bne.n	8007cf4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f83a 	bl	8007d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2224      	movs	r2, #36	; 0x24
 8007cf8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f022 0201 	bic.w	r2, r2, #1
 8007d08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d002      	beq.n	8007d18 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fb74 	bl	8008400 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 f8b9 	bl	8007e90 <UART_SetConfig>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d101      	bne.n	8007d28 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e01b      	b.n	8007d60 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689a      	ldr	r2, [r3, #8]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f042 0201 	orr.w	r2, r2, #1
 8007d56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fbf3 	bl	8008544 <UART_CheckIdleState>
 8007d5e:	4603      	mov	r3, r0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b08a      	sub	sp, #40	; 0x28
 8007d80:	af02      	add	r7, sp, #8
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	603b      	str	r3, [r7, #0]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d90:	2b20      	cmp	r3, #32
 8007d92:	d178      	bne.n	8007e86 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d002      	beq.n	8007da0 <HAL_UART_Transmit+0x24>
 8007d9a:	88fb      	ldrh	r3, [r7, #6]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d101      	bne.n	8007da4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e071      	b.n	8007e88 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2221      	movs	r2, #33	; 0x21
 8007db0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007db2:	f7fc fd55 	bl	8004860 <HAL_GetTick>
 8007db6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	88fa      	ldrh	r2, [r7, #6]
 8007dbc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	88fa      	ldrh	r2, [r7, #6]
 8007dc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dd0:	d108      	bne.n	8007de4 <HAL_UART_Transmit+0x68>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d104      	bne.n	8007de4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	61bb      	str	r3, [r7, #24]
 8007de2:	e003      	b.n	8007dec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007de8:	2300      	movs	r3, #0
 8007dea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007dec:	e030      	b.n	8007e50 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	2200      	movs	r2, #0
 8007df6:	2180      	movs	r1, #128	; 0x80
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 fc4b 	bl	8008694 <UART_WaitOnFlagUntilTimeout>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d004      	beq.n	8007e0e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2220      	movs	r2, #32
 8007e08:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e03c      	b.n	8007e88 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10b      	bne.n	8007e2c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	881a      	ldrh	r2, [r3, #0]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e20:	b292      	uxth	r2, r2
 8007e22:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	3302      	adds	r3, #2
 8007e28:	61bb      	str	r3, [r7, #24]
 8007e2a:	e008      	b.n	8007e3e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	781a      	ldrb	r2, [r3, #0]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	b292      	uxth	r2, r2
 8007e36:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	3b01      	subs	r3, #1
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1c8      	bne.n	8007dee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	2200      	movs	r2, #0
 8007e64:	2140      	movs	r1, #64	; 0x40
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f000 fc14 	bl	8008694 <UART_WaitOnFlagUntilTimeout>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d004      	beq.n	8007e7c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2220      	movs	r2, #32
 8007e76:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e005      	b.n	8007e88 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2220      	movs	r2, #32
 8007e80:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	e000      	b.n	8007e88 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007e86:	2302      	movs	r3, #2
  }
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3720      	adds	r7, #32
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e94:	b08a      	sub	sp, #40	; 0x28
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	689a      	ldr	r2, [r3, #8]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	431a      	orrs	r2, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	431a      	orrs	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	69db      	ldr	r3, [r3, #28]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	4ba4      	ldr	r3, [pc, #656]	; (8008150 <UART_SetConfig+0x2c0>)
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	6812      	ldr	r2, [r2, #0]
 8007ec6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ec8:	430b      	orrs	r3, r1
 8007eca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	68da      	ldr	r2, [r3, #12]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a99      	ldr	r2, [pc, #612]	; (8008154 <UART_SetConfig+0x2c4>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d004      	beq.n	8007efc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6a1b      	ldr	r3, [r3, #32]
 8007ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f0c:	430a      	orrs	r2, r1
 8007f0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a90      	ldr	r2, [pc, #576]	; (8008158 <UART_SetConfig+0x2c8>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d126      	bne.n	8007f68 <UART_SetConfig+0xd8>
 8007f1a:	4b90      	ldr	r3, [pc, #576]	; (800815c <UART_SetConfig+0x2cc>)
 8007f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f20:	f003 0303 	and.w	r3, r3, #3
 8007f24:	2b03      	cmp	r3, #3
 8007f26:	d81b      	bhi.n	8007f60 <UART_SetConfig+0xd0>
 8007f28:	a201      	add	r2, pc, #4	; (adr r2, 8007f30 <UART_SetConfig+0xa0>)
 8007f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2e:	bf00      	nop
 8007f30:	08007f41 	.word	0x08007f41
 8007f34:	08007f51 	.word	0x08007f51
 8007f38:	08007f49 	.word	0x08007f49
 8007f3c:	08007f59 	.word	0x08007f59
 8007f40:	2301      	movs	r3, #1
 8007f42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f46:	e116      	b.n	8008176 <UART_SetConfig+0x2e6>
 8007f48:	2302      	movs	r3, #2
 8007f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f4e:	e112      	b.n	8008176 <UART_SetConfig+0x2e6>
 8007f50:	2304      	movs	r3, #4
 8007f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f56:	e10e      	b.n	8008176 <UART_SetConfig+0x2e6>
 8007f58:	2308      	movs	r3, #8
 8007f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f5e:	e10a      	b.n	8008176 <UART_SetConfig+0x2e6>
 8007f60:	2310      	movs	r3, #16
 8007f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007f66:	e106      	b.n	8008176 <UART_SetConfig+0x2e6>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a7c      	ldr	r2, [pc, #496]	; (8008160 <UART_SetConfig+0x2d0>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d138      	bne.n	8007fe4 <UART_SetConfig+0x154>
 8007f72:	4b7a      	ldr	r3, [pc, #488]	; (800815c <UART_SetConfig+0x2cc>)
 8007f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f78:	f003 030c 	and.w	r3, r3, #12
 8007f7c:	2b0c      	cmp	r3, #12
 8007f7e:	d82d      	bhi.n	8007fdc <UART_SetConfig+0x14c>
 8007f80:	a201      	add	r2, pc, #4	; (adr r2, 8007f88 <UART_SetConfig+0xf8>)
 8007f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f86:	bf00      	nop
 8007f88:	08007fbd 	.word	0x08007fbd
 8007f8c:	08007fdd 	.word	0x08007fdd
 8007f90:	08007fdd 	.word	0x08007fdd
 8007f94:	08007fdd 	.word	0x08007fdd
 8007f98:	08007fcd 	.word	0x08007fcd
 8007f9c:	08007fdd 	.word	0x08007fdd
 8007fa0:	08007fdd 	.word	0x08007fdd
 8007fa4:	08007fdd 	.word	0x08007fdd
 8007fa8:	08007fc5 	.word	0x08007fc5
 8007fac:	08007fdd 	.word	0x08007fdd
 8007fb0:	08007fdd 	.word	0x08007fdd
 8007fb4:	08007fdd 	.word	0x08007fdd
 8007fb8:	08007fd5 	.word	0x08007fd5
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fc2:	e0d8      	b.n	8008176 <UART_SetConfig+0x2e6>
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fca:	e0d4      	b.n	8008176 <UART_SetConfig+0x2e6>
 8007fcc:	2304      	movs	r3, #4
 8007fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fd2:	e0d0      	b.n	8008176 <UART_SetConfig+0x2e6>
 8007fd4:	2308      	movs	r3, #8
 8007fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fda:	e0cc      	b.n	8008176 <UART_SetConfig+0x2e6>
 8007fdc:	2310      	movs	r3, #16
 8007fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fe2:	e0c8      	b.n	8008176 <UART_SetConfig+0x2e6>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a5e      	ldr	r2, [pc, #376]	; (8008164 <UART_SetConfig+0x2d4>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d125      	bne.n	800803a <UART_SetConfig+0x1aa>
 8007fee:	4b5b      	ldr	r3, [pc, #364]	; (800815c <UART_SetConfig+0x2cc>)
 8007ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ff4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ff8:	2b30      	cmp	r3, #48	; 0x30
 8007ffa:	d016      	beq.n	800802a <UART_SetConfig+0x19a>
 8007ffc:	2b30      	cmp	r3, #48	; 0x30
 8007ffe:	d818      	bhi.n	8008032 <UART_SetConfig+0x1a2>
 8008000:	2b20      	cmp	r3, #32
 8008002:	d00a      	beq.n	800801a <UART_SetConfig+0x18a>
 8008004:	2b20      	cmp	r3, #32
 8008006:	d814      	bhi.n	8008032 <UART_SetConfig+0x1a2>
 8008008:	2b00      	cmp	r3, #0
 800800a:	d002      	beq.n	8008012 <UART_SetConfig+0x182>
 800800c:	2b10      	cmp	r3, #16
 800800e:	d008      	beq.n	8008022 <UART_SetConfig+0x192>
 8008010:	e00f      	b.n	8008032 <UART_SetConfig+0x1a2>
 8008012:	2300      	movs	r3, #0
 8008014:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008018:	e0ad      	b.n	8008176 <UART_SetConfig+0x2e6>
 800801a:	2302      	movs	r3, #2
 800801c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008020:	e0a9      	b.n	8008176 <UART_SetConfig+0x2e6>
 8008022:	2304      	movs	r3, #4
 8008024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008028:	e0a5      	b.n	8008176 <UART_SetConfig+0x2e6>
 800802a:	2308      	movs	r3, #8
 800802c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008030:	e0a1      	b.n	8008176 <UART_SetConfig+0x2e6>
 8008032:	2310      	movs	r3, #16
 8008034:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008038:	e09d      	b.n	8008176 <UART_SetConfig+0x2e6>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a4a      	ldr	r2, [pc, #296]	; (8008168 <UART_SetConfig+0x2d8>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d125      	bne.n	8008090 <UART_SetConfig+0x200>
 8008044:	4b45      	ldr	r3, [pc, #276]	; (800815c <UART_SetConfig+0x2cc>)
 8008046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800804a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800804e:	2bc0      	cmp	r3, #192	; 0xc0
 8008050:	d016      	beq.n	8008080 <UART_SetConfig+0x1f0>
 8008052:	2bc0      	cmp	r3, #192	; 0xc0
 8008054:	d818      	bhi.n	8008088 <UART_SetConfig+0x1f8>
 8008056:	2b80      	cmp	r3, #128	; 0x80
 8008058:	d00a      	beq.n	8008070 <UART_SetConfig+0x1e0>
 800805a:	2b80      	cmp	r3, #128	; 0x80
 800805c:	d814      	bhi.n	8008088 <UART_SetConfig+0x1f8>
 800805e:	2b00      	cmp	r3, #0
 8008060:	d002      	beq.n	8008068 <UART_SetConfig+0x1d8>
 8008062:	2b40      	cmp	r3, #64	; 0x40
 8008064:	d008      	beq.n	8008078 <UART_SetConfig+0x1e8>
 8008066:	e00f      	b.n	8008088 <UART_SetConfig+0x1f8>
 8008068:	2300      	movs	r3, #0
 800806a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800806e:	e082      	b.n	8008176 <UART_SetConfig+0x2e6>
 8008070:	2302      	movs	r3, #2
 8008072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008076:	e07e      	b.n	8008176 <UART_SetConfig+0x2e6>
 8008078:	2304      	movs	r3, #4
 800807a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800807e:	e07a      	b.n	8008176 <UART_SetConfig+0x2e6>
 8008080:	2308      	movs	r3, #8
 8008082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008086:	e076      	b.n	8008176 <UART_SetConfig+0x2e6>
 8008088:	2310      	movs	r3, #16
 800808a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800808e:	e072      	b.n	8008176 <UART_SetConfig+0x2e6>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a35      	ldr	r2, [pc, #212]	; (800816c <UART_SetConfig+0x2dc>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d12a      	bne.n	80080f0 <UART_SetConfig+0x260>
 800809a:	4b30      	ldr	r3, [pc, #192]	; (800815c <UART_SetConfig+0x2cc>)
 800809c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080a8:	d01a      	beq.n	80080e0 <UART_SetConfig+0x250>
 80080aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080ae:	d81b      	bhi.n	80080e8 <UART_SetConfig+0x258>
 80080b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080b4:	d00c      	beq.n	80080d0 <UART_SetConfig+0x240>
 80080b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080ba:	d815      	bhi.n	80080e8 <UART_SetConfig+0x258>
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d003      	beq.n	80080c8 <UART_SetConfig+0x238>
 80080c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080c4:	d008      	beq.n	80080d8 <UART_SetConfig+0x248>
 80080c6:	e00f      	b.n	80080e8 <UART_SetConfig+0x258>
 80080c8:	2300      	movs	r3, #0
 80080ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080ce:	e052      	b.n	8008176 <UART_SetConfig+0x2e6>
 80080d0:	2302      	movs	r3, #2
 80080d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080d6:	e04e      	b.n	8008176 <UART_SetConfig+0x2e6>
 80080d8:	2304      	movs	r3, #4
 80080da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080de:	e04a      	b.n	8008176 <UART_SetConfig+0x2e6>
 80080e0:	2308      	movs	r3, #8
 80080e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080e6:	e046      	b.n	8008176 <UART_SetConfig+0x2e6>
 80080e8:	2310      	movs	r3, #16
 80080ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080ee:	e042      	b.n	8008176 <UART_SetConfig+0x2e6>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a17      	ldr	r2, [pc, #92]	; (8008154 <UART_SetConfig+0x2c4>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d13a      	bne.n	8008170 <UART_SetConfig+0x2e0>
 80080fa:	4b18      	ldr	r3, [pc, #96]	; (800815c <UART_SetConfig+0x2cc>)
 80080fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008100:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008104:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008108:	d01a      	beq.n	8008140 <UART_SetConfig+0x2b0>
 800810a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800810e:	d81b      	bhi.n	8008148 <UART_SetConfig+0x2b8>
 8008110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008114:	d00c      	beq.n	8008130 <UART_SetConfig+0x2a0>
 8008116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800811a:	d815      	bhi.n	8008148 <UART_SetConfig+0x2b8>
 800811c:	2b00      	cmp	r3, #0
 800811e:	d003      	beq.n	8008128 <UART_SetConfig+0x298>
 8008120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008124:	d008      	beq.n	8008138 <UART_SetConfig+0x2a8>
 8008126:	e00f      	b.n	8008148 <UART_SetConfig+0x2b8>
 8008128:	2300      	movs	r3, #0
 800812a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800812e:	e022      	b.n	8008176 <UART_SetConfig+0x2e6>
 8008130:	2302      	movs	r3, #2
 8008132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008136:	e01e      	b.n	8008176 <UART_SetConfig+0x2e6>
 8008138:	2304      	movs	r3, #4
 800813a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800813e:	e01a      	b.n	8008176 <UART_SetConfig+0x2e6>
 8008140:	2308      	movs	r3, #8
 8008142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008146:	e016      	b.n	8008176 <UART_SetConfig+0x2e6>
 8008148:	2310      	movs	r3, #16
 800814a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800814e:	e012      	b.n	8008176 <UART_SetConfig+0x2e6>
 8008150:	efff69f3 	.word	0xefff69f3
 8008154:	40008000 	.word	0x40008000
 8008158:	40013800 	.word	0x40013800
 800815c:	40021000 	.word	0x40021000
 8008160:	40004400 	.word	0x40004400
 8008164:	40004800 	.word	0x40004800
 8008168:	40004c00 	.word	0x40004c00
 800816c:	40005000 	.word	0x40005000
 8008170:	2310      	movs	r3, #16
 8008172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a9f      	ldr	r2, [pc, #636]	; (80083f8 <UART_SetConfig+0x568>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d17a      	bne.n	8008276 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008180:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008184:	2b08      	cmp	r3, #8
 8008186:	d824      	bhi.n	80081d2 <UART_SetConfig+0x342>
 8008188:	a201      	add	r2, pc, #4	; (adr r2, 8008190 <UART_SetConfig+0x300>)
 800818a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818e:	bf00      	nop
 8008190:	080081b5 	.word	0x080081b5
 8008194:	080081d3 	.word	0x080081d3
 8008198:	080081bd 	.word	0x080081bd
 800819c:	080081d3 	.word	0x080081d3
 80081a0:	080081c3 	.word	0x080081c3
 80081a4:	080081d3 	.word	0x080081d3
 80081a8:	080081d3 	.word	0x080081d3
 80081ac:	080081d3 	.word	0x080081d3
 80081b0:	080081cb 	.word	0x080081cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081b4:	f7fe fc00 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 80081b8:	61f8      	str	r0, [r7, #28]
        break;
 80081ba:	e010      	b.n	80081de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081bc:	4b8f      	ldr	r3, [pc, #572]	; (80083fc <UART_SetConfig+0x56c>)
 80081be:	61fb      	str	r3, [r7, #28]
        break;
 80081c0:	e00d      	b.n	80081de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081c2:	f7fe fb61 	bl	8006888 <HAL_RCC_GetSysClockFreq>
 80081c6:	61f8      	str	r0, [r7, #28]
        break;
 80081c8:	e009      	b.n	80081de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081ce:	61fb      	str	r3, [r7, #28]
        break;
 80081d0:	e005      	b.n	80081de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80081d2:	2300      	movs	r3, #0
 80081d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80081dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 80fb 	beq.w	80083dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	685a      	ldr	r2, [r3, #4]
 80081ea:	4613      	mov	r3, r2
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	4413      	add	r3, r2
 80081f0:	69fa      	ldr	r2, [r7, #28]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d305      	bcc.n	8008202 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80081fc:	69fa      	ldr	r2, [r7, #28]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d903      	bls.n	800820a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008208:	e0e8      	b.n	80083dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	2200      	movs	r2, #0
 800820e:	461c      	mov	r4, r3
 8008210:	4615      	mov	r5, r2
 8008212:	f04f 0200 	mov.w	r2, #0
 8008216:	f04f 0300 	mov.w	r3, #0
 800821a:	022b      	lsls	r3, r5, #8
 800821c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008220:	0222      	lsls	r2, r4, #8
 8008222:	68f9      	ldr	r1, [r7, #12]
 8008224:	6849      	ldr	r1, [r1, #4]
 8008226:	0849      	lsrs	r1, r1, #1
 8008228:	2000      	movs	r0, #0
 800822a:	4688      	mov	r8, r1
 800822c:	4681      	mov	r9, r0
 800822e:	eb12 0a08 	adds.w	sl, r2, r8
 8008232:	eb43 0b09 	adc.w	fp, r3, r9
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	603b      	str	r3, [r7, #0]
 800823e:	607a      	str	r2, [r7, #4]
 8008240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008244:	4650      	mov	r0, sl
 8008246:	4659      	mov	r1, fp
 8008248:	f7f8 fcfe 	bl	8000c48 <__aeabi_uldivmod>
 800824c:	4602      	mov	r2, r0
 800824e:	460b      	mov	r3, r1
 8008250:	4613      	mov	r3, r2
 8008252:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800825a:	d308      	bcc.n	800826e <UART_SetConfig+0x3de>
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008262:	d204      	bcs.n	800826e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	69ba      	ldr	r2, [r7, #24]
 800826a:	60da      	str	r2, [r3, #12]
 800826c:	e0b6      	b.n	80083dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008274:	e0b2      	b.n	80083dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	69db      	ldr	r3, [r3, #28]
 800827a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800827e:	d15e      	bne.n	800833e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008280:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008284:	2b08      	cmp	r3, #8
 8008286:	d828      	bhi.n	80082da <UART_SetConfig+0x44a>
 8008288:	a201      	add	r2, pc, #4	; (adr r2, 8008290 <UART_SetConfig+0x400>)
 800828a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828e:	bf00      	nop
 8008290:	080082b5 	.word	0x080082b5
 8008294:	080082bd 	.word	0x080082bd
 8008298:	080082c5 	.word	0x080082c5
 800829c:	080082db 	.word	0x080082db
 80082a0:	080082cb 	.word	0x080082cb
 80082a4:	080082db 	.word	0x080082db
 80082a8:	080082db 	.word	0x080082db
 80082ac:	080082db 	.word	0x080082db
 80082b0:	080082d3 	.word	0x080082d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082b4:	f7fe fb80 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 80082b8:	61f8      	str	r0, [r7, #28]
        break;
 80082ba:	e014      	b.n	80082e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082bc:	f7fe fb92 	bl	80069e4 <HAL_RCC_GetPCLK2Freq>
 80082c0:	61f8      	str	r0, [r7, #28]
        break;
 80082c2:	e010      	b.n	80082e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082c4:	4b4d      	ldr	r3, [pc, #308]	; (80083fc <UART_SetConfig+0x56c>)
 80082c6:	61fb      	str	r3, [r7, #28]
        break;
 80082c8:	e00d      	b.n	80082e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082ca:	f7fe fadd 	bl	8006888 <HAL_RCC_GetSysClockFreq>
 80082ce:	61f8      	str	r0, [r7, #28]
        break;
 80082d0:	e009      	b.n	80082e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082d6:	61fb      	str	r3, [r7, #28]
        break;
 80082d8:	e005      	b.n	80082e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80082da:	2300      	movs	r3, #0
 80082dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80082e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d077      	beq.n	80083dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	005a      	lsls	r2, r3, #1
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	085b      	lsrs	r3, r3, #1
 80082f6:	441a      	add	r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008300:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	2b0f      	cmp	r3, #15
 8008306:	d916      	bls.n	8008336 <UART_SetConfig+0x4a6>
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800830e:	d212      	bcs.n	8008336 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	b29b      	uxth	r3, r3
 8008314:	f023 030f 	bic.w	r3, r3, #15
 8008318:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	085b      	lsrs	r3, r3, #1
 800831e:	b29b      	uxth	r3, r3
 8008320:	f003 0307 	and.w	r3, r3, #7
 8008324:	b29a      	uxth	r2, r3
 8008326:	8afb      	ldrh	r3, [r7, #22]
 8008328:	4313      	orrs	r3, r2
 800832a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	8afa      	ldrh	r2, [r7, #22]
 8008332:	60da      	str	r2, [r3, #12]
 8008334:	e052      	b.n	80083dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800833c:	e04e      	b.n	80083dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800833e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008342:	2b08      	cmp	r3, #8
 8008344:	d827      	bhi.n	8008396 <UART_SetConfig+0x506>
 8008346:	a201      	add	r2, pc, #4	; (adr r2, 800834c <UART_SetConfig+0x4bc>)
 8008348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834c:	08008371 	.word	0x08008371
 8008350:	08008379 	.word	0x08008379
 8008354:	08008381 	.word	0x08008381
 8008358:	08008397 	.word	0x08008397
 800835c:	08008387 	.word	0x08008387
 8008360:	08008397 	.word	0x08008397
 8008364:	08008397 	.word	0x08008397
 8008368:	08008397 	.word	0x08008397
 800836c:	0800838f 	.word	0x0800838f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008370:	f7fe fb22 	bl	80069b8 <HAL_RCC_GetPCLK1Freq>
 8008374:	61f8      	str	r0, [r7, #28]
        break;
 8008376:	e014      	b.n	80083a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008378:	f7fe fb34 	bl	80069e4 <HAL_RCC_GetPCLK2Freq>
 800837c:	61f8      	str	r0, [r7, #28]
        break;
 800837e:	e010      	b.n	80083a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008380:	4b1e      	ldr	r3, [pc, #120]	; (80083fc <UART_SetConfig+0x56c>)
 8008382:	61fb      	str	r3, [r7, #28]
        break;
 8008384:	e00d      	b.n	80083a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008386:	f7fe fa7f 	bl	8006888 <HAL_RCC_GetSysClockFreq>
 800838a:	61f8      	str	r0, [r7, #28]
        break;
 800838c:	e009      	b.n	80083a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800838e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008392:	61fb      	str	r3, [r7, #28]
        break;
 8008394:	e005      	b.n	80083a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008396:	2300      	movs	r3, #0
 8008398:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80083a0:	bf00      	nop
    }

    if (pclk != 0U)
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d019      	beq.n	80083dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	085a      	lsrs	r2, r3, #1
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	441a      	add	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	2b0f      	cmp	r3, #15
 80083c0:	d909      	bls.n	80083d6 <UART_SetConfig+0x546>
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083c8:	d205      	bcs.n	80083d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	60da      	str	r2, [r3, #12]
 80083d4:	e002      	b.n	80083dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80083e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3728      	adds	r7, #40	; 0x28
 80083f0:	46bd      	mov	sp, r7
 80083f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083f6:	bf00      	nop
 80083f8:	40008000 	.word	0x40008000
 80083fc:	00f42400 	.word	0x00f42400

08008400 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840c:	f003 0308 	and.w	r3, r3, #8
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00a      	beq.n	800842a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	430a      	orrs	r2, r1
 8008428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00a      	beq.n	800844c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	430a      	orrs	r2, r1
 800844a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008450:	f003 0302 	and.w	r3, r3, #2
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00a      	beq.n	800846e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	430a      	orrs	r2, r1
 800846c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008472:	f003 0304 	and.w	r3, r3, #4
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00a      	beq.n	8008490 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	430a      	orrs	r2, r1
 800848e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008494:	f003 0310 	and.w	r3, r3, #16
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00a      	beq.n	80084b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	430a      	orrs	r2, r1
 80084b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b6:	f003 0320 	and.w	r3, r3, #32
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00a      	beq.n	80084d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	430a      	orrs	r2, r1
 80084d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d01a      	beq.n	8008516 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	430a      	orrs	r2, r1
 80084f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084fe:	d10a      	bne.n	8008516 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	430a      	orrs	r2, r1
 8008514:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00a      	beq.n	8008538 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	430a      	orrs	r2, r1
 8008536:	605a      	str	r2, [r3, #4]
  }
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b098      	sub	sp, #96	; 0x60
 8008548:	af02      	add	r7, sp, #8
 800854a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008554:	f7fc f984 	bl	8004860 <HAL_GetTick>
 8008558:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0308 	and.w	r3, r3, #8
 8008564:	2b08      	cmp	r3, #8
 8008566:	d12e      	bne.n	80085c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008568:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008570:	2200      	movs	r2, #0
 8008572:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f88c 	bl	8008694 <UART_WaitOnFlagUntilTimeout>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d021      	beq.n	80085c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858a:	e853 3f00 	ldrex	r3, [r3]
 800858e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008596:	653b      	str	r3, [r7, #80]	; 0x50
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	461a      	mov	r2, r3
 800859e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085a0:	647b      	str	r3, [r7, #68]	; 0x44
 80085a2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085a8:	e841 2300 	strex	r3, r2, [r1]
 80085ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1e6      	bne.n	8008582 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2220      	movs	r2, #32
 80085b8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085c2:	2303      	movs	r3, #3
 80085c4:	e062      	b.n	800868c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0304 	and.w	r3, r3, #4
 80085d0:	2b04      	cmp	r3, #4
 80085d2:	d149      	bne.n	8008668 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085dc:	2200      	movs	r2, #0
 80085de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f856 	bl	8008694 <UART_WaitOnFlagUntilTimeout>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d03c      	beq.n	8008668 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f6:	e853 3f00 	ldrex	r3, [r3]
 80085fa:	623b      	str	r3, [r7, #32]
   return(result);
 80085fc:	6a3b      	ldr	r3, [r7, #32]
 80085fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	461a      	mov	r2, r3
 800860a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800860c:	633b      	str	r3, [r7, #48]	; 0x30
 800860e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008610:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008614:	e841 2300 	strex	r3, r2, [r1]
 8008618:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800861a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1e6      	bne.n	80085ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3308      	adds	r3, #8
 8008626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	e853 3f00 	ldrex	r3, [r3]
 800862e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f023 0301 	bic.w	r3, r3, #1
 8008636:	64bb      	str	r3, [r7, #72]	; 0x48
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	3308      	adds	r3, #8
 800863e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008640:	61fa      	str	r2, [r7, #28]
 8008642:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008644:	69b9      	ldr	r1, [r7, #24]
 8008646:	69fa      	ldr	r2, [r7, #28]
 8008648:	e841 2300 	strex	r3, r2, [r1]
 800864c:	617b      	str	r3, [r7, #20]
   return(result);
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1e5      	bne.n	8008620 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2220      	movs	r2, #32
 8008658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e011      	b.n	800868c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2220      	movs	r2, #32
 800866c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2220      	movs	r2, #32
 8008672:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3758      	adds	r7, #88	; 0x58
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	603b      	str	r3, [r7, #0]
 80086a0:	4613      	mov	r3, r2
 80086a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086a4:	e049      	b.n	800873a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ac:	d045      	beq.n	800873a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086ae:	f7fc f8d7 	bl	8004860 <HAL_GetTick>
 80086b2:	4602      	mov	r2, r0
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	69ba      	ldr	r2, [r7, #24]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d302      	bcc.n	80086c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d101      	bne.n	80086c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e048      	b.n	800875a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f003 0304 	and.w	r3, r3, #4
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d031      	beq.n	800873a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	69db      	ldr	r3, [r3, #28]
 80086dc:	f003 0308 	and.w	r3, r3, #8
 80086e0:	2b08      	cmp	r3, #8
 80086e2:	d110      	bne.n	8008706 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2208      	movs	r2, #8
 80086ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f000 f838 	bl	8008762 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2208      	movs	r2, #8
 80086f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	e029      	b.n	800875a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008714:	d111      	bne.n	800873a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800871e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f000 f81e 	bl	8008762 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2220      	movs	r2, #32
 800872a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008736:	2303      	movs	r3, #3
 8008738:	e00f      	b.n	800875a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	69da      	ldr	r2, [r3, #28]
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	4013      	ands	r3, r2
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	429a      	cmp	r2, r3
 8008748:	bf0c      	ite	eq
 800874a:	2301      	moveq	r3, #1
 800874c:	2300      	movne	r3, #0
 800874e:	b2db      	uxtb	r3, r3
 8008750:	461a      	mov	r2, r3
 8008752:	79fb      	ldrb	r3, [r7, #7]
 8008754:	429a      	cmp	r2, r3
 8008756:	d0a6      	beq.n	80086a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008762:	b480      	push	{r7}
 8008764:	b095      	sub	sp, #84	; 0x54
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008772:	e853 3f00 	ldrex	r3, [r3]
 8008776:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800877e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	461a      	mov	r2, r3
 8008786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008788:	643b      	str	r3, [r7, #64]	; 0x40
 800878a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800878e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008790:	e841 2300 	strex	r3, r2, [r1]
 8008794:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1e6      	bne.n	800876a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	3308      	adds	r3, #8
 80087a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a4:	6a3b      	ldr	r3, [r7, #32]
 80087a6:	e853 3f00 	ldrex	r3, [r3]
 80087aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	f023 0301 	bic.w	r3, r3, #1
 80087b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	3308      	adds	r3, #8
 80087ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087c4:	e841 2300 	strex	r3, r2, [r1]
 80087c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1e5      	bne.n	800879c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d118      	bne.n	800880a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	e853 3f00 	ldrex	r3, [r3]
 80087e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	f023 0310 	bic.w	r3, r3, #16
 80087ec:	647b      	str	r3, [r7, #68]	; 0x44
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	461a      	mov	r2, r3
 80087f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087f6:	61bb      	str	r3, [r7, #24]
 80087f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fa:	6979      	ldr	r1, [r7, #20]
 80087fc:	69ba      	ldr	r2, [r7, #24]
 80087fe:	e841 2300 	strex	r3, r2, [r1]
 8008802:	613b      	str	r3, [r7, #16]
   return(result);
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1e6      	bne.n	80087d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2220      	movs	r2, #32
 800880e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800881e:	bf00      	nop
 8008820:	3754      	adds	r7, #84	; 0x54
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800882a:	b5b0      	push	{r4, r5, r7, lr}
 800882c:	b0ce      	sub	sp, #312	; 0x138
 800882e:	af00      	add	r7, sp, #0
 8008830:	4605      	mov	r5, r0
 8008832:	460c      	mov	r4, r1
 8008834:	4610      	mov	r0, r2
 8008836:	4619      	mov	r1, r3
 8008838:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800883c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008840:	462a      	mov	r2, r5
 8008842:	701a      	strb	r2, [r3, #0]
 8008844:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008848:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800884c:	4622      	mov	r2, r4
 800884e:	801a      	strh	r2, [r3, #0]
 8008850:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008854:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8008858:	4602      	mov	r2, r0
 800885a:	801a      	strh	r2, [r3, #0]
 800885c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008860:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008864:	460a      	mov	r2, r1
 8008866:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8008868:	f107 030c 	add.w	r3, r7, #12
 800886c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008870:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008874:	3308      	adds	r3, #8
 8008876:	f107 020c 	add.w	r2, r7, #12
 800887a:	4413      	add	r3, r2
 800887c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008880:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008884:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008888:	4413      	add	r3, r2
 800888a:	3309      	adds	r3, #9
 800888c:	f107 020c 	add.w	r2, r7, #12
 8008890:	4413      	add	r3, r2
 8008892:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008896:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800889a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800889e:	2200      	movs	r2, #0
 80088a0:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80088a2:	2300      	movs	r3, #0
 80088a4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 80088a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80088ac:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80088b0:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80088b4:	7812      	ldrb	r2, [r2, #0]
 80088b6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80088b8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80088bc:	3301      	adds	r3, #1
 80088be:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 80088c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80088c6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80088ca:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80088ce:	8812      	ldrh	r2, [r2, #0]
 80088d0:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80088d4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80088d8:	3302      	adds	r3, #2
 80088da:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 80088de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80088e2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80088e6:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80088ea:	8812      	ldrh	r2, [r2, #0]
 80088ec:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80088f0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80088f4:	3302      	adds	r3, #2
 80088f6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 80088fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80088fe:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008902:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008906:	7812      	ldrb	r2, [r2, #0]
 8008908:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800890a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800890e:	3301      	adds	r3, #1
 8008910:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8008914:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008918:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800891c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800891e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008922:	3301      	adds	r3, #1
 8008924:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8008928:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800892c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008930:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008932:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008936:	3301      	adds	r3, #1
 8008938:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 800893c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008940:	3308      	adds	r3, #8
 8008942:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008946:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800894a:	4618      	mov	r0, r3
 800894c:	f003 fd97 	bl	800c47e <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 8008950:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8008954:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008958:	4413      	add	r3, r2
 800895a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 800895e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008962:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008966:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008968:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800896c:	3301      	adds	r3, #1
 800896e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 8008972:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008976:	3301      	adds	r3, #1
 8008978:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800897c:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8008980:	4618      	mov	r0, r3
 8008982:	f003 fd7c 	bl	800c47e <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 8008986:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800898a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800898e:	4413      	add	r3, r2
 8008990:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8008994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008998:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800899c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800899e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80089a2:	3302      	adds	r3, #2
 80089a4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 80089a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089ac:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80089b0:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80089b2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80089b6:	3302      	adds	r3, #2
 80089b8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80089bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089c0:	2218      	movs	r2, #24
 80089c2:	2100      	movs	r1, #0
 80089c4:	4618      	mov	r0, r3
 80089c6:	f003 fcdb 	bl	800c380 <memset>
  rq.ogf = 0x3f;
 80089ca:	233f      	movs	r3, #63	; 0x3f
 80089cc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80089d0:	2383      	movs	r3, #131	; 0x83
 80089d2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80089d6:	f107 030c 	add.w	r3, r7, #12
 80089da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80089de:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80089e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80089e6:	f107 030b 	add.w	r3, r7, #11
 80089ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80089ee:	2301      	movs	r3, #1
 80089f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80089f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089f8:	2100      	movs	r1, #0
 80089fa:	4618      	mov	r0, r3
 80089fc:	f002 fb1e 	bl	800b03c <hci_send_req>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	da01      	bge.n	8008a0a <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8008a06:	23ff      	movs	r3, #255	; 0xff
 8008a08:	e00d      	b.n	8008a26 <aci_gap_set_discoverable+0x1fc>
  if (status) {
 8008a0a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008a0e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d005      	beq.n	8008a24 <aci_gap_set_discoverable+0x1fa>
    return status;
 8008a18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008a1c:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	e000      	b.n	8008a26 <aci_gap_set_discoverable+0x1fc>
  }
  return BLE_STATUS_SUCCESS;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bdb0      	pop	{r4, r5, r7, pc}

08008a30 <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 8008a30:	b5b0      	push	{r4, r5, r7, lr}
 8008a32:	b0cc      	sub	sp, #304	; 0x130
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	4605      	mov	r5, r0
 8008a38:	460c      	mov	r4, r1
 8008a3a:	4610      	mov	r0, r2
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a42:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008a46:	462a      	mov	r2, r5
 8008a48:	701a      	strb	r2, [r3, #0]
 8008a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a4e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008a52:	4622      	mov	r2, r4
 8008a54:	701a      	strb	r2, [r3, #0]
 8008a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a5a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008a5e:	4602      	mov	r2, r0
 8008a60:	701a      	strb	r2, [r3, #0]
 8008a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a6a:	460a      	mov	r2, r1
 8008a6c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8008a6e:	f107 030c 	add.w	r3, r7, #12
 8008a72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a7a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8008a7e:	2200      	movs	r2, #0
 8008a80:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8008a82:	2300      	movs	r3, #0
 8008a84:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 8008a88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a8c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a90:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008a94:	7812      	ldrb	r2, [r2, #0]
 8008a96:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008a98:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 8008aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aa6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008aaa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008aae:	7812      	ldrb	r2, [r2, #0]
 8008ab0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008ab2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->SC_Support = htob(SC_Support, 1);
 8008abc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ac0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ac4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008ac8:	7812      	ldrb	r2, [r2, #0]
 8008aca:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008acc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 8008ad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ada:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ade:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008ae2:	7812      	ldrb	r2, [r2, #0]
 8008ae4:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008ae6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008aea:	3301      	adds	r3, #1
 8008aec:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 8008af0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008af4:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008af8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008afa:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008afe:	3301      	adds	r3, #1
 8008b00:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 8008b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b08:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8008b0c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008b0e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008b12:	3301      	adds	r3, #1
 8008b14:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 8008b18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b1c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008b20:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008b22:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008b26:	3301      	adds	r3, #1
 8008b28:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 8008b2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b30:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008b34:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008b38:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008b3c:	3304      	adds	r3, #4
 8008b3e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 8008b42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b46:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008b4a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008b4c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008b50:	3301      	adds	r3, #1
 8008b52:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008b56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b5a:	2218      	movs	r2, #24
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f003 fc0e 	bl	800c380 <memset>
  rq.ogf = 0x3f;
 8008b64:	233f      	movs	r3, #63	; 0x3f
 8008b66:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8008b6a:	2386      	movs	r3, #134	; 0x86
 8008b6c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008b70:	f107 030c 	add.w	r3, r7, #12
 8008b74:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008b78:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008b7c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008b80:	f107 030b 	add.w	r3, r7, #11
 8008b84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008b8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b92:	2100      	movs	r1, #0
 8008b94:	4618      	mov	r0, r3
 8008b96:	f002 fa51 	bl	800b03c <hci_send_req>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	da01      	bge.n	8008ba4 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8008ba0:	23ff      	movs	r3, #255	; 0xff
 8008ba2:	e00d      	b.n	8008bc0 <aci_gap_set_authentication_requirement+0x190>
  if (status) {
 8008ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ba8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d005      	beq.n	8008bbe <aci_gap_set_authentication_requirement+0x18e>
    return status;
 8008bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bb6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	e000      	b.n	8008bc0 <aci_gap_set_authentication_requirement+0x190>
  }
  return BLE_STATUS_SUCCESS;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bdb0      	pop	{r4, r5, r7, pc}

08008bca <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8008bca:	b590      	push	{r4, r7, lr}
 8008bcc:	b0cf      	sub	sp, #316	; 0x13c
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	4604      	mov	r4, r0
 8008bd2:	4608      	mov	r0, r1
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008bda:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8008bde:	6013      	str	r3, [r2, #0]
 8008be0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008be4:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008be8:	4622      	mov	r2, r4
 8008bea:	701a      	strb	r2, [r3, #0]
 8008bec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008bf0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	701a      	strb	r2, [r3, #0]
 8008bf8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008bfc:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008c00:	460a      	mov	r2, r1
 8008c02:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008c04:	f107 0314 	add.w	r3, r7, #20
 8008c08:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008c0c:	f107 030c 	add.w	r3, r7, #12
 8008c10:	2207      	movs	r2, #7
 8008c12:	2100      	movs	r1, #0
 8008c14:	4618      	mov	r0, r3
 8008c16:	f003 fbb3 	bl	800c380 <memset>
  uint8_t index_input = 0;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 8008c20:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008c24:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008c28:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008c2c:	7812      	ldrb	r2, [r2, #0]
 8008c2e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008c30:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8008c34:	3301      	adds	r3, #1
 8008c36:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8008c3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008c3e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008c42:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008c46:	7812      	ldrb	r2, [r2, #0]
 8008c48:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008c4a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8008c4e:	3301      	adds	r3, #1
 8008c50:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8008c54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008c58:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008c5c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8008c60:	7812      	ldrb	r2, [r2, #0]
 8008c62:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008c64:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8008c68:	3301      	adds	r3, #1
 8008c6a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008c6e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008c72:	2218      	movs	r2, #24
 8008c74:	2100      	movs	r1, #0
 8008c76:	4618      	mov	r0, r3
 8008c78:	f003 fb82 	bl	800c380 <memset>
  rq.ogf = 0x3f;
 8008c7c:	233f      	movs	r3, #63	; 0x3f
 8008c7e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 8008c82:	238a      	movs	r3, #138	; 0x8a
 8008c84:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008c88:	f107 0314 	add.w	r3, r7, #20
 8008c8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008c90:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8008c94:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8008c98:	f107 030c 	add.w	r3, r7, #12
 8008c9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8008ca0:	2307      	movs	r3, #7
 8008ca2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8008ca6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008caa:	2100      	movs	r1, #0
 8008cac:	4618      	mov	r0, r3
 8008cae:	f002 f9c5 	bl	800b03c <hci_send_req>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	da01      	bge.n	8008cbc <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008cb8:	23ff      	movs	r3, #255	; 0xff
 8008cba:	e02e      	b.n	8008d1a <aci_gap_init+0x150>
  if (resp.Status) {
 8008cbc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008cc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d005      	beq.n	8008cd6 <aci_gap_init+0x10c>
    return resp.Status;
 8008cca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008cce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	e021      	b.n	8008d1a <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8008cd6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008cda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008cde:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ce8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8008cf0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008cf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008cf8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008d02:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8008d04:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008d08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d0c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008d16:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd90      	pop	{r4, r7, pc}

08008d24 <aci_gap_update_adv_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b0cc      	sub	sp, #304	; 0x130
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d34:	6019      	str	r1, [r3, #0]
 8008d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d3a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008d3e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008d40:	f107 030c 	add.w	r3, r7, #12
 8008d44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d4c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8008d50:	2200      	movs	r2, #0
 8008d52:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8008d54:	2300      	movs	r3, #0
 8008d56:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 8008d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d5e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d62:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008d66:	7812      	ldrb	r2, [r2, #0]
 8008d68:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008d6a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008d6e:	3301      	adds	r3, #1
 8008d70:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen*sizeof(uint8_t));
 8008d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d78:	1c58      	adds	r0, r3, #1
 8008d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d7e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008d82:	781a      	ldrb	r2, [r3, #0]
 8008d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d8c:	6819      	ldr	r1, [r3, #0]
 8008d8e:	f003 fb76 	bl	800c47e <memcpy>
    index_input += AdvDataLen*sizeof(uint8_t);
 8008d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d96:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008d9a:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	4413      	add	r3, r2
 8008da2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008da6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008daa:	2218      	movs	r2, #24
 8008dac:	2100      	movs	r1, #0
 8008dae:	4618      	mov	r0, r3
 8008db0:	f003 fae6 	bl	800c380 <memset>
  rq.ogf = 0x3f;
 8008db4:	233f      	movs	r3, #63	; 0x3f
 8008db6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8008dba:	238e      	movs	r3, #142	; 0x8e
 8008dbc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008dc0:	f107 030c 	add.w	r3, r7, #12
 8008dc4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008dc8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008dcc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008dd0:	f107 030b 	add.w	r3, r7, #11
 8008dd4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008dde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008de2:	2100      	movs	r1, #0
 8008de4:	4618      	mov	r0, r3
 8008de6:	f002 f929 	bl	800b03c <hci_send_req>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	da01      	bge.n	8008df4 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8008df0:	23ff      	movs	r3, #255	; 0xff
 8008df2:	e00d      	b.n	8008e10 <aci_gap_update_adv_data+0xec>
  if (status) {
 8008df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008df8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d005      	beq.n	8008e0e <aci_gap_update_adv_data+0xea>
    return status;
 8008e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e06:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	e000      	b.n	8008e10 <aci_gap_update_adv_data+0xec>
  }
  return BLE_STATUS_SUCCESS;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b088      	sub	sp, #32
 8008e1e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008e20:	2300      	movs	r3, #0
 8008e22:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008e24:	f107 0308 	add.w	r3, r7, #8
 8008e28:	2218      	movs	r2, #24
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f003 faa7 	bl	800c380 <memset>
  rq.ogf = 0x3f;
 8008e32:	233f      	movs	r3, #63	; 0x3f
 8008e34:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008e36:	f240 1301 	movw	r3, #257	; 0x101
 8008e3a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008e3c:	1dfb      	adds	r3, r7, #7
 8008e3e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008e40:	2301      	movs	r3, #1
 8008e42:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8008e44:	f107 0308 	add.w	r3, r7, #8
 8008e48:	2100      	movs	r1, #0
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f002 f8f6 	bl	800b03c <hci_send_req>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	da01      	bge.n	8008e5a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008e56:	23ff      	movs	r3, #255	; 0xff
 8008e58:	e005      	b.n	8008e66 <aci_gatt_init+0x4c>
  if (status) {
 8008e5a:	79fb      	ldrb	r3, [r7, #7]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d001      	beq.n	8008e64 <aci_gatt_init+0x4a>
    return status;
 8008e60:	79fb      	ldrb	r3, [r7, #7]
 8008e62:	e000      	b.n	8008e66 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3720      	adds	r7, #32
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8008e6e:	b590      	push	{r4, r7, lr}
 8008e70:	b0cf      	sub	sp, #316	; 0x13c
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	4604      	mov	r4, r0
 8008e76:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8008e7a:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8008e7e:	6001      	str	r1, [r0, #0]
 8008e80:	4610      	mov	r0, r2
 8008e82:	4619      	mov	r1, r3
 8008e84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008e88:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008e8c:	4622      	mov	r2, r4
 8008e8e:	701a      	strb	r2, [r3, #0]
 8008e90:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008e94:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008e98:	4602      	mov	r2, r0
 8008e9a:	701a      	strb	r2, [r3, #0]
 8008e9c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ea0:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008ea4:	460a      	mov	r2, r1
 8008ea6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8008ea8:	f107 030c 	add.w	r3, r7, #12
 8008eac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008eb0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008eb4:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d00a      	beq.n	8008ed4 <aci_gatt_add_service+0x66>
 8008ebe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ec2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d101      	bne.n	8008ed0 <aci_gatt_add_service+0x62>
 8008ecc:	2311      	movs	r3, #17
 8008ece:	e002      	b.n	8008ed6 <aci_gatt_add_service+0x68>
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e000      	b.n	8008ed6 <aci_gatt_add_service+0x68>
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	f107 020c 	add.w	r2, r7, #12
 8008eda:	4413      	add	r3, r2
 8008edc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008ee0:	f107 0308 	add.w	r3, r7, #8
 8008ee4:	2203      	movs	r2, #3
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f003 fa49 	bl	800c380 <memset>
  uint8_t index_input = 0;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8008ef4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008ef8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008efc:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008f00:	7812      	ldrb	r2, [r2, #0]
 8008f02:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008f04:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008f08:	3301      	adds	r3, #1
 8008f0a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 8008f0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008f12:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d002      	beq.n	8008f22 <aci_gatt_add_service+0xb4>
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d004      	beq.n	8008f2a <aci_gatt_add_service+0xbc>
 8008f20:	e007      	b.n	8008f32 <aci_gatt_add_service+0xc4>
      case 1: size = 2; break;
 8008f22:	2302      	movs	r3, #2
 8008f24:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008f28:	e005      	b.n	8008f36 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8008f2a:	2310      	movs	r3, #16
 8008f2c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008f30:	e001      	b.n	8008f36 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8008f32:	2347      	movs	r3, #71	; 0x47
 8008f34:	e06c      	b.n	8009010 <aci_gatt_add_service+0x1a2>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 8008f36:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008f3a:	1c58      	adds	r0, r3, #1
 8008f3c:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8008f40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008f44:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008f48:	6819      	ldr	r1, [r3, #0]
 8008f4a:	f003 fa98 	bl	800c47e <memcpy>
    index_input += size;
 8008f4e:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8008f52:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8008f56:	4413      	add	r3, r2
 8008f58:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 8008f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f60:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008f64:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008f68:	7812      	ldrb	r2, [r2, #0]
 8008f6a:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008f6c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008f70:	3301      	adds	r3, #1
 8008f72:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8008f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f7a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008f7e:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8008f82:	7812      	ldrb	r2, [r2, #0]
 8008f84:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8008f86:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008f90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f94:	2218      	movs	r2, #24
 8008f96:	2100      	movs	r1, #0
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f003 f9f1 	bl	800c380 <memset>
  rq.ogf = 0x3f;
 8008f9e:	233f      	movs	r3, #63	; 0x3f
 8008fa0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8008fa4:	f44f 7381 	mov.w	r3, #258	; 0x102
 8008fa8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008fac:	f107 030c 	add.w	r3, r7, #12
 8008fb0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008fb4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008fb8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008fbc:	f107 0308 	add.w	r3, r7, #8
 8008fc0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008fc4:	2303      	movs	r3, #3
 8008fc6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8008fca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008fce:	2100      	movs	r1, #0
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f002 f833 	bl	800b03c <hci_send_req>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	da01      	bge.n	8008fe0 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8008fdc:	23ff      	movs	r3, #255	; 0xff
 8008fde:	e017      	b.n	8009010 <aci_gatt_add_service+0x1a2>
  if (resp.Status) {
 8008fe0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008fe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d005      	beq.n	8008ffa <aci_gatt_add_service+0x18c>
    return resp.Status;
 8008fee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ff2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	e00a      	b.n	8009010 <aci_gatt_add_service+0x1a2>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8008ffa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ffe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009002:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009006:	b29a      	uxth	r2, r3
 8009008:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800900c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009016:	46bd      	mov	sp, r7
 8009018:	bd90      	pop	{r4, r7, pc}

0800901a <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800901a:	b590      	push	{r4, r7, lr}
 800901c:	b0d1      	sub	sp, #324	; 0x144
 800901e:	af00      	add	r7, sp, #0
 8009020:	4604      	mov	r4, r0
 8009022:	4608      	mov	r0, r1
 8009024:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8009028:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800902c:	600a      	str	r2, [r1, #0]
 800902e:	4619      	mov	r1, r3
 8009030:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009034:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009038:	4622      	mov	r2, r4
 800903a:	801a      	strh	r2, [r3, #0]
 800903c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009040:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009044:	4602      	mov	r2, r0
 8009046:	701a      	strb	r2, [r3, #0]
 8009048:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800904c:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8009050:	460a      	mov	r2, r1
 8009052:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009054:	f107 0314 	add.w	r3, r7, #20
 8009058:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800905c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009060:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d00a      	beq.n	8009080 <aci_gatt_add_char+0x66>
 800906a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800906e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	2b02      	cmp	r3, #2
 8009076:	d101      	bne.n	800907c <aci_gatt_add_char+0x62>
 8009078:	2313      	movs	r3, #19
 800907a:	e002      	b.n	8009082 <aci_gatt_add_char+0x68>
 800907c:	2303      	movs	r3, #3
 800907e:	e000      	b.n	8009082 <aci_gatt_add_char+0x68>
 8009080:	2305      	movs	r3, #5
 8009082:	f107 0214 	add.w	r2, r7, #20
 8009086:	4413      	add	r3, r2
 8009088:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800908c:	f107 0310 	add.w	r3, r7, #16
 8009090:	2203      	movs	r2, #3
 8009092:	2100      	movs	r1, #0
 8009094:	4618      	mov	r0, r3
 8009096:	f003 f973 	bl	800c380 <memset>
  uint8_t index_input = 0;
 800909a:	2300      	movs	r3, #0
 800909c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 80090a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80090a4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80090a8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80090ac:	8812      	ldrh	r2, [r2, #0]
 80090ae:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80090b0:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80090b4:	3302      	adds	r3, #2
 80090b6:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 80090ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80090be:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80090c2:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80090c6:	7812      	ldrb	r2, [r2, #0]
 80090c8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80090ca:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80090ce:	3301      	adds	r3, #1
 80090d0:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 80090d4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80090d8:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d002      	beq.n	80090e8 <aci_gatt_add_char+0xce>
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d004      	beq.n	80090f0 <aci_gatt_add_char+0xd6>
 80090e6:	e007      	b.n	80090f8 <aci_gatt_add_char+0xde>
      case 1: size = 2; break;
 80090e8:	2302      	movs	r3, #2
 80090ea:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80090ee:	e005      	b.n	80090fc <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80090f0:	2310      	movs	r3, #16
 80090f2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80090f6:	e001      	b.n	80090fc <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80090f8:	2347      	movs	r3, #71	; 0x47
 80090fa:	e091      	b.n	8009220 <aci_gatt_add_char+0x206>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 80090fc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009100:	1cd8      	adds	r0, r3, #3
 8009102:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8009106:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800910a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800910e:	6819      	ldr	r1, [r3, #0]
 8009110:	f003 f9b5 	bl	800c47e <memcpy>
    index_input += size;
 8009114:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8009118:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800911c:	4413      	add	r3, r2
 800911e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 8009122:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009126:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800912a:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800912e:	8812      	ldrh	r2, [r2, #0]
 8009130:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009132:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009136:	3302      	adds	r3, #2
 8009138:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 800913c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009140:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009144:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009146:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800914a:	3301      	adds	r3, #1
 800914c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 8009150:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009154:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009158:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800915a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800915e:	3301      	adds	r3, #1
 8009160:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 8009164:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009168:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800916c:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800916e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009172:	3301      	adds	r3, #1
 8009174:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 8009178:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800917c:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8009180:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8009182:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8009186:	3301      	adds	r3, #1
 8009188:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 800918c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009190:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8009194:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8009196:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800919a:	3301      	adds	r3, #1
 800919c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80091a0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80091a4:	2218      	movs	r2, #24
 80091a6:	2100      	movs	r1, #0
 80091a8:	4618      	mov	r0, r3
 80091aa:	f003 f8e9 	bl	800c380 <memset>
  rq.ogf = 0x3f;
 80091ae:	233f      	movs	r3, #63	; 0x3f
 80091b0:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 80091b4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80091b8:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80091bc:	f107 0314 	add.w	r3, r7, #20
 80091c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80091c4:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80091c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80091cc:	f107 0310 	add.w	r3, r7, #16
 80091d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80091d4:	2303      	movs	r3, #3
 80091d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 80091da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80091de:	2100      	movs	r1, #0
 80091e0:	4618      	mov	r0, r3
 80091e2:	f001 ff2b 	bl	800b03c <hci_send_req>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	da01      	bge.n	80091f0 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80091ec:	23ff      	movs	r3, #255	; 0xff
 80091ee:	e017      	b.n	8009220 <aci_gatt_add_char+0x206>
  if (resp.Status) {
 80091f0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80091f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d005      	beq.n	800920a <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80091fe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009202:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	e00a      	b.n	8009220 <aci_gatt_add_char+0x206>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 800920a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800920e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009212:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009216:	b29a      	uxth	r2, r3
 8009218:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800921c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8009226:	46bd      	mov	sp, r7
 8009228:	bd90      	pop	{r4, r7, pc}

0800922a <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800922a:	b5b0      	push	{r4, r5, r7, lr}
 800922c:	b0cc      	sub	sp, #304	; 0x130
 800922e:	af00      	add	r7, sp, #0
 8009230:	4605      	mov	r5, r0
 8009232:	460c      	mov	r4, r1
 8009234:	4610      	mov	r0, r2
 8009236:	4619      	mov	r1, r3
 8009238:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800923c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009240:	462a      	mov	r2, r5
 8009242:	801a      	strh	r2, [r3, #0]
 8009244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009248:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800924c:	4622      	mov	r2, r4
 800924e:	801a      	strh	r2, [r3, #0]
 8009250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009254:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009258:	4602      	mov	r2, r0
 800925a:	701a      	strb	r2, [r3, #0]
 800925c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009260:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009264:	460a      	mov	r2, r1
 8009266:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009268:	f107 030c 	add.w	r3, r7, #12
 800926c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009274:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009278:	2200      	movs	r2, #0
 800927a:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800927c:	2300      	movs	r3, #0
 800927e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 8009282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009286:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800928a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800928e:	8812      	ldrh	r2, [r2, #0]
 8009290:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009292:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009296:	3302      	adds	r3, #2
 8009298:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 800929c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092a4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80092a8:	8812      	ldrh	r2, [r2, #0]
 80092aa:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80092ac:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80092b0:	3302      	adds	r3, #2
 80092b2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 80092b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092be:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80092c2:	7812      	ldrb	r2, [r2, #0]
 80092c4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80092c6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80092ca:	3301      	adds	r3, #1
 80092cc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 80092d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092d8:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80092dc:	7812      	ldrb	r2, [r2, #0]
 80092de:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80092e0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80092e4:	3301      	adds	r3, #1
 80092e6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 80092ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092ee:	1d98      	adds	r0, r3, #6
 80092f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092f4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	461a      	mov	r2, r3
 80092fc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009300:	f003 f8bd 	bl	800c47e <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 8009304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009308:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800930c:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	4413      	add	r3, r2
 8009314:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009318:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800931c:	2218      	movs	r2, #24
 800931e:	2100      	movs	r1, #0
 8009320:	4618      	mov	r0, r3
 8009322:	f003 f82d 	bl	800c380 <memset>
  rq.ogf = 0x3f;
 8009326:	233f      	movs	r3, #63	; 0x3f
 8009328:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800932c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009330:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009334:	f107 030c 	add.w	r3, r7, #12
 8009338:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800933c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8009340:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009344:	f107 030b 	add.w	r3, r7, #11
 8009348:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800934c:	2301      	movs	r3, #1
 800934e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8009352:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009356:	2100      	movs	r1, #0
 8009358:	4618      	mov	r0, r3
 800935a:	f001 fe6f 	bl	800b03c <hci_send_req>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	da01      	bge.n	8009368 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8009364:	23ff      	movs	r3, #255	; 0xff
 8009366:	e00d      	b.n	8009384 <aci_gatt_update_char_value+0x15a>
  if (status) {
 8009368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800936c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d005      	beq.n	8009382 <aci_gatt_update_char_value+0x158>
    return status;
 8009376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800937a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	e000      	b.n	8009384 <aci_gatt_update_char_value+0x15a>
  }
  return BLE_STATUS_SUCCESS;
 8009382:	2300      	movs	r3, #0
}
 8009384:	4618      	mov	r0, r3
 8009386:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800938a:	46bd      	mov	sp, r7
 800938c:	bdb0      	pop	{r4, r5, r7, pc}

0800938e <aci_gatt_allow_read>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_allow_read(uint16_t Connection_Handle)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b0cc      	sub	sp, #304	; 0x130
 8009392:	af00      	add	r7, sp, #0
 8009394:	4602      	mov	r2, r0
 8009396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800939a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800939e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 80093a0:	f107 030c 	add.w	r3, r7, #12
 80093a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80093a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093ac:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80093b0:	2200      	movs	r2, #0
 80093b2:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80093b4:	2300      	movs	r3, #0
 80093b6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 80093ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80093c2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80093c6:	8812      	ldrh	r2, [r2, #0]
 80093c8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80093ca:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80093ce:	3302      	adds	r3, #2
 80093d0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80093d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80093d8:	2218      	movs	r2, #24
 80093da:	2100      	movs	r1, #0
 80093dc:	4618      	mov	r0, r3
 80093de:	f002 ffcf 	bl	800c380 <memset>
  rq.ogf = 0x3f;
 80093e2:	233f      	movs	r3, #63	; 0x3f
 80093e4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x127;
 80093e8:	f240 1327 	movw	r3, #295	; 0x127
 80093ec:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80093f0:	f107 030c 	add.w	r3, r7, #12
 80093f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80093f8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80093fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009400:	f107 030b 	add.w	r3, r7, #11
 8009404:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009408:	2301      	movs	r3, #1
 800940a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800940e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009412:	2100      	movs	r1, #0
 8009414:	4618      	mov	r0, r3
 8009416:	f001 fe11 	bl	800b03c <hci_send_req>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	da01      	bge.n	8009424 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 8009420:	23ff      	movs	r3, #255	; 0xff
 8009422:	e00d      	b.n	8009440 <aci_gatt_allow_read+0xb2>
  if (status) {
 8009424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009428:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d005      	beq.n	800943e <aci_gatt_allow_read+0xb0>
    return status;
 8009432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009436:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	e000      	b.n	8009440 <aci_gatt_allow_read+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <aci_hal_read_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_read_config_data(uint8_t Offset,
                                    uint8_t *Data_Length,
                                    uint8_t Data[])
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b0ee      	sub	sp, #440	; 0x1b8
 800944e:	af00      	add	r7, sp, #0
 8009450:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009454:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009458:	6019      	str	r1, [r3, #0]
 800945a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800945e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009462:	601a      	str	r2, [r3, #0]
 8009464:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009468:	f2a3 13a9 	subw	r3, r3, #425	; 0x1a9
 800946c:	4602      	mov	r2, r0
 800946e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_read_config_data_cp0 *cp0 = (aci_hal_read_config_data_cp0*)(cmd_buffer);
 8009470:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8009474:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  aci_hal_read_config_data_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8009478:	f107 0314 	add.w	r3, r7, #20
 800947c:	2280      	movs	r2, #128	; 0x80
 800947e:	2100      	movs	r1, #0
 8009480:	4618      	mov	r0, r3
 8009482:	f002 ff7d 	bl	800c380 <memset>
  uint8_t index_input = 0;
 8009486:	2300      	movs	r3, #0
 8009488:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
  cp0->Offset = htob(Offset, 1);
 800948c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8009490:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8009494:	f2a2 12a9 	subw	r2, r2, #425	; 0x1a9
 8009498:	7812      	ldrb	r2, [r2, #0]
 800949a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800949c:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 80094a0:	3301      	adds	r3, #1
 80094a2:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80094a6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80094aa:	2218      	movs	r2, #24
 80094ac:	2100      	movs	r1, #0
 80094ae:	4618      	mov	r0, r3
 80094b0:	f002 ff66 	bl	800c380 <memset>
  rq.ogf = 0x3f;
 80094b4:	233f      	movs	r3, #63	; 0x3f
 80094b6:	f8a7 3198 	strh.w	r3, [r7, #408]	; 0x198
  rq.ocf = 0x00d;
 80094ba:	230d      	movs	r3, #13
 80094bc:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
  rq.cparam = cmd_buffer;
 80094c0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80094c4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  rq.clen = index_input;
 80094c8:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 80094cc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  rq.rparam = &resp;
 80094d0:	f107 0314 	add.w	r3, r7, #20
 80094d4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  rq.rlen = sizeof(resp);
 80094d8:	2380      	movs	r3, #128	; 0x80
 80094da:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  if (hci_send_req(&rq, FALSE) < 0)
 80094de:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80094e2:	2100      	movs	r1, #0
 80094e4:	4618      	mov	r0, r3
 80094e6:	f001 fda9 	bl	800b03c <hci_send_req>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	da01      	bge.n	80094f4 <aci_hal_read_config_data+0xaa>
    return BLE_STATUS_TIMEOUT;
 80094f0:	23ff      	movs	r3, #255	; 0xff
 80094f2:	e029      	b.n	8009548 <aci_hal_read_config_data+0xfe>
  if (resp.Status) {
 80094f4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80094f8:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d005      	beq.n	800950e <aci_hal_read_config_data+0xc4>
    return resp.Status;
 8009502:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009506:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	e01c      	b.n	8009548 <aci_hal_read_config_data+0xfe>
  }
  *Data_Length = btoh(resp.Data_Length, 1);
 800950e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009512:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8009516:	785a      	ldrb	r2, [r3, #1]
 8009518:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800951c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
 8009524:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8009528:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	461a      	mov	r2, r3
 8009532:	f107 0314 	add.w	r3, r7, #20
 8009536:	1c99      	adds	r1, r3, #2
 8009538:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800953c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009540:	6818      	ldr	r0, [r3, #0]
 8009542:	f002 ff9c 	bl	800c47e <memcpy>
  return BLE_STATUS_SUCCESS;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <aci_hal_set_tx_power_level>:
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b0cc      	sub	sp, #304	; 0x130
 8009556:	af00      	add	r7, sp, #0
 8009558:	4602      	mov	r2, r0
 800955a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800955e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009562:	701a      	strb	r2, [r3, #0]
 8009564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009568:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800956c:	460a      	mov	r2, r1
 800956e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009570:	f107 030c 	add.w	r3, r7, #12
 8009574:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800957c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009580:	2200      	movs	r2, #0
 8009582:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8009584:	2300      	movs	r3, #0
 8009586:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->En_High_Power = htob(En_High_Power, 1);
 800958a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800958e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009592:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009596:	7812      	ldrb	r2, [r2, #0]
 8009598:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800959a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800959e:	3301      	adds	r3, #1
 80095a0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->PA_Level = htob(PA_Level, 1);
 80095a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80095ac:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80095b0:	7812      	ldrb	r2, [r2, #0]
 80095b2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80095b4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80095b8:	3301      	adds	r3, #1
 80095ba:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80095be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80095c2:	2218      	movs	r2, #24
 80095c4:	2100      	movs	r1, #0
 80095c6:	4618      	mov	r0, r3
 80095c8:	f002 feda 	bl	800c380 <memset>
  rq.ogf = 0x3f;
 80095cc:	233f      	movs	r3, #63	; 0x3f
 80095ce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80095d2:	230f      	movs	r3, #15
 80095d4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80095d8:	f107 030c 	add.w	r3, r7, #12
 80095dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80095e0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80095e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80095e8:	f107 030b 	add.w	r3, r7, #11
 80095ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80095f0:	2301      	movs	r3, #1
 80095f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80095f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80095fa:	2100      	movs	r1, #0
 80095fc:	4618      	mov	r0, r3
 80095fe:	f001 fd1d 	bl	800b03c <hci_send_req>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	da01      	bge.n	800960c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8009608:	23ff      	movs	r3, #255	; 0xff
 800960a:	e00d      	b.n	8009628 <aci_hal_set_tx_power_level+0xd6>
  if (status) {
 800960c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009610:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d005      	beq.n	8009626 <aci_hal_set_tx_power_level+0xd4>
    return status;
 800961a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800961e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	e000      	b.n	8009628 <aci_hal_set_tx_power_level+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 8009626:	2300      	movs	r3, #0
}
 8009628:	4618      	mov	r0, r3
 800962a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b084      	sub	sp, #16
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800963a:	2300      	movs	r3, #0
 800963c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	7818      	ldrb	r0, [r3, #0]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800964c:	b299      	uxth	r1, r3
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	78db      	ldrb	r3, [r3, #3]
 8009652:	461a      	mov	r2, r3
 8009654:	f7f9 f9d6 	bl	8002a04 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 8009658:	7bfb      	ldrb	r3, [r7, #15]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b084      	sub	sp, #16
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800966a:	2300      	movs	r3, #0
 800966c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	7818      	ldrb	r0, [r3, #0]
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800967c:	b299      	uxth	r1, r3
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	78db      	ldrb	r3, [r3, #3]
 8009682:	461a      	mov	r2, r3
 8009684:	f000 ffca 	bl	800a61c <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 8009688:	7bfb      	ldrb	r3, [r7, #15]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 8009692:	b590      	push	{r4, r7, lr}
 8009694:	b087      	sub	sp, #28
 8009696:	af02      	add	r7, sp, #8
 8009698:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800969a:	2300      	movs	r3, #0
 800969c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	7818      	ldrb	r0, [r3, #0]
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80096ac:	b299      	uxth	r1, r3
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	78da      	ldrb	r2, [r3, #3]
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	889b      	ldrh	r3, [r3, #4]
 80096b6:	b29c      	uxth	r4, r3
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	88db      	ldrh	r3, [r3, #6]
 80096bc:	b29b      	uxth	r3, r3
 80096be:	9300      	str	r3, [sp, #0]
 80096c0:	4623      	mov	r3, r4
 80096c2:	f000 ffba 	bl	800a63a <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 80096c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3714      	adds	r7, #20
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd90      	pop	{r4, r7, pc}

080096d0 <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80096d8:	2300      	movs	r3, #0
 80096da:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 ffbc 	bl	800a662 <hci_hardware_error_event>

  return status;
 80096ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b0a6      	sub	sp, #152	; 0x98
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80096fc:	2300      	movs	r3, #0
 80096fe:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 8009708:	2301      	movs	r3, #1
 800970a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800970e:	2300      	movs	r3, #0
 8009710:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009714:	e02e      	b.n	8009774 <hci_number_of_completed_packets_event_process+0x80>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 8009716:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800971a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	4413      	add	r3, r2
 8009722:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009726:	b29a      	uxth	r2, r3
 8009728:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	3398      	adds	r3, #152	; 0x98
 8009730:	443b      	add	r3, r7
 8009732:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8009736:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800973a:	3302      	adds	r3, #2
 800973c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 8009740:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009744:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009750:	b29a      	uxth	r2, r3
 8009752:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	3398      	adds	r3, #152	; 0x98
 800975a:	443b      	add	r3, r7
 800975c:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8009760:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009764:	3302      	adds	r3, #2
 8009766:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800976a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800976e:	3301      	adds	r3, #1
 8009770:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009774:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	461a      	mov	r2, r3
 800977c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009780:	4293      	cmp	r3, r2
 8009782:	dbc8      	blt.n	8009716 <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 8009784:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	f107 0208 	add.w	r2, r7, #8
 800978e:	4611      	mov	r1, r2
 8009790:	4618      	mov	r0, r3
 8009792:	f000 ff71 	bl	800a678 <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 8009796:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800979a:	4618      	mov	r0, r3
 800979c:	3798      	adds	r7, #152	; 0x98
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b084      	sub	sp, #16
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80097aa:	2300      	movs	r3, #0
 80097ac:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 ff6a 	bl	800a690 <hci_data_buffer_overflow_event>

  return status;
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b084      	sub	sp, #16
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80097ce:	2300      	movs	r3, #0
 80097d0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	781a      	ldrb	r2, [r3, #0]
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	4619      	mov	r1, r3
 80097e4:	4610      	mov	r0, r2
 80097e6:	f000 ff5e 	bl	800a6a6 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 80097ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80097fc:	2300      	movs	r3, #0
 80097fe:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	4618      	mov	r0, r3
 800980a:	f001 f9e6 	bl	800abda <aci_blue_initialized_event>

  return status;
 800980e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009820:	2300      	movs	r3, #0
 8009822:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	4618      	mov	r0, r3
 800982c:	f001 f9e0 	bl	800abf0 <aci_blue_events_lost_event>

  return status;
 8009830:	7bfb      	ldrb	r3, [r7, #15]
}
 8009832:	4618      	mov	r0, r3
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 800983a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800983e:	b08d      	sub	sp, #52	; 0x34
 8009840:	af08      	add	r7, sp, #32
 8009842:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009844:	2300      	movs	r3, #0
 8009846:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	f893 c000 	ldrb.w	ip, [r3]
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	f8d3 e001 	ldr.w	lr, [r3, #1]
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	f8d3 8005 	ldr.w	r8, [r3, #5]
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	f8d3 9009 	ldr.w	r9, [r3, #9]
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	f8d3 300d 	ldr.w	r3, [r3, #13]
 800986a:	603b      	str	r3, [r7, #0]
 800986c:	68ba      	ldr	r2, [r7, #8]
 800986e:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8009872:	68b9      	ldr	r1, [r7, #8]
 8009874:	f8d1 1015 	ldr.w	r1, [r1, #21]
 8009878:	68b8      	ldr	r0, [r7, #8]
 800987a:	f8d0 0019 	ldr.w	r0, [r0, #25]
 800987e:	68bc      	ldr	r4, [r7, #8]
 8009880:	f8d4 401d 	ldr.w	r4, [r4, #29]
 8009884:	68bd      	ldr	r5, [r7, #8]
 8009886:	f8d5 5021 	ldr.w	r5, [r5, #33]	; 0x21
 800988a:	68be      	ldr	r6, [r7, #8]
 800988c:	f896 6025 	ldrb.w	r6, [r6, #37]	; 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	3326      	adds	r3, #38	; 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 8009894:	9307      	str	r3, [sp, #28]
 8009896:	9606      	str	r6, [sp, #24]
 8009898:	9505      	str	r5, [sp, #20]
 800989a:	9404      	str	r4, [sp, #16]
 800989c:	9003      	str	r0, [sp, #12]
 800989e:	9102      	str	r1, [sp, #8]
 80098a0:	9201      	str	r2, [sp, #4]
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	9300      	str	r3, [sp, #0]
 80098a6:	464b      	mov	r3, r9
 80098a8:	4642      	mov	r2, r8
 80098aa:	4671      	mov	r1, lr
 80098ac:	4660      	mov	r0, ip
 80098ae:	f001 f9a9 	bl	800ac04 <aci_blue_crash_info_event>

  return status;
 80098b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3714      	adds	r7, #20
 80098b8:	46bd      	mov	sp, r7
 80098ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080098be <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b084      	sub	sp, #16
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80098c6:	2300      	movs	r3, #0
 80098c8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	7818      	ldrb	r0, [r3, #0]
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	7859      	ldrb	r1, [r3, #1]
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80098dc:	461a      	mov	r2, r3
 80098de:	f001 f99f 	bl	800ac20 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 80098e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80098f4:	2300      	movs	r3, #0
 80098f6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	f993 0000 	ldrsb.w	r0, [r3]
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 800990a:	461a      	mov	r2, r3
 800990c:	f001 f996 	bl	800ac3c <aci_hal_scan_req_report_event>

  return status;
 8009910:	7bfb      	ldrb	r3, [r7, #15]
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b084      	sub	sp, #16
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009922:	2300      	movs	r3, #0
 8009924:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	7818      	ldrb	r0, [r3, #0]
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 8009936:	461a      	mov	r2, r3
 8009938:	f001 f98e 	bl	800ac58 <aci_hal_fw_error_event>

  return status;
 800993c:	7bfb      	ldrb	r3, [r7, #15]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b084      	sub	sp, #16
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800994e:	2300      	movs	r3, #0
 8009950:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 8009952:	f000 ff3e 	bl	800a7d2 <aci_gap_limited_discoverable_event>

  return status;
 8009956:	7bfb      	ldrb	r3, [r7, #15]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009968:	2300      	movs	r3, #0
 800996a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	881b      	ldrh	r3, [r3, #0]
 8009974:	b298      	uxth	r0, r3
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	7899      	ldrb	r1, [r3, #2]
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	78db      	ldrb	r3, [r3, #3]
 800997e:	461a      	mov	r2, r3
 8009980:	f000 ff2e 	bl	800a7e0 <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 8009984:	7bfb      	ldrb	r3, [r7, #15]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b084      	sub	sp, #16
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009996:	2300      	movs	r3, #0
 8009998:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	881b      	ldrh	r3, [r3, #0]
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	4618      	mov	r0, r3
 80099a6:	f000 ff2a 	bl	800a7fe <aci_gap_pass_key_req_event>

  return status;
 80099aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80099bc:	2300      	movs	r3, #0
 80099be:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	881b      	ldrh	r3, [r3, #0]
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	4618      	mov	r0, r3
 80099cc:	f000 ff22 	bl	800a814 <aci_gap_authorization_req_event>

  return status;
 80099d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3710      	adds	r7, #16
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b084      	sub	sp, #16
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80099e2:	2300      	movs	r3, #0
 80099e4:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 80099e6:	f000 ff20 	bl	800a82a <aci_gap_slave_security_initiated_event>

  return status;
 80099ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80099fc:	2300      	movs	r3, #0
 80099fe:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 8009a00:	f000 ff1a 	bl	800a838 <aci_gap_bond_lost_event>

  return status;
 8009a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b084      	sub	sp, #16
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009a16:	2300      	movs	r3, #0
 8009a18:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	7818      	ldrb	r0, [r3, #0]
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	7859      	ldrb	r1, [r3, #1]
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 8009a2e:	f000 ff0a 	bl	800a846 <aci_gap_proc_complete_event>

  return status;
 8009a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009a44:	2300      	movs	r3, #0
 8009a46:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	881b      	ldrh	r3, [r3, #0]
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	4618      	mov	r0, r3
 8009a54:	f000 ff07 	bl	800a866 <aci_gap_addr_not_resolved_event>

  return status;
 8009a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b084      	sub	sp, #16
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	881b      	ldrh	r3, [r3, #0]
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8009a7e:	4619      	mov	r1, r3
 8009a80:	4610      	mov	r0, r2
 8009a82:	f000 fefb 	bl	800a87c <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	881b      	ldrh	r3, [r3, #0]
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	789b      	ldrb	r3, [r3, #2]
 8009aaa:	4619      	mov	r1, r3
 8009aac:	4610      	mov	r0, r2
 8009aae:	f000 fef1 	bl	800a894 <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 8009ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	881b      	ldrh	r3, [r3, #0]
 8009ad0:	b29a      	uxth	r2, r3
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	885b      	ldrh	r3, [r3, #2]
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	4619      	mov	r1, r3
 8009ada:	4610      	mov	r0, r2
 8009adc:	f001 f839 	bl	800ab52 <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b084      	sub	sp, #16
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009af2:	2300      	movs	r3, #0
 8009af4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	881b      	ldrh	r3, [r3, #0]
 8009afe:	b298      	uxth	r0, r3
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 8009b08:	461a      	mov	r2, r3
 8009b0a:	f001 f830 	bl	800ab6e <aci_l2cap_proc_timeout_event>

  return status;
 8009b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 8009b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b1a:	b089      	sub	sp, #36	; 0x24
 8009b1c:	af04      	add	r7, sp, #16
 8009b1e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009b20:	2300      	movs	r3, #0
 8009b22:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	881b      	ldrh	r3, [r3, #0]
 8009b2c:	b298      	uxth	r0, r3
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	789c      	ldrb	r4, [r3, #2]
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009b38:	b29d      	uxth	r5, r3
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009b40:	b29e      	uxth	r6, r3
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	68ba      	ldr	r2, [r7, #8]
 8009b4c:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8009b50:	b292      	uxth	r2, r2
 8009b52:	68b9      	ldr	r1, [r7, #8]
 8009b54:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 8009b58:	b289      	uxth	r1, r1
 8009b5a:	9102      	str	r1, [sp, #8]
 8009b5c:	9201      	str	r2, [sp, #4]
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	4633      	mov	r3, r6
 8009b62:	462a      	mov	r2, r5
 8009b64:	4621      	mov	r1, r4
 8009b66:	f001 f810 	bl	800ab8a <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 8009b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3714      	adds	r7, #20
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b74 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 8009b74:	b590      	push	{r4, r7, lr}
 8009b76:	b087      	sub	sp, #28
 8009b78:	af02      	add	r7, sp, #8
 8009b7a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	881b      	ldrh	r3, [r3, #0]
 8009b88:	b298      	uxth	r0, r3
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	7899      	ldrb	r1, [r3, #2]
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009b94:	b29a      	uxth	r2, r3
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8009b9e:	9300      	str	r3, [sp, #0]
 8009ba0:	4623      	mov	r3, r4
 8009ba2:	f001 f806 	bl	800abb2 <aci_l2cap_command_reject_event>

  return status;
 8009ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3714      	adds	r7, #20
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd90      	pop	{r4, r7, pc}

08009bb0 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 8009bb0:	b590      	push	{r4, r7, lr}
 8009bb2:	b087      	sub	sp, #28
 8009bb4:	af02      	add	r7, sp, #8
 8009bb6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	881b      	ldrh	r3, [r3, #0]
 8009bc4:	b298      	uxth	r0, r3
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	885b      	ldrh	r3, [r3, #2]
 8009bca:	b299      	uxth	r1, r3
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	889b      	ldrh	r3, [r3, #4]
 8009bd0:	b29a      	uxth	r2, r3
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	88db      	ldrh	r3, [r3, #6]
 8009bd6:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8009bdc:	9300      	str	r3, [sp, #0]
 8009bde:	4623      	mov	r3, r4
 8009be0:	f000 fe66 	bl	800a8b0 <aci_gatt_attribute_modified_event>

  return status;
 8009be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3714      	adds	r7, #20
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd90      	pop	{r4, r7, pc}

08009bee <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b084      	sub	sp, #16
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	881b      	ldrh	r3, [r3, #0]
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	4618      	mov	r0, r3
 8009c06:	f000 fe67 	bl	800a8d8 <aci_gatt_proc_timeout_event>

  return status;
 8009c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3710      	adds	r7, #16
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	881b      	ldrh	r3, [r3, #0]
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	885b      	ldrh	r3, [r3, #2]
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	4619      	mov	r1, r3
 8009c32:	4610      	mov	r0, r2
 8009c34:	f000 fe5b 	bl	800a8ee <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b084      	sub	sp, #16
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	881b      	ldrh	r3, [r3, #0]
 8009c56:	b298      	uxth	r0, r3
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	7899      	ldrb	r1, [r3, #2]
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8009c64:	f000 fe51 	bl	800a90a <aci_att_find_info_resp_event>

  return status;
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b0a6      	sub	sp, #152	; 0x98
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 8009c86:	2303      	movs	r3, #3
 8009c88:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009c92:	e02e      	b.n	8009cf2 <aci_att_find_by_type_value_resp_event_process+0x80>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 8009c94:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009c98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	4413      	add	r3, r2
 8009ca0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009ca4:	b29a      	uxth	r2, r3
 8009ca6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	3398      	adds	r3, #152	; 0x98
 8009cae:	443b      	add	r3, r7
 8009cb0:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8009cb4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009cb8:	3302      	adds	r3, #2
 8009cba:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 8009cbe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009cc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	4413      	add	r3, r2
 8009cca:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	3398      	adds	r3, #152	; 0x98
 8009cd8:	443b      	add	r3, r7
 8009cda:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8009cde:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009ce2:	3302      	adds	r3, #2
 8009ce4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8009ce8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009cec:	3301      	adds	r3, #1
 8009cee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009cf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009cf6:	789b      	ldrb	r3, [r3, #2]
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	dbc8      	blt.n	8009c94 <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 8009d02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d06:	881b      	ldrh	r3, [r3, #0]
 8009d08:	b298      	uxth	r0, r3
 8009d0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d0e:	789b      	ldrb	r3, [r3, #2]
 8009d10:	f107 0208 	add.w	r2, r7, #8
 8009d14:	4619      	mov	r1, r3
 8009d16:	f000 fe08 	bl	800a92a <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 8009d1a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3798      	adds	r7, #152	; 0x98
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b084      	sub	sp, #16
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	881b      	ldrh	r3, [r3, #0]
 8009d3a:	b298      	uxth	r0, r3
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	7899      	ldrb	r1, [r3, #2]
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8009d48:	f000 fdfd 	bl	800a946 <aci_att_read_by_type_resp_event>

  return status;
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b084      	sub	sp, #16
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	881b      	ldrh	r3, [r3, #0]
 8009d6a:	b298      	uxth	r0, r3
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 8009d74:	461a      	mov	r2, r3
 8009d76:	f000 fdf6 	bl	800a966 <aci_att_read_resp_event>

  return status;
 8009d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3710      	adds	r7, #16
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	881b      	ldrh	r3, [r3, #0]
 8009d98:	b298      	uxth	r0, r3
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8009da2:	461a      	mov	r2, r3
 8009da4:	f000 fded 	bl	800a982 <aci_att_read_blob_resp_event>

  return status;
 8009da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b084      	sub	sp, #16
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	881b      	ldrh	r3, [r3, #0]
 8009dc6:	b298      	uxth	r0, r3
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	f000 fde4 	bl	800a99e <aci_att_read_multiple_resp_event>

  return status;
 8009dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3710      	adds	r7, #16
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009de8:	2300      	movs	r3, #0
 8009dea:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	881b      	ldrh	r3, [r3, #0]
 8009df4:	b298      	uxth	r0, r3
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	7899      	ldrb	r1, [r3, #2]
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8009e02:	f000 fdda 	bl	800a9ba <aci_att_read_by_group_type_resp_event>

  return status;
 8009e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 8009e10:	b590      	push	{r4, r7, lr}
 8009e12:	b087      	sub	sp, #28
 8009e14:	af02      	add	r7, sp, #8
 8009e16:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	881b      	ldrh	r3, [r3, #0]
 8009e24:	b298      	uxth	r0, r3
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	885b      	ldrh	r3, [r3, #2]
 8009e2a:	b299      	uxth	r1, r3
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	889b      	ldrh	r3, [r3, #4]
 8009e30:	b29a      	uxth	r2, r3
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8009e3a:	9300      	str	r3, [sp, #0]
 8009e3c:	4623      	mov	r3, r4
 8009e3e:	f000 fdcc 	bl	800a9da <aci_att_prepare_write_resp_event>

  return status;
 8009e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd90      	pop	{r4, r7, pc}

08009e4c <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009e54:	2300      	movs	r3, #0
 8009e56:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	881b      	ldrh	r3, [r3, #0]
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	4618      	mov	r0, r3
 8009e64:	f000 fdcd 	bl	800aa02 <aci_att_exec_write_resp_event>

  return status;
 8009e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b084      	sub	sp, #16
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	881b      	ldrh	r3, [r3, #0]
 8009e86:	b298      	uxth	r0, r3
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	885b      	ldrh	r3, [r3, #2]
 8009e8c:	b299      	uxth	r1, r3
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 8009e96:	f000 fdbf 	bl	800aa18 <aci_gatt_indication_event>

  return status;
 8009e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009eac:	2300      	movs	r3, #0
 8009eae:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	881b      	ldrh	r3, [r3, #0]
 8009eb8:	b298      	uxth	r0, r3
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	885b      	ldrh	r3, [r3, #2]
 8009ebe:	b299      	uxth	r1, r3
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 8009ec8:	f000 fdb6 	bl	800aa38 <aci_gatt_notification_event>

  return status;
 8009ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b084      	sub	sp, #16
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	881b      	ldrh	r3, [r3, #0]
 8009eea:	b29a      	uxth	r2, r3
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	789b      	ldrb	r3, [r3, #2]
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	4610      	mov	r0, r2
 8009ef4:	f000 fdb0 	bl	800aa58 <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 8009ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3710      	adds	r7, #16
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b084      	sub	sp, #16
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	881b      	ldrh	r3, [r3, #0]
 8009f16:	b298      	uxth	r0, r3
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	7899      	ldrb	r1, [r3, #2]
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009f22:	b29a      	uxth	r2, r3
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	795b      	ldrb	r3, [r3, #5]
 8009f28:	f000 fda4 	bl	800aa74 <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 8009f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3710      	adds	r7, #16
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b084      	sub	sp, #16
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	881b      	ldrh	r3, [r3, #0]
 8009f4a:	b298      	uxth	r0, r3
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	885b      	ldrh	r3, [r3, #2]
 8009f50:	b299      	uxth	r1, r3
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8009f5a:	f000 fd9f 	bl	800aa9c <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 8009f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009f70:	2300      	movs	r3, #0
 8009f72:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	881b      	ldrh	r3, [r3, #0]
 8009f7c:	b298      	uxth	r0, r3
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	885b      	ldrh	r3, [r3, #2]
 8009f82:	b299      	uxth	r1, r3
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8009f8c:	f000 fd96 	bl	800aabc <aci_gatt_write_permit_req_event>

  return status;
 8009f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b084      	sub	sp, #16
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	881b      	ldrh	r3, [r3, #0]
 8009fae:	b298      	uxth	r0, r3
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	885b      	ldrh	r3, [r3, #2]
 8009fb4:	b299      	uxth	r1, r3
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	889b      	ldrh	r3, [r3, #4]
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	f7f8 fd45 	bl	8002a4c <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 8009fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3710      	adds	r7, #16
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b0a6      	sub	sp, #152	; 0x98
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 8009fe0:	2303      	movs	r3, #3
 8009fe2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009fec:	e019      	b.n	800a022 <aci_gatt_read_multi_permit_req_event_process+0x56>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 8009fee:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009ff2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ff6:	005b      	lsls	r3, r3, #1
 8009ff8:	4413      	add	r3, r2
 8009ffa:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009ffe:	b29a      	uxth	r2, r3
 800a000:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a004:	005b      	lsls	r3, r3, #1
 800a006:	3398      	adds	r3, #152	; 0x98
 800a008:	443b      	add	r3, r7
 800a00a:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 800a00e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a012:	3302      	adds	r3, #2
 800a014:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800a018:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a01c:	3301      	adds	r3, #1
 800a01e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a022:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a026:	789b      	ldrb	r3, [r3, #2]
 800a028:	461a      	mov	r2, r3
 800a02a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a02e:	4293      	cmp	r3, r2
 800a030:	dbdd      	blt.n	8009fee <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 800a032:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a036:	881b      	ldrh	r3, [r3, #0]
 800a038:	b298      	uxth	r0, r3
 800a03a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a03e:	789b      	ldrb	r3, [r3, #2]
 800a040:	f107 0208 	add.w	r2, r7, #8
 800a044:	4619      	mov	r1, r3
 800a046:	f000 fd49 	bl	800aadc <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 800a04a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3798      	adds	r7, #152	; 0x98
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}

0800a056 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b084      	sub	sp, #16
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a05e:	2300      	movs	r3, #0
 800a060:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	881b      	ldrh	r3, [r3, #0]
 800a06a:	b29a      	uxth	r2, r3
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	885b      	ldrh	r3, [r3, #2]
 800a070:	b29b      	uxth	r3, r3
 800a072:	4619      	mov	r1, r3
 800a074:	4610      	mov	r0, r2
 800a076:	f000 fd3f 	bl	800aaf8 <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 800a07a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3710      	adds	r7, #16
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a08c:	2300      	movs	r3, #0
 800a08e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	881b      	ldrh	r3, [r3, #0]
 800a098:	b29b      	uxth	r3, r3
 800a09a:	4618      	mov	r0, r3
 800a09c:	f000 fd3a 	bl	800ab14 <aci_gatt_server_confirmation_event>

  return status;
 800a0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 800a0aa:	b590      	push	{r4, r7, lr}
 800a0ac:	b087      	sub	sp, #28
 800a0ae:	af02      	add	r7, sp, #8
 800a0b0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	881b      	ldrh	r3, [r3, #0]
 800a0be:	b298      	uxth	r0, r3
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	885b      	ldrh	r3, [r3, #2]
 800a0c4:	b299      	uxth	r1, r3
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	889b      	ldrh	r3, [r3, #4]
 800a0ca:	b29a      	uxth	r2, r3
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800a0d4:	9300      	str	r3, [sp, #0]
 800a0d6:	4623      	mov	r3, r4
 800a0d8:	f000 fd27 	bl	800ab2a <aci_gatt_prepare_write_permit_req_event>

  return status;
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3714      	adds	r7, #20
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd90      	pop	{r4, r7, pc}

0800a0e6 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 800a0e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0e8:	b08b      	sub	sp, #44	; 0x2c
 800a0ea:	af06      	add	r7, sp, #24
 800a0ec:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	781d      	ldrb	r5, [r3, #0]
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a100:	b29e      	uxth	r6, r3
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	f893 c003 	ldrb.w	ip, [r3, #3]
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 800a118:	b292      	uxth	r2, r2
 800a11a:	68b9      	ldr	r1, [r7, #8]
 800a11c:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 800a120:	b289      	uxth	r1, r1
 800a122:	68b8      	ldr	r0, [r7, #8]
 800a124:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 800a128:	b280      	uxth	r0, r0
 800a12a:	68bc      	ldr	r4, [r7, #8]
 800a12c:	7c64      	ldrb	r4, [r4, #17]
 800a12e:	9404      	str	r4, [sp, #16]
 800a130:	9003      	str	r0, [sp, #12]
 800a132:	9102      	str	r1, [sp, #8]
 800a134:	9201      	str	r2, [sp, #4]
 800a136:	9300      	str	r3, [sp, #0]
 800a138:	4673      	mov	r3, lr
 800a13a:	4662      	mov	r2, ip
 800a13c:	4631      	mov	r1, r6
 800a13e:	4628      	mov	r0, r5
 800a140:	f7f8 fc40 	bl	80029c4 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 800a144:	7bfb      	ldrb	r3, [r7, #15]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a14e <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b0a4      	sub	sp, #144	; 0x90
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a156:	2300      	movs	r3, #0
 800a158:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint8_t size = 1;
 800a162:	2301      	movs	r3, #1
 800a164:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800a168:	2300      	movs	r3, #0
 800a16a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a16e:	e0b3      	b.n	800a2d8 <hci_le_advertising_report_event_process+0x18a>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 800a170:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800a174:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a178:	4613      	mov	r3, r2
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	4413      	add	r3, r2
 800a17e:	005b      	lsls	r3, r3, #1
 800a180:	4413      	add	r3, r2
 800a182:	440b      	add	r3, r1
 800a184:	3301      	adds	r3, #1
 800a186:	7819      	ldrb	r1, [r3, #0]
 800a188:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a18c:	4613      	mov	r3, r2
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	4413      	add	r3, r2
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	3390      	adds	r3, #144	; 0x90
 800a196:	443b      	add	r3, r7
 800a198:	3b88      	subs	r3, #136	; 0x88
 800a19a:	460a      	mov	r2, r1
 800a19c:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a19e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 800a1a8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800a1ac:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	4413      	add	r3, r2
 800a1b6:	005b      	lsls	r3, r3, #1
 800a1b8:	4413      	add	r3, r2
 800a1ba:	440b      	add	r3, r1
 800a1bc:	3302      	adds	r3, #2
 800a1be:	7819      	ldrb	r1, [r3, #0]
 800a1c0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	4413      	add	r3, r2
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	3390      	adds	r3, #144	; 0x90
 800a1ce:	443b      	add	r3, r7
 800a1d0:	3b87      	subs	r3, #135	; 0x87
 800a1d2:	460a      	mov	r2, r1
 800a1d4:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a1d6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a1da:	3301      	adds	r3, #1
 800a1dc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 800a1e0:	f107 0108 	add.w	r1, r7, #8
 800a1e4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	4413      	add	r3, r2
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	440b      	add	r3, r1
 800a1f2:	1c98      	adds	r0, r3, #2
 800a1f4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	4413      	add	r3, r2
 800a1fe:	005b      	lsls	r3, r3, #1
 800a200:	4413      	add	r3, r2
 800a202:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a206:	4413      	add	r3, r2
 800a208:	3303      	adds	r3, #3
 800a20a:	2206      	movs	r2, #6
 800a20c:	4619      	mov	r1, r3
 800a20e:	f002 f936 	bl	800c47e <memcpy>
    size += 6;
 800a212:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a216:	3306      	adds	r3, #6
 800a218:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 800a21c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800a220:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a224:	4613      	mov	r3, r2
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	4413      	add	r3, r2
 800a22a:	005b      	lsls	r3, r3, #1
 800a22c:	4413      	add	r3, r2
 800a22e:	440b      	add	r3, r1
 800a230:	3309      	adds	r3, #9
 800a232:	7819      	ldrb	r1, [r3, #0]
 800a234:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a238:	4613      	mov	r3, r2
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	4413      	add	r3, r2
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	3390      	adds	r3, #144	; 0x90
 800a242:	443b      	add	r3, r7
 800a244:	3b80      	subs	r3, #128	; 0x80
 800a246:	460a      	mov	r2, r1
 800a248:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a24a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a24e:	3301      	adds	r3, #1
 800a250:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 800a254:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a258:	4613      	mov	r3, r2
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	4413      	add	r3, r2
 800a25e:	005b      	lsls	r3, r3, #1
 800a260:	4413      	add	r3, r2
 800a262:	3308      	adds	r3, #8
 800a264:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a268:	4413      	add	r3, r2
 800a26a:	1c99      	adds	r1, r3, #2
 800a26c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a270:	4613      	mov	r3, r2
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	4413      	add	r3, r2
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	3390      	adds	r3, #144	; 0x90
 800a27a:	443b      	add	r3, r7
 800a27c:	3b7c      	subs	r3, #124	; 0x7c
 800a27e:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 800a280:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800a284:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a288:	4613      	mov	r3, r2
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	4413      	add	r3, r2
 800a28e:	005b      	lsls	r3, r3, #1
 800a290:	4413      	add	r3, r2
 800a292:	440b      	add	r3, r1
 800a294:	3309      	adds	r3, #9
 800a296:	781a      	ldrb	r2, [r3, #0]
 800a298:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a29c:	4413      	add	r3, r2
 800a29e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 800a2a2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	4413      	add	r3, r2
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	b259      	sxtb	r1, r3
 800a2ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	4413      	add	r3, r2
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	3390      	adds	r3, #144	; 0x90
 800a2bc:	443b      	add	r3, r7
 800a2be:	3b78      	subs	r3, #120	; 0x78
 800a2c0:	460a      	mov	r2, r1
 800a2c2:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a2c4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 800a2ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a2d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	461a      	mov	r2, r3
 800a2e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	f6ff af43 	blt.w	800a170 <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 800a2ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	f107 0208 	add.w	r2, r7, #8
 800a2f4:	4611      	mov	r1, r2
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f000 f9e3 	bl	800a6c2 <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 800a2fc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800a300:	4618      	mov	r0, r3
 800a302:	3790      	adds	r7, #144	; 0x90
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 800a308:	b590      	push	{r4, r7, lr}
 800a30a:	b087      	sub	sp, #28
 800a30c:	af02      	add	r7, sp, #8
 800a30e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a310:	2300      	movs	r3, #0
 800a312:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	7818      	ldrb	r0, [r3, #0]
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a322:	b299      	uxth	r1, r3
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800a332:	b29c      	uxth	r4, r3
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	9300      	str	r3, [sp, #0]
 800a33e:	4623      	mov	r3, r4
 800a340:	f000 f9cb 	bl	800a6da <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 800a344:	7bfb      	ldrb	r3, [r7, #15]
}
 800a346:	4618      	mov	r0, r3
 800a348:	3714      	adds	r7, #20
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd90      	pop	{r4, r7, pc}

0800a34e <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b084      	sub	sp, #16
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a356:	2300      	movs	r3, #0
 800a358:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	7818      	ldrb	r0, [r3, #0]
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a368:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800a36e:	461a      	mov	r2, r3
 800a370:	f000 f9c7 	bl	800a702 <hci_le_read_remote_used_features_complete_event>

  return status;
 800a374:	7bfb      	ldrb	r3, [r7, #15]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b084      	sub	sp, #16
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a386:	2300      	movs	r3, #0
 800a388:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	881b      	ldrh	r3, [r3, #0]
 800a392:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	895b      	ldrh	r3, [r3, #10]
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	461a      	mov	r2, r3
 800a3a0:	f000 f9bd 	bl	800a71e <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 800a3ae:	b590      	push	{r4, r7, lr}
 800a3b0:	b087      	sub	sp, #28
 800a3b2:	af02      	add	r7, sp, #8
 800a3b4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	881b      	ldrh	r3, [r3, #0]
 800a3c2:	b298      	uxth	r0, r3
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	885b      	ldrh	r3, [r3, #2]
 800a3c8:	b299      	uxth	r1, r3
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	889b      	ldrh	r3, [r3, #4]
 800a3ce:	b29a      	uxth	r2, r3
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	88db      	ldrh	r3, [r3, #6]
 800a3d4:	b29c      	uxth	r4, r3
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	891b      	ldrh	r3, [r3, #8]
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	4623      	mov	r3, r4
 800a3e0:	f000 f9ab 	bl	800a73a <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 800a3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3714      	adds	r7, #20
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd90      	pop	{r4, r7, pc}

0800a3ee <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b084      	sub	sp, #16
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800a406:	4619      	mov	r1, r3
 800a408:	4610      	mov	r0, r2
 800a40a:	f000 f9aa 	bl	800a762 <hci_le_read_local_p256_public_key_complete_event>

  return status;
 800a40e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a410:	4618      	mov	r0, r3
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a420:	2300      	movs	r3, #0
 800a422:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800a430:	4619      	mov	r1, r3
 800a432:	4610      	mov	r0, r2
 800a434:	f000 f9a1 	bl	800a77a <hci_le_generate_dhkey_complete_event>

  return status;
 800a438:	7bfb      	ldrb	r3, [r7, #15]
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3710      	adds	r7, #16
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}

0800a442 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 800a442:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a446:	b08d      	sub	sp, #52	; 0x34
 800a448:	af08      	add	r7, sp, #32
 800a44a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a44c:	2300      	movs	r3, #0
 800a44e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	f893 c000 	ldrb.w	ip, [r3]
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a460:	fa1f fe83 	uxth.w	lr, r3
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	f893 8003 	ldrb.w	r8, [r3, #3]
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 800a474:	68ba      	ldr	r2, [r7, #8]
 800a476:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 800a478:	68b9      	ldr	r1, [r7, #8]
 800a47a:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800a47c:	68b8      	ldr	r0, [r7, #8]
 800a47e:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 800a482:	b280      	uxth	r0, r0
 800a484:	68bc      	ldr	r4, [r7, #8]
 800a486:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 800a48a:	b2a4      	uxth	r4, r4
 800a48c:	68bd      	ldr	r5, [r7, #8]
 800a48e:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 800a492:	b2ad      	uxth	r5, r5
 800a494:	68be      	ldr	r6, [r7, #8]
 800a496:	7f76      	ldrb	r6, [r6, #29]
 800a498:	9606      	str	r6, [sp, #24]
 800a49a:	9505      	str	r5, [sp, #20]
 800a49c:	9404      	str	r4, [sp, #16]
 800a49e:	9003      	str	r0, [sp, #12]
 800a4a0:	9102      	str	r1, [sp, #8]
 800a4a2:	9201      	str	r2, [sp, #4]
 800a4a4:	9300      	str	r3, [sp, #0]
 800a4a6:	464b      	mov	r3, r9
 800a4a8:	4642      	mov	r2, r8
 800a4aa:	4671      	mov	r1, lr
 800a4ac:	4660      	mov	r0, ip
 800a4ae:	f000 f970 	bl	800a792 <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 800a4b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3714      	adds	r7, #20
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a4be <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b0a6      	sub	sp, #152	; 0x98
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800a4d8:	2300      	movs	r3, #0
 800a4da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a4de:	e085      	b.n	800a5ec <hci_le_direct_advertising_report_event_process+0x12e>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 800a4e0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a4e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a4e8:	011b      	lsls	r3, r3, #4
 800a4ea:	4413      	add	r3, r2
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	781a      	ldrb	r2, [r3, #0]
 800a4f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a4f4:	011b      	lsls	r3, r3, #4
 800a4f6:	3398      	adds	r3, #152	; 0x98
 800a4f8:	443b      	add	r3, r7
 800a4fa:	3b90      	subs	r3, #144	; 0x90
 800a4fc:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a4fe:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a502:	3301      	adds	r3, #1
 800a504:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 800a508:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a50c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a510:	011b      	lsls	r3, r3, #4
 800a512:	4413      	add	r3, r2
 800a514:	3302      	adds	r3, #2
 800a516:	781a      	ldrb	r2, [r3, #0]
 800a518:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a51c:	011b      	lsls	r3, r3, #4
 800a51e:	3398      	adds	r3, #152	; 0x98
 800a520:	443b      	add	r3, r7
 800a522:	3b8f      	subs	r3, #143	; 0x8f
 800a524:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a526:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a52a:	3301      	adds	r3, #1
 800a52c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 800a530:	f107 0208 	add.w	r2, r7, #8
 800a534:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a538:	011b      	lsls	r3, r3, #4
 800a53a:	4413      	add	r3, r2
 800a53c:	1c98      	adds	r0, r3, #2
 800a53e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a542:	011b      	lsls	r3, r3, #4
 800a544:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a548:	4413      	add	r3, r2
 800a54a:	3303      	adds	r3, #3
 800a54c:	2206      	movs	r2, #6
 800a54e:	4619      	mov	r1, r3
 800a550:	f001 ff95 	bl	800c47e <memcpy>
    size += 6;
 800a554:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a558:	3306      	adds	r3, #6
 800a55a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 800a55e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a562:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a566:	011b      	lsls	r3, r3, #4
 800a568:	4413      	add	r3, r2
 800a56a:	3309      	adds	r3, #9
 800a56c:	781a      	ldrb	r2, [r3, #0]
 800a56e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a572:	011b      	lsls	r3, r3, #4
 800a574:	3398      	adds	r3, #152	; 0x98
 800a576:	443b      	add	r3, r7
 800a578:	3b88      	subs	r3, #136	; 0x88
 800a57a:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a57c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a580:	3301      	adds	r3, #1
 800a582:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800a586:	f107 0208 	add.w	r2, r7, #8
 800a58a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a58e:	011b      	lsls	r3, r3, #4
 800a590:	3308      	adds	r3, #8
 800a592:	4413      	add	r3, r2
 800a594:	1c58      	adds	r0, r3, #1
 800a596:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a59a:	011b      	lsls	r3, r3, #4
 800a59c:	3308      	adds	r3, #8
 800a59e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a5a2:	4413      	add	r3, r2
 800a5a4:	3302      	adds	r3, #2
 800a5a6:	2206      	movs	r2, #6
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	f001 ff68 	bl	800c47e <memcpy>
    size += 6;
 800a5ae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a5b2:	3306      	adds	r3, #6
 800a5b4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 800a5b8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a5bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a5c0:	011b      	lsls	r3, r3, #4
 800a5c2:	4413      	add	r3, r2
 800a5c4:	3310      	adds	r3, #16
 800a5c6:	f993 2000 	ldrsb.w	r2, [r3]
 800a5ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a5ce:	011b      	lsls	r3, r3, #4
 800a5d0:	3398      	adds	r3, #152	; 0x98
 800a5d2:	443b      	add	r3, r7
 800a5d4:	3b81      	subs	r3, #129	; 0x81
 800a5d6:	701a      	strb	r2, [r3, #0]
    size += 1;
 800a5d8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a5dc:	3301      	adds	r3, #1
 800a5de:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 800a5e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a5ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	f6ff af71 	blt.w	800a4e0 <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 800a5fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	f107 0208 	add.w	r2, r7, #8
 800a608:	4611      	mov	r1, r2
 800a60a:	4618      	mov	r0, r3
 800a60c:	f000 f8d5 	bl	800a7ba <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 800a610:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800a614:	4618      	mov	r0, r3
 800a616:	3798      	adds	r7, #152	; 0x98
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	4603      	mov	r3, r0
 800a624:	71fb      	strb	r3, [r7, #7]
 800a626:	460b      	mov	r3, r1
 800a628:	80bb      	strh	r3, [r7, #4]
 800a62a:	4613      	mov	r3, r2
 800a62c:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 800a62e:	bf00      	nop
 800a630:	370c      	adds	r7, #12
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr

0800a63a <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 800a63a:	b490      	push	{r4, r7}
 800a63c:	b082      	sub	sp, #8
 800a63e:	af00      	add	r7, sp, #0
 800a640:	4604      	mov	r4, r0
 800a642:	4608      	mov	r0, r1
 800a644:	4611      	mov	r1, r2
 800a646:	461a      	mov	r2, r3
 800a648:	4623      	mov	r3, r4
 800a64a:	71fb      	strb	r3, [r7, #7]
 800a64c:	4603      	mov	r3, r0
 800a64e:	80bb      	strh	r3, [r7, #4]
 800a650:	460b      	mov	r3, r1
 800a652:	71bb      	strb	r3, [r7, #6]
 800a654:	4613      	mov	r3, r2
 800a656:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 800a658:	bf00      	nop
 800a65a:	3708      	adds	r7, #8
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bc90      	pop	{r4, r7}
 800a660:	4770      	bx	lr

0800a662 <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 800a662:	b480      	push	{r7}
 800a664:	b083      	sub	sp, #12
 800a666:	af00      	add	r7, sp, #0
 800a668:	4603      	mov	r3, r0
 800a66a:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 800a66c:	bf00      	nop
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	4603      	mov	r3, r0
 800a680:	6039      	str	r1, [r7, #0]
 800a682:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 800a684:	bf00      	nop
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 800a690:	b480      	push	{r7}
 800a692:	b083      	sub	sp, #12
 800a694:	af00      	add	r7, sp, #0
 800a696:	4603      	mov	r3, r0
 800a698:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 800a69a:	bf00      	nop
 800a69c:	370c      	adds	r7, #12
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr

0800a6a6 <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 800a6a6:	b480      	push	{r7}
 800a6a8:	b083      	sub	sp, #12
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	460a      	mov	r2, r1
 800a6b0:	71fb      	strb	r3, [r7, #7]
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 800a6b6:	bf00      	nop
 800a6b8:	370c      	adds	r7, #12
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr

0800a6c2 <hci_le_advertising_report_event>:
  * @param Advertising_Report See @ref Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[]))
{
 800a6c2:	b480      	push	{r7}
 800a6c4:	b083      	sub	sp, #12
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	6039      	str	r1, [r7, #0]
 800a6cc:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_advertising_report_event\r\n");
}
 800a6ce:	bf00      	nop
 800a6d0:	370c      	adds	r7, #12
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr

0800a6da <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 800a6da:	b490      	push	{r4, r7}
 800a6dc:	b082      	sub	sp, #8
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	4608      	mov	r0, r1
 800a6e4:	4611      	mov	r1, r2
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	4623      	mov	r3, r4
 800a6ea:	71fb      	strb	r3, [r7, #7]
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	80bb      	strh	r3, [r7, #4]
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	807b      	strh	r3, [r7, #2]
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 800a6f8:	bf00      	nop
 800a6fa:	3708      	adds	r7, #8
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bc90      	pop	{r4, r7}
 800a700:	4770      	bx	lr

0800a702 <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 800a702:	b480      	push	{r7}
 800a704:	b083      	sub	sp, #12
 800a706:	af00      	add	r7, sp, #0
 800a708:	4603      	mov	r3, r0
 800a70a:	603a      	str	r2, [r7, #0]
 800a70c:	71fb      	strb	r3, [r7, #7]
 800a70e:	460b      	mov	r3, r1
 800a710:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 800a712:	bf00      	nop
 800a714:	370c      	adds	r7, #12
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr

0800a71e <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 800a71e:	b480      	push	{r7}
 800a720:	b083      	sub	sp, #12
 800a722:	af00      	add	r7, sp, #0
 800a724:	4603      	mov	r3, r0
 800a726:	6039      	str	r1, [r7, #0]
 800a728:	80fb      	strh	r3, [r7, #6]
 800a72a:	4613      	mov	r3, r2
 800a72c:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 800a72e:	bf00      	nop
 800a730:	370c      	adds	r7, #12
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr

0800a73a <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 800a73a:	b490      	push	{r4, r7}
 800a73c:	b082      	sub	sp, #8
 800a73e:	af00      	add	r7, sp, #0
 800a740:	4604      	mov	r4, r0
 800a742:	4608      	mov	r0, r1
 800a744:	4611      	mov	r1, r2
 800a746:	461a      	mov	r2, r3
 800a748:	4623      	mov	r3, r4
 800a74a:	80fb      	strh	r3, [r7, #6]
 800a74c:	4603      	mov	r3, r0
 800a74e:	80bb      	strh	r3, [r7, #4]
 800a750:	460b      	mov	r3, r1
 800a752:	807b      	strh	r3, [r7, #2]
 800a754:	4613      	mov	r3, r2
 800a756:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 800a758:	bf00      	nop
 800a75a:	3708      	adds	r7, #8
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bc90      	pop	{r4, r7}
 800a760:	4770      	bx	lr

0800a762 <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 800a762:	b480      	push	{r7}
 800a764:	b083      	sub	sp, #12
 800a766:	af00      	add	r7, sp, #0
 800a768:	4603      	mov	r3, r0
 800a76a:	6039      	str	r1, [r7, #0]
 800a76c:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 800a76e:	bf00      	nop
 800a770:	370c      	adds	r7, #12
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr

0800a77a <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 800a77a:	b480      	push	{r7}
 800a77c:	b083      	sub	sp, #12
 800a77e:	af00      	add	r7, sp, #0
 800a780:	4603      	mov	r3, r0
 800a782:	6039      	str	r1, [r7, #0]
 800a784:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 800a786:	bf00      	nop
 800a788:	370c      	adds	r7, #12
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr

0800a792 <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 800a792:	b490      	push	{r4, r7}
 800a794:	b082      	sub	sp, #8
 800a796:	af00      	add	r7, sp, #0
 800a798:	4604      	mov	r4, r0
 800a79a:	4608      	mov	r0, r1
 800a79c:	4611      	mov	r1, r2
 800a79e:	461a      	mov	r2, r3
 800a7a0:	4623      	mov	r3, r4
 800a7a2:	71fb      	strb	r3, [r7, #7]
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	80bb      	strh	r3, [r7, #4]
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	71bb      	strb	r3, [r7, #6]
 800a7ac:	4613      	mov	r3, r2
 800a7ae:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 800a7b0:	bf00      	nop
 800a7b2:	3708      	adds	r7, #8
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bc90      	pop	{r4, r7}
 800a7b8:	4770      	bx	lr

0800a7ba <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 800a7ba:	b480      	push	{r7}
 800a7bc:	b083      	sub	sp, #12
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	6039      	str	r1, [r7, #0]
 800a7c4:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 800a7c6:	bf00      	nop
 800a7c8:	370c      	adds	r7, #12
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr

0800a7d2 <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 800a7d2:	b480      	push	{r7}
 800a7d4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 800a7d6:	bf00      	nop
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <aci_gap_pairing_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason))
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	80fb      	strh	r3, [r7, #6]
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	717b      	strb	r3, [r7, #5]
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 800a7f2:	bf00      	nop
 800a7f4:	370c      	adds	r7, #12
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr

0800a7fe <aci_gap_pass_key_req_event>:
@ref aci_gap_pass_key_resp command.
  * @param Connection_Handle Connection handle for which the passkey has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pass_key_req_event(uint16_t Connection_Handle))
{
 800a7fe:	b480      	push	{r7}
 800a800:	b083      	sub	sp, #12
 800a802:	af00      	add	r7, sp, #0
 800a804:	4603      	mov	r3, r0
 800a806:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 800a808:	bf00      	nop
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	4603      	mov	r3, r0
 800a81c:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 800a81e:	bf00      	nop
 800a820:	370c      	adds	r7, #12
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr

0800a82a <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 800a82a:	b480      	push	{r7}
 800a82c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 800a82e:	bf00      	nop
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 800a838:	b480      	push	{r7}
 800a83a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 800a83c:	bf00      	nop
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr

0800a846 <aci_gap_proc_complete_event>:
*/
WEAK_FUNCTION(void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[]))
{
 800a846:	b480      	push	{r7}
 800a848:	b083      	sub	sp, #12
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	603b      	str	r3, [r7, #0]
 800a84e:	4603      	mov	r3, r0
 800a850:	71fb      	strb	r3, [r7, #7]
 800a852:	460b      	mov	r3, r1
 800a854:	71bb      	strb	r3, [r7, #6]
 800a856:	4613      	mov	r3, r2
 800a858:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_proc_complete_event\r\n");
}
 800a85a:	bf00      	nop
 800a85c:	370c      	adds	r7, #12
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr

0800a866 <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 800a866:	b480      	push	{r7}
 800a868:	b083      	sub	sp, #12
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	4603      	mov	r3, r0
 800a86e:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 800a870:	bf00      	nop
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	4603      	mov	r3, r0
 800a884:	6039      	str	r1, [r7, #0]
 800a886:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 800a888:	bf00      	nop
 800a88a:	370c      	adds	r7, #12
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	4603      	mov	r3, r0
 800a89c:	460a      	mov	r2, r1
 800a89e:	80fb      	strh	r3, [r7, #6]
 800a8a0:	4613      	mov	r3, r2
 800a8a2:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 800a8a4:	bf00      	nop
 800a8a6:	370c      	adds	r7, #12
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <aci_gatt_attribute_modified_event>:
WEAK_FUNCTION(void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attr_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[]))
{
 800a8b0:	b490      	push	{r4, r7}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	4604      	mov	r4, r0
 800a8b8:	4608      	mov	r0, r1
 800a8ba:	4611      	mov	r1, r2
 800a8bc:	461a      	mov	r2, r3
 800a8be:	4623      	mov	r3, r4
 800a8c0:	80fb      	strh	r3, [r7, #6]
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	80bb      	strh	r3, [r7, #4]
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	807b      	strh	r3, [r7, #2]
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_attribute_modified_event\r\n");
}
 800a8ce:	bf00      	nop
 800a8d0:	3708      	adds	r7, #8
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bc90      	pop	{r4, r7}
 800a8d6:	4770      	bx	lr

0800a8d8 <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	4603      	mov	r3, r0
 800a8e0:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 800a8e2:	bf00      	nop
 800a8e4:	370c      	adds	r7, #12
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr

0800a8ee <aci_att_exchange_mtu_resp_event>:
  * @param Server_RX_MTU ATT_MTU value agreed between server and client
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU))
{
 800a8ee:	b480      	push	{r7}
 800a8f0:	b083      	sub	sp, #12
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	460a      	mov	r2, r1
 800a8f8:	80fb      	strh	r3, [r7, #6]
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exchange_mtu_resp_event\r\n");
}
 800a8fe:	bf00      	nop
 800a900:	370c      	adds	r7, #12
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 800a90a:	b480      	push	{r7}
 800a90c:	b083      	sub	sp, #12
 800a90e:	af00      	add	r7, sp, #0
 800a910:	603b      	str	r3, [r7, #0]
 800a912:	4603      	mov	r3, r0
 800a914:	80fb      	strh	r3, [r7, #6]
 800a916:	460b      	mov	r3, r1
 800a918:	717b      	strb	r3, [r7, #5]
 800a91a:	4613      	mov	r3, r2
 800a91c:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 800a91e:	bf00      	nop
 800a920:	370c      	adds	r7, #12
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 800a92a:	b480      	push	{r7}
 800a92c:	b083      	sub	sp, #12
 800a92e:	af00      	add	r7, sp, #0
 800a930:	4603      	mov	r3, r0
 800a932:	603a      	str	r2, [r7, #0]
 800a934:	80fb      	strh	r3, [r7, #6]
 800a936:	460b      	mov	r3, r1
 800a938:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 800a93a:	bf00      	nop
 800a93c:	370c      	adds	r7, #12
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr

0800a946 <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 800a946:	b480      	push	{r7}
 800a948:	b083      	sub	sp, #12
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	603b      	str	r3, [r7, #0]
 800a94e:	4603      	mov	r3, r0
 800a950:	80fb      	strh	r3, [r7, #6]
 800a952:	460b      	mov	r3, r1
 800a954:	717b      	strb	r3, [r7, #5]
 800a956:	4613      	mov	r3, r2
 800a958:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 800a95a:	bf00      	nop
 800a95c:	370c      	adds	r7, #12
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr

0800a966 <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 800a966:	b480      	push	{r7}
 800a968:	b083      	sub	sp, #12
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	4603      	mov	r3, r0
 800a96e:	603a      	str	r2, [r7, #0]
 800a970:	80fb      	strh	r3, [r7, #6]
 800a972:	460b      	mov	r3, r1
 800a974:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 800a976:	bf00      	nop
 800a978:	370c      	adds	r7, #12
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 800a982:	b480      	push	{r7}
 800a984:	b083      	sub	sp, #12
 800a986:	af00      	add	r7, sp, #0
 800a988:	4603      	mov	r3, r0
 800a98a:	603a      	str	r2, [r7, #0]
 800a98c:	80fb      	strh	r3, [r7, #6]
 800a98e:	460b      	mov	r3, r1
 800a990:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 800a992:	bf00      	nop
 800a994:	370c      	adds	r7, #12
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr

0800a99e <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 800a99e:	b480      	push	{r7}
 800a9a0:	b083      	sub	sp, #12
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	603a      	str	r2, [r7, #0]
 800a9a8:	80fb      	strh	r3, [r7, #6]
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 800a9ae:	bf00      	nop
 800a9b0:	370c      	adds	r7, #12
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr

0800a9ba <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 800a9ba:	b480      	push	{r7}
 800a9bc:	b083      	sub	sp, #12
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	603b      	str	r3, [r7, #0]
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	80fb      	strh	r3, [r7, #6]
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	717b      	strb	r3, [r7, #5]
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 800a9ce:	bf00      	nop
 800a9d0:	370c      	adds	r7, #12
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr

0800a9da <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 800a9da:	b490      	push	{r4, r7}
 800a9dc:	b082      	sub	sp, #8
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	4604      	mov	r4, r0
 800a9e2:	4608      	mov	r0, r1
 800a9e4:	4611      	mov	r1, r2
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	4623      	mov	r3, r4
 800a9ea:	80fb      	strh	r3, [r7, #6]
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	80bb      	strh	r3, [r7, #4]
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	807b      	strh	r3, [r7, #2]
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 800a9f8:	bf00      	nop
 800a9fa:	3708      	adds	r7, #8
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bc90      	pop	{r4, r7}
 800aa00:	4770      	bx	lr

0800aa02 <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 800aa02:	b480      	push	{r7}
 800aa04:	b083      	sub	sp, #12
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	4603      	mov	r3, r0
 800aa0a:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 800aa0c:	bf00      	nop
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	607b      	str	r3, [r7, #4]
 800aa20:	4603      	mov	r3, r0
 800aa22:	81fb      	strh	r3, [r7, #14]
 800aa24:	460b      	mov	r3, r1
 800aa26:	81bb      	strh	r3, [r7, #12]
 800aa28:	4613      	mov	r3, r2
 800aa2a:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 800aa2c:	bf00      	nop
 800aa2e:	3714      	adds	r7, #20
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <aci_gatt_notification_event>:
*/
WEAK_FUNCTION(void aci_gatt_notification_event(uint16_t Connection_Handle,
                                 uint16_t Attribute_Handle,
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[]))
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b085      	sub	sp, #20
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	607b      	str	r3, [r7, #4]
 800aa40:	4603      	mov	r3, r0
 800aa42:	81fb      	strh	r3, [r7, #14]
 800aa44:	460b      	mov	r3, r1
 800aa46:	81bb      	strh	r3, [r7, #12]
 800aa48:	4613      	mov	r3, r2
 800aa4a:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_notification_event\r\n");
}
 800aa4c:	bf00      	nop
 800aa4e:	3714      	adds	r7, #20
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <aci_gatt_proc_complete_event>:
  - 0xFC: Flash erase failed
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code))
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	4603      	mov	r3, r0
 800aa60:	460a      	mov	r2, r1
 800aa62:	80fb      	strh	r3, [r7, #6]
 800aa64:	4613      	mov	r3, r2
 800aa66:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_complete_event\r\n");
}
 800aa68:	bf00      	nop
 800aa6a:	370c      	adds	r7, #12
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 800aa74:	b490      	push	{r4, r7}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	4604      	mov	r4, r0
 800aa7c:	4608      	mov	r0, r1
 800aa7e:	4611      	mov	r1, r2
 800aa80:	461a      	mov	r2, r3
 800aa82:	4623      	mov	r3, r4
 800aa84:	80fb      	strh	r3, [r7, #6]
 800aa86:	4603      	mov	r3, r0
 800aa88:	717b      	strb	r3, [r7, #5]
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	807b      	strh	r3, [r7, #2]
 800aa8e:	4613      	mov	r3, r2
 800aa90:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 800aa92:	bf00      	nop
 800aa94:	3708      	adds	r7, #8
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bc90      	pop	{r4, r7}
 800aa9a:	4770      	bx	lr

0800aa9c <aci_gatt_disc_read_char_by_uuid_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                uint16_t Attribute_Handle,
                                                uint8_t Attribute_Value_Length,
                                                uint8_t Attribute_Value[]))
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	607b      	str	r3, [r7, #4]
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	81fb      	strh	r3, [r7, #14]
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	81bb      	strh	r3, [r7, #12]
 800aaac:	4613      	mov	r3, r2
 800aaae:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_disc_read_char_by_uuid_resp_event\r\n");
}
 800aab0:	bf00      	nop
 800aab2:	3714      	adds	r7, #20
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	607b      	str	r3, [r7, #4]
 800aac4:	4603      	mov	r3, r0
 800aac6:	81fb      	strh	r3, [r7, #14]
 800aac8:	460b      	mov	r3, r1
 800aaca:	81bb      	strh	r3, [r7, #12]
 800aacc:	4613      	mov	r3, r2
 800aace:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 800aad0:	bf00      	nop
 800aad2:	3714      	adds	r7, #20
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	4603      	mov	r3, r0
 800aae4:	603a      	str	r2, [r7, #0]
 800aae6:	80fb      	strh	r3, [r7, #6]
 800aae8:	460b      	mov	r3, r1
 800aaea:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 800aaec:	bf00      	nop
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <aci_gatt_tx_pool_available_event>:
  * @param Available_Buffers Not used.
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers))
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	4603      	mov	r3, r0
 800ab00:	460a      	mov	r2, r1
 800ab02:	80fb      	strh	r3, [r7, #6]
 800ab04:	4613      	mov	r3, r2
 800ab06:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_tx_pool_available_event\r\n");
}
 800ab08:	bf00      	nop
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 800ab1e:	bf00      	nop
 800ab20:	370c      	adds	r7, #12
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr

0800ab2a <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 800ab2a:	b490      	push	{r4, r7}
 800ab2c:	b082      	sub	sp, #8
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	4604      	mov	r4, r0
 800ab32:	4608      	mov	r0, r1
 800ab34:	4611      	mov	r1, r2
 800ab36:	461a      	mov	r2, r3
 800ab38:	4623      	mov	r3, r4
 800ab3a:	80fb      	strh	r3, [r7, #6]
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	80bb      	strh	r3, [r7, #4]
 800ab40:	460b      	mov	r3, r1
 800ab42:	807b      	strh	r3, [r7, #2]
 800ab44:	4613      	mov	r3, r2
 800ab46:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 800ab48:	bf00      	nop
 800ab4a:	3708      	adds	r7, #8
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bc90      	pop	{r4, r7}
 800ab50:	4770      	bx	lr

0800ab52 <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 800ab52:	b480      	push	{r7}
 800ab54:	b083      	sub	sp, #12
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	4603      	mov	r3, r0
 800ab5a:	460a      	mov	r2, r1
 800ab5c:	80fb      	strh	r3, [r7, #6]
 800ab5e:	4613      	mov	r3, r2
 800ab60:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 800ab62:	bf00      	nop
 800ab64:	370c      	adds	r7, #12
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr

0800ab6e <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 800ab6e:	b480      	push	{r7}
 800ab70:	b083      	sub	sp, #12
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	4603      	mov	r3, r0
 800ab76:	603a      	str	r2, [r7, #0]
 800ab78:	80fb      	strh	r3, [r7, #6]
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 800ab7e:	bf00      	nop
 800ab80:	370c      	adds	r7, #12
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr

0800ab8a <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 800ab8a:	b490      	push	{r4, r7}
 800ab8c:	b082      	sub	sp, #8
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	4604      	mov	r4, r0
 800ab92:	4608      	mov	r0, r1
 800ab94:	4611      	mov	r1, r2
 800ab96:	461a      	mov	r2, r3
 800ab98:	4623      	mov	r3, r4
 800ab9a:	80fb      	strh	r3, [r7, #6]
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	717b      	strb	r3, [r7, #5]
 800aba0:	460b      	mov	r3, r1
 800aba2:	807b      	strh	r3, [r7, #2]
 800aba4:	4613      	mov	r3, r2
 800aba6:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 800aba8:	bf00      	nop
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bc90      	pop	{r4, r7}
 800abb0:	4770      	bx	lr

0800abb2 <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 800abb2:	b490      	push	{r4, r7}
 800abb4:	b082      	sub	sp, #8
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	4604      	mov	r4, r0
 800abba:	4608      	mov	r0, r1
 800abbc:	4611      	mov	r1, r2
 800abbe:	461a      	mov	r2, r3
 800abc0:	4623      	mov	r3, r4
 800abc2:	80fb      	strh	r3, [r7, #6]
 800abc4:	4603      	mov	r3, r0
 800abc6:	717b      	strb	r3, [r7, #5]
 800abc8:	460b      	mov	r3, r1
 800abca:	807b      	strh	r3, [r7, #2]
 800abcc:	4613      	mov	r3, r2
 800abce:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 800abd0:	bf00      	nop
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bc90      	pop	{r4, r7}
 800abd8:	4770      	bx	lr

0800abda <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 800abda:	b480      	push	{r7}
 800abdc:	b083      	sub	sp, #12
 800abde:	af00      	add	r7, sp, #0
 800abe0:	4603      	mov	r3, r0
 800abe2:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 800abe4:	bf00      	nop
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 800abf8:	bf00      	nop
 800abfa:	370c      	adds	r7, #12
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 800ac04:	b480      	push	{r7}
 800ac06:	b085      	sub	sp, #20
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60b9      	str	r1, [r7, #8]
 800ac0c:	607a      	str	r2, [r7, #4]
 800ac0e:	603b      	str	r3, [r7, #0]
 800ac10:	4603      	mov	r3, r0
 800ac12:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 800ac14:	bf00      	nop
 800ac16:	3714      	adds	r7, #20
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 800ac20:	b480      	push	{r7}
 800ac22:	b083      	sub	sp, #12
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	4603      	mov	r3, r0
 800ac28:	603a      	str	r2, [r7, #0]
 800ac2a:	71fb      	strb	r3, [r7, #7]
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 800ac30:	bf00      	nop
 800ac32:	370c      	adds	r7, #12
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	4603      	mov	r3, r0
 800ac44:	603a      	str	r2, [r7, #0]
 800ac46:	71fb      	strb	r3, [r7, #7]
 800ac48:	460b      	mov	r3, r1
 800ac4a:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 800ac4c:	bf00      	nop
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	4603      	mov	r3, r0
 800ac60:	603a      	str	r2, [r7, #0]
 800ac62:	71fb      	strb	r3, [r7, #7]
 800ac64:	460b      	mov	r3, r1
 800ac66:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 800ac68:	bf00      	nop
 800ac6a:	370c      	adds	r7, #12
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr

0800ac74 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b088      	sub	sp, #32
 800ac78:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ac7e:	f107 0308 	add.w	r3, r7, #8
 800ac82:	2218      	movs	r2, #24
 800ac84:	2100      	movs	r1, #0
 800ac86:	4618      	mov	r0, r3
 800ac88:	f001 fb7a 	bl	800c380 <memset>
  rq.ogf = 0x03;
 800ac8c:	2303      	movs	r3, #3
 800ac8e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800ac90:	2303      	movs	r3, #3
 800ac92:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ac94:	1dfb      	adds	r3, r7, #7
 800ac96:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800ac9c:	f107 0308 	add.w	r3, r7, #8
 800aca0:	2100      	movs	r1, #0
 800aca2:	4618      	mov	r0, r3
 800aca4:	f000 f9ca 	bl	800b03c <hci_send_req>
 800aca8:	4603      	mov	r3, r0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	da01      	bge.n	800acb2 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800acae:	23ff      	movs	r3, #255	; 0xff
 800acb0:	e005      	b.n	800acbe <hci_reset+0x4a>
  if (status) {
 800acb2:	79fb      	ldrb	r3, [r7, #7]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d001      	beq.n	800acbc <hci_reset+0x48>
    return status;
 800acb8:	79fb      	ldrb	r3, [r7, #7]
 800acba:	e000      	b.n	800acbe <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800acbc:	2300      	movs	r3, #0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3720      	adds	r7, #32
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <hci_read_local_version_information>:
tBleStatus hci_read_local_version_information(uint8_t *HCI_Version,
                                              uint16_t *HCI_Revision,
                                              uint8_t *LMP_PAL_Version,
                                              uint16_t *Manufacturer_Name,
                                              uint16_t *LMP_PAL_Subversion)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b08e      	sub	sp, #56	; 0x38
 800acca:	af00      	add	r7, sp, #0
 800accc:	60f8      	str	r0, [r7, #12]
 800acce:	60b9      	str	r1, [r7, #8]
 800acd0:	607a      	str	r2, [r7, #4]
 800acd2:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  hci_read_local_version_information_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800acd4:	f107 0314 	add.w	r3, r7, #20
 800acd8:	2209      	movs	r2, #9
 800acda:	2100      	movs	r1, #0
 800acdc:	4618      	mov	r0, r3
 800acde:	f001 fb4f 	bl	800c380 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ace2:	f107 0320 	add.w	r3, r7, #32
 800ace6:	2218      	movs	r2, #24
 800ace8:	2100      	movs	r1, #0
 800acea:	4618      	mov	r0, r3
 800acec:	f001 fb48 	bl	800c380 <memset>
  rq.ogf = 0x04;
 800acf0:	2304      	movs	r3, #4
 800acf2:	843b      	strh	r3, [r7, #32]
  rq.ocf = 0x001;
 800acf4:	2301      	movs	r3, #1
 800acf6:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.rparam = &resp;
 800acf8:	f107 0314 	add.w	r3, r7, #20
 800acfc:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = sizeof(resp);
 800acfe:	2309      	movs	r3, #9
 800ad00:	637b      	str	r3, [r7, #52]	; 0x34
  if (hci_send_req(&rq, FALSE) < 0)
 800ad02:	f107 0320 	add.w	r3, r7, #32
 800ad06:	2100      	movs	r1, #0
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f000 f997 	bl	800b03c <hci_send_req>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	da01      	bge.n	800ad18 <hci_read_local_version_information+0x52>
    return BLE_STATUS_TIMEOUT;
 800ad14:	23ff      	movs	r3, #255	; 0xff
 800ad16:	e018      	b.n	800ad4a <hci_read_local_version_information+0x84>
  if (resp.Status) {
 800ad18:	7d3b      	ldrb	r3, [r7, #20]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d001      	beq.n	800ad22 <hci_read_local_version_information+0x5c>
    return resp.Status;
 800ad1e:	7d3b      	ldrb	r3, [r7, #20]
 800ad20:	e013      	b.n	800ad4a <hci_read_local_version_information+0x84>
  }
  *HCI_Version = btoh(resp.HCI_Version, 1);
 800ad22:	7d7a      	ldrb	r2, [r7, #21]
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	701a      	strb	r2, [r3, #0]
  *HCI_Revision = btoh(resp.HCI_Revision, 2);
 800ad28:	8afa      	ldrh	r2, [r7, #22]
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	801a      	strh	r2, [r3, #0]
  *LMP_PAL_Version = btoh(resp.LMP_PAL_Version, 1);
 800ad2e:	7e3a      	ldrb	r2, [r7, #24]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	701a      	strb	r2, [r3, #0]
  *Manufacturer_Name = btoh(resp.Manufacturer_Name, 2);
 800ad34:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 800ad38:	b29a      	uxth	r2, r3
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	801a      	strh	r2, [r3, #0]
  *LMP_PAL_Subversion = btoh(resp.LMP_PAL_Subversion, 2);
 800ad3e:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800ad42:	b29a      	uxth	r2, r3
 800ad44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad46:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ad48:	2300      	movs	r3, #0
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3738      	adds	r7, #56	; 0x38
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b0cc      	sub	sp, #304	; 0x130
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	4602      	mov	r2, r0
 800ad5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad62:	6019      	str	r1, [r3, #0]
 800ad64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad68:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ad6c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 800ad6e:	f107 030c 	add.w	r3, r7, #12
 800ad72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ad76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad7a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ad7e:	2200      	movs	r2, #0
 800ad80:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800ad82:	2300      	movs	r3, #0
 800ad84:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 800ad88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad8c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ad90:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800ad94:	7812      	ldrb	r2, [r2, #0]
 800ad96:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ad98:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 800ada2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ada6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d00a      	beq.n	800adc6 <hci_le_set_scan_response_data+0x74>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 800adb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adb4:	1c58      	adds	r0, r3, #1
 800adb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800adba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800adbe:	221f      	movs	r2, #31
 800adc0:	6819      	ldr	r1, [r3, #0]
 800adc2:	f001 fb5c 	bl	800c47e <memcpy>
  }
  index_input += 31;
 800adc6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800adca:	331f      	adds	r3, #31
 800adcc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800add0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800add4:	2218      	movs	r2, #24
 800add6:	2100      	movs	r1, #0
 800add8:	4618      	mov	r0, r3
 800adda:	f001 fad1 	bl	800c380 <memset>
  rq.ogf = 0x08;
 800adde:	2308      	movs	r3, #8
 800ade0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 800ade4:	2309      	movs	r3, #9
 800ade6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800adea:	f107 030c 	add.w	r3, r7, #12
 800adee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800adf2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800adf6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800adfa:	f107 030b 	add.w	r3, r7, #11
 800adfe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ae02:	2301      	movs	r3, #1
 800ae04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ae08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ae0c:	2100      	movs	r1, #0
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f000 f914 	bl	800b03c <hci_send_req>
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	da01      	bge.n	800ae1e <hci_le_set_scan_response_data+0xcc>
    return BLE_STATUS_TIMEOUT;
 800ae1a:	23ff      	movs	r3, #255	; 0xff
 800ae1c:	e00d      	b.n	800ae3a <hci_le_set_scan_response_data+0xe8>
  if (status) {
 800ae1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae22:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d005      	beq.n	800ae38 <hci_le_set_scan_response_data+0xe6>
    return status;
 800ae2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae30:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	e000      	b.n	800ae3a <hci_le_set_scan_response_data+0xe8>
  }
  return BLE_STATUS_SUCCESS;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b085      	sub	sp, #20
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	3308      	adds	r3, #8
 800ae50:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	2b04      	cmp	r3, #4
 800ae58:	d001      	beq.n	800ae5e <verify_packet+0x1a>
    return 1; /* Incorrect type */
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e00c      	b.n	800ae78 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	3302      	adds	r3, #2
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	461a      	mov	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800ae6c:	3b03      	subs	r3, #3
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d001      	beq.n	800ae76 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 800ae72:	2302      	movs	r3, #2
 800ae74:	e000      	b.n	800ae78 <verify_packet+0x34>
  
  return 0;      
 800ae76:	2300      	movs	r3, #0
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3714      	adds	r7, #20
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b0a6      	sub	sp, #152	; 0x98
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	607b      	str	r3, [r7, #4]
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	81fb      	strh	r3, [r7, #14]
 800ae90:	460b      	mov	r3, r1
 800ae92:	81bb      	strh	r3, [r7, #12]
 800ae94:	4613      	mov	r3, r2
 800ae96:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800ae98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ae9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aea0:	b21a      	sxth	r2, r3
 800aea2:	89fb      	ldrh	r3, [r7, #14]
 800aea4:	029b      	lsls	r3, r3, #10
 800aea6:	b21b      	sxth	r3, r3
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	b21b      	sxth	r3, r3
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 800aeb0:	7afb      	ldrb	r3, [r7, #11]
 800aeb2:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800aeb8:	f107 0318 	add.w	r3, r7, #24
 800aebc:	3301      	adds	r3, #1
 800aebe:	461a      	mov	r2, r3
 800aec0:	f107 0314 	add.w	r3, r7, #20
 800aec4:	8819      	ldrh	r1, [r3, #0]
 800aec6:	789b      	ldrb	r3, [r3, #2]
 800aec8:	8011      	strh	r1, [r2, #0]
 800aeca:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800aecc:	f107 0318 	add.w	r3, r7, #24
 800aed0:	3304      	adds	r3, #4
 800aed2:	7afa      	ldrb	r2, [r7, #11]
 800aed4:	6879      	ldr	r1, [r7, #4]
 800aed6:	4618      	mov	r0, r3
 800aed8:	f001 fad1 	bl	800c47e <memcpy>
  
  if (hciContext.io.Send)
 800aedc:	4b08      	ldr	r3, [pc, #32]	; (800af00 <send_cmd+0x7c>)
 800aede:	691b      	ldr	r3, [r3, #16]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d009      	beq.n	800aef8 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800aee4:	4b06      	ldr	r3, [pc, #24]	; (800af00 <send_cmd+0x7c>)
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	7afa      	ldrb	r2, [r7, #11]
 800aeea:	b292      	uxth	r2, r2
 800aeec:	3204      	adds	r2, #4
 800aeee:	b291      	uxth	r1, r2
 800aef0:	f107 0218 	add.w	r2, r7, #24
 800aef4:	4610      	mov	r0, r2
 800aef6:	4798      	blx	r3
  }
}
 800aef8:	bf00      	nop
 800aefa:	3798      	adds	r7, #152	; 0x98
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	20000e98 	.word	0x20000e98

0800af04 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800af0e:	e00a      	b.n	800af26 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 800af10:	f107 030c 	add.w	r3, r7, #12
 800af14:	4619      	mov	r1, r3
 800af16:	6838      	ldr	r0, [r7, #0]
 800af18:	f000 fae8 	bl	800b4ec <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	4619      	mov	r1, r3
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 fa4f 	bl	800b3c4 <list_insert_head>
  while (!list_is_empty(src_list))
 800af26:	6838      	ldr	r0, [r7, #0]
 800af28:	f000 fa2a 	bl	800b380 <list_is_empty>
 800af2c:	4603      	mov	r3, r0
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d0ee      	beq.n	800af10 <move_list+0xc>
  }
}
 800af32:	bf00      	nop
 800af34:	bf00      	nop
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800af42:	e009      	b.n	800af58 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 800af44:	1d3b      	adds	r3, r7, #4
 800af46:	4619      	mov	r1, r3
 800af48:	4809      	ldr	r0, [pc, #36]	; (800af70 <free_event_list+0x34>)
 800af4a:	f000 faa8 	bl	800b49e <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4619      	mov	r1, r3
 800af52:	4808      	ldr	r0, [pc, #32]	; (800af74 <free_event_list+0x38>)
 800af54:	f000 fa5c 	bl	800b410 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 800af58:	4806      	ldr	r0, [pc, #24]	; (800af74 <free_event_list+0x38>)
 800af5a:	f000 faee 	bl	800b53a <list_get_size>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b04      	cmp	r3, #4
 800af62:	ddef      	ble.n	800af44 <free_event_list+0x8>
  }
}
 800af64:	bf00      	nop
 800af66:	bf00      	nop
 800af68:	3708      	adds	r7, #8
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	20000918 	.word	0x20000918
 800af74:	20000910 	.word	0x20000910

0800af78 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d002      	beq.n	800af8e <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800af88:	4a18      	ldr	r2, [pc, #96]	; (800afec <hci_init+0x74>)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800af8e:	4818      	ldr	r0, [pc, #96]	; (800aff0 <hci_init+0x78>)
 800af90:	f000 f9e6 	bl	800b360 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800af94:	4817      	ldr	r0, [pc, #92]	; (800aff4 <hci_init+0x7c>)
 800af96:	f000 f9e3 	bl	800b360 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800af9a:	f7f8 fabd 	bl	8003518 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800af9e:	2300      	movs	r3, #0
 800afa0:	73fb      	strb	r3, [r7, #15]
 800afa2:	e00c      	b.n	800afbe <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800afa4:	7bfb      	ldrb	r3, [r7, #15]
 800afa6:	228c      	movs	r2, #140	; 0x8c
 800afa8:	fb02 f303 	mul.w	r3, r2, r3
 800afac:	4a12      	ldr	r2, [pc, #72]	; (800aff8 <hci_init+0x80>)
 800afae:	4413      	add	r3, r2
 800afb0:	4619      	mov	r1, r3
 800afb2:	480f      	ldr	r0, [pc, #60]	; (800aff0 <hci_init+0x78>)
 800afb4:	f000 fa2c 	bl	800b410 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800afb8:	7bfb      	ldrb	r3, [r7, #15]
 800afba:	3301      	adds	r3, #1
 800afbc:	73fb      	strb	r3, [r7, #15]
 800afbe:	7bfb      	ldrb	r3, [r7, #15]
 800afc0:	2b09      	cmp	r3, #9
 800afc2:	d9ef      	bls.n	800afa4 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800afc4:	4b09      	ldr	r3, [pc, #36]	; (800afec <hci_init+0x74>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d003      	beq.n	800afd4 <hci_init+0x5c>
 800afcc:	4b07      	ldr	r3, [pc, #28]	; (800afec <hci_init+0x74>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2000      	movs	r0, #0
 800afd2:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 800afd4:	4b05      	ldr	r3, [pc, #20]	; (800afec <hci_init+0x74>)
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d002      	beq.n	800afe2 <hci_init+0x6a>
 800afdc:	4b03      	ldr	r3, [pc, #12]	; (800afec <hci_init+0x74>)
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	4798      	blx	r3
}
 800afe2:	bf00      	nop
 800afe4:	3710      	adds	r7, #16
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	20000e98 	.word	0x20000e98
 800aff0:	20000910 	.word	0x20000910
 800aff4:	20000918 	.word	0x20000918
 800aff8:	20000920 	.word	0x20000920

0800affc <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a0b      	ldr	r2, [pc, #44]	; (800b038 <hci_register_io_bus+0x3c>)
 800b00a:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	4a09      	ldr	r2, [pc, #36]	; (800b038 <hci_register_io_bus+0x3c>)
 800b012:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	691b      	ldr	r3, [r3, #16]
 800b018:	4a07      	ldr	r2, [pc, #28]	; (800b038 <hci_register_io_bus+0x3c>)
 800b01a:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	699b      	ldr	r3, [r3, #24]
 800b020:	4a05      	ldr	r2, [pc, #20]	; (800b038 <hci_register_io_bus+0x3c>)
 800b022:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	4a03      	ldr	r2, [pc, #12]	; (800b038 <hci_register_io_bus+0x3c>)
 800b02a:	6093      	str	r3, [r2, #8]
}
 800b02c:	bf00      	nop
 800b02e:	370c      	adds	r7, #12
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr
 800b038:	20000e98 	.word	0x20000e98

0800b03c <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b08e      	sub	sp, #56	; 0x38
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	460b      	mov	r3, r1
 800b046:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	885b      	ldrh	r3, [r3, #2]
 800b04c:	b21b      	sxth	r3, r3
 800b04e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b052:	b21a      	sxth	r2, r3
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	881b      	ldrh	r3, [r3, #0]
 800b058:	029b      	lsls	r3, r3, #10
 800b05a:	b21b      	sxth	r3, r3
 800b05c:	4313      	orrs	r3, r2
 800b05e:	b21b      	sxth	r3, r3
 800b060:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800b062:	2300      	movs	r3, #0
 800b064:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800b066:	f107 0308 	add.w	r3, r7, #8
 800b06a:	4618      	mov	r0, r3
 800b06c:	f000 f978 	bl	800b360 <list_init_head>

  free_event_list();
 800b070:	f7ff ff64 	bl	800af3c <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	8818      	ldrh	r0, [r3, #0]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	8859      	ldrh	r1, [r3, #2]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	b2da      	uxtb	r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	689b      	ldr	r3, [r3, #8]
 800b086:	f7ff fefd 	bl	800ae84 <send_cmd>
  
  if (async)
 800b08a:	78fb      	ldrb	r3, [r7, #3]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d001      	beq.n	800b094 <hci_send_req+0x58>
  {
    return 0;
 800b090:	2300      	movs	r3, #0
 800b092:	e0e2      	b.n	800b25a <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 800b094:	f7f9 fbe4 	bl	8004860 <HAL_GetTick>
 800b098:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800b09a:	f7f9 fbe1 	bl	8004860 <HAL_GetTick>
 800b09e:	4602      	mov	r2, r0
 800b0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a2:	1ad3      	subs	r3, r2, r3
 800b0a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b0a8:	f200 80b3 	bhi.w	800b212 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800b0ac:	486d      	ldr	r0, [pc, #436]	; (800b264 <hci_send_req+0x228>)
 800b0ae:	f000 f967 	bl	800b380 <list_is_empty>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d000      	beq.n	800b0ba <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800b0b8:	e7ef      	b.n	800b09a <hci_send_req+0x5e>
      {
        break;
 800b0ba:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800b0bc:	f107 0310 	add.w	r3, r7, #16
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	4868      	ldr	r0, [pc, #416]	; (800b264 <hci_send_req+0x228>)
 800b0c4:	f000 f9eb 	bl	800b49e <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	3308      	adds	r3, #8
 800b0cc:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800b0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	2b04      	cmp	r3, #4
 800b0d4:	d17f      	bne.n	800b1d6 <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 800b0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d8:	3301      	adds	r3, #1
 800b0da:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	3308      	adds	r3, #8
 800b0e0:	3303      	adds	r3, #3
 800b0e2:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800b0ea:	3b03      	subs	r3, #3
 800b0ec:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800b0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	2b3e      	cmp	r3, #62	; 0x3e
 800b0f4:	d04c      	beq.n	800b190 <hci_send_req+0x154>
 800b0f6:	2b3e      	cmp	r3, #62	; 0x3e
 800b0f8:	dc68      	bgt.n	800b1cc <hci_send_req+0x190>
 800b0fa:	2b10      	cmp	r3, #16
 800b0fc:	f000 808b 	beq.w	800b216 <hci_send_req+0x1da>
 800b100:	2b10      	cmp	r3, #16
 800b102:	dc63      	bgt.n	800b1cc <hci_send_req+0x190>
 800b104:	2b0e      	cmp	r3, #14
 800b106:	d023      	beq.n	800b150 <hci_send_req+0x114>
 800b108:	2b0f      	cmp	r3, #15
 800b10a:	d15f      	bne.n	800b1cc <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800b10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10e:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	885b      	ldrh	r3, [r3, #2]
 800b114:	b29b      	uxth	r3, r3
 800b116:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b118:	429a      	cmp	r2, r3
 800b11a:	d17e      	bne.n	800b21a <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	2b0f      	cmp	r3, #15
 800b122:	d004      	beq.n	800b12e <hci_send_req+0xf2>
          if (cs->status) {
 800b124:	69bb      	ldr	r3, [r7, #24]
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d051      	beq.n	800b1d0 <hci_send_req+0x194>
            goto failed;
 800b12c:	e078      	b.n	800b220 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	695a      	ldr	r2, [r3, #20]
 800b132:	6a3b      	ldr	r3, [r7, #32]
 800b134:	429a      	cmp	r2, r3
 800b136:	bf28      	it	cs
 800b138:	461a      	movcs	r2, r3
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6918      	ldr	r0, [r3, #16]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	695b      	ldr	r3, [r3, #20]
 800b146:	461a      	mov	r2, r3
 800b148:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b14a:	f001 f998 	bl	800c47e <memcpy>
        goto done;
 800b14e:	e078      	b.n	800b242 <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 800b150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b152:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b15a:	b29b      	uxth	r3, r3
 800b15c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b15e:	429a      	cmp	r2, r3
 800b160:	d15d      	bne.n	800b21e <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 800b162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b164:	3303      	adds	r3, #3
 800b166:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800b168:	6a3b      	ldr	r3, [r7, #32]
 800b16a:	3b03      	subs	r3, #3
 800b16c:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	695a      	ldr	r2, [r3, #20]
 800b172:	6a3b      	ldr	r3, [r7, #32]
 800b174:	429a      	cmp	r2, r3
 800b176:	bf28      	it	cs
 800b178:	461a      	movcs	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6918      	ldr	r0, [r3, #16]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	695b      	ldr	r3, [r3, #20]
 800b186:	461a      	mov	r2, r3
 800b188:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b18a:	f001 f978 	bl	800c47e <memcpy>
        goto done;
 800b18e:	e058      	b.n	800b242 <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800b190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b192:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 800b194:	69fb      	ldr	r3, [r7, #28]
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	461a      	mov	r2, r3
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d118      	bne.n	800b1d4 <hci_send_req+0x198>
          break;
      
        len -= 1;
 800b1a2:	6a3b      	ldr	r3, [r7, #32]
 800b1a4:	3b01      	subs	r3, #1
 800b1a6:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	695a      	ldr	r2, [r3, #20]
 800b1ac:	6a3b      	ldr	r3, [r7, #32]
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	bf28      	it	cs
 800b1b2:	461a      	movcs	r2, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6918      	ldr	r0, [r3, #16]
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	1c59      	adds	r1, r3, #1
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	695b      	ldr	r3, [r3, #20]
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	f001 f95a 	bl	800c47e <memcpy>
        goto done;
 800b1ca:	e03a      	b.n	800b242 <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 800b1cc:	bf00      	nop
 800b1ce:	e002      	b.n	800b1d6 <hci_send_req+0x19a>
          break;
 800b1d0:	bf00      	nop
 800b1d2:	e000      	b.n	800b1d6 <hci_send_req+0x19a>
          break;
 800b1d4:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800b1d6:	4824      	ldr	r0, [pc, #144]	; (800b268 <hci_send_req+0x22c>)
 800b1d8:	f000 f8d2 	bl	800b380 <list_is_empty>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d00d      	beq.n	800b1fe <hci_send_req+0x1c2>
 800b1e2:	4820      	ldr	r0, [pc, #128]	; (800b264 <hci_send_req+0x228>)
 800b1e4:	f000 f8cc 	bl	800b380 <list_is_empty>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d007      	beq.n	800b1fe <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	481d      	ldr	r0, [pc, #116]	; (800b268 <hci_send_req+0x22c>)
 800b1f4:	f000 f90c 	bl	800b410 <list_insert_tail>
      hciReadPacket=NULL;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	613b      	str	r3, [r7, #16]
 800b1fc:	e008      	b.n	800b210 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800b1fe:	693a      	ldr	r2, [r7, #16]
 800b200:	f107 0308 	add.w	r3, r7, #8
 800b204:	4611      	mov	r1, r2
 800b206:	4618      	mov	r0, r3
 800b208:	f000 f902 	bl	800b410 <list_insert_tail>
      hciReadPacket=NULL;
 800b20c:	2300      	movs	r3, #0
 800b20e:	613b      	str	r3, [r7, #16]
  {
 800b210:	e740      	b.n	800b094 <hci_send_req+0x58>
        goto failed;
 800b212:	bf00      	nop
 800b214:	e004      	b.n	800b220 <hci_send_req+0x1e4>
        goto failed;
 800b216:	bf00      	nop
 800b218:	e002      	b.n	800b220 <hci_send_req+0x1e4>
          goto failed;
 800b21a:	bf00      	nop
 800b21c:	e000      	b.n	800b220 <hci_send_req+0x1e4>
          goto failed;
 800b21e:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d004      	beq.n	800b230 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	4619      	mov	r1, r3
 800b22a:	480f      	ldr	r0, [pc, #60]	; (800b268 <hci_send_req+0x22c>)
 800b22c:	f000 f8ca 	bl	800b3c4 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800b230:	f107 0308 	add.w	r3, r7, #8
 800b234:	4619      	mov	r1, r3
 800b236:	480b      	ldr	r0, [pc, #44]	; (800b264 <hci_send_req+0x228>)
 800b238:	f7ff fe64 	bl	800af04 <move_list>

  return -1;
 800b23c:	f04f 33ff 	mov.w	r3, #4294967295
 800b240:	e00b      	b.n	800b25a <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	4619      	mov	r1, r3
 800b246:	4808      	ldr	r0, [pc, #32]	; (800b268 <hci_send_req+0x22c>)
 800b248:	f000 f8bc 	bl	800b3c4 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800b24c:	f107 0308 	add.w	r3, r7, #8
 800b250:	4619      	mov	r1, r3
 800b252:	4804      	ldr	r0, [pc, #16]	; (800b264 <hci_send_req+0x228>)
 800b254:	f7ff fe56 	bl	800af04 <move_list>

  return 0;
 800b258:	2300      	movs	r3, #0
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3738      	adds	r7, #56	; 0x38
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	20000918 	.word	0x20000918
 800b268:	20000910 	.word	0x20000910

0800b26c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800b272:	2300      	movs	r3, #0
 800b274:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800b276:	e013      	b.n	800b2a0 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800b278:	1d3b      	adds	r3, r7, #4
 800b27a:	4619      	mov	r1, r3
 800b27c:	480e      	ldr	r0, [pc, #56]	; (800b2b8 <hci_user_evt_proc+0x4c>)
 800b27e:	f000 f90e 	bl	800b49e <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800b282:	4b0e      	ldr	r3, [pc, #56]	; (800b2bc <hci_user_evt_proc+0x50>)
 800b284:	69db      	ldr	r3, [r3, #28]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d005      	beq.n	800b296 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800b28a:	4b0c      	ldr	r3, [pc, #48]	; (800b2bc <hci_user_evt_proc+0x50>)
 800b28c:	69db      	ldr	r3, [r3, #28]
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	3208      	adds	r2, #8
 800b292:	4610      	mov	r0, r2
 800b294:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4619      	mov	r1, r3
 800b29a:	4809      	ldr	r0, [pc, #36]	; (800b2c0 <hci_user_evt_proc+0x54>)
 800b29c:	f000 f8b8 	bl	800b410 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800b2a0:	4805      	ldr	r0, [pc, #20]	; (800b2b8 <hci_user_evt_proc+0x4c>)
 800b2a2:	f000 f86d 	bl	800b380 <list_is_empty>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d0e5      	beq.n	800b278 <hci_user_evt_proc+0xc>
  }
}
 800b2ac:	bf00      	nop
 800b2ae:	bf00      	nop
 800b2b0:	3708      	adds	r7, #8
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	20000918 	.word	0x20000918
 800b2bc:	20000e98 	.word	0x20000e98
 800b2c0:	20000910 	.word	0x20000910

0800b2c4 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b086      	sub	sp, #24
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800b2d4:	481f      	ldr	r0, [pc, #124]	; (800b354 <hci_notify_asynch_evt+0x90>)
 800b2d6:	f000 f853 	bl	800b380 <list_is_empty>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d132      	bne.n	800b346 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800b2e0:	f107 030c 	add.w	r3, r7, #12
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	481b      	ldr	r0, [pc, #108]	; (800b354 <hci_notify_asynch_evt+0x90>)
 800b2e8:	f000 f8d9 	bl	800b49e <list_remove_head>
    
    if (hciContext.io.Receive)
 800b2ec:	4b1a      	ldr	r3, [pc, #104]	; (800b358 <hci_notify_asynch_evt+0x94>)
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d02a      	beq.n	800b34a <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800b2f4:	4b18      	ldr	r3, [pc, #96]	; (800b358 <hci_notify_asynch_evt+0x94>)
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	3208      	adds	r2, #8
 800b2fc:	2180      	movs	r1, #128	; 0x80
 800b2fe:	4610      	mov	r0, r2
 800b300:	4798      	blx	r3
 800b302:	4603      	mov	r3, r0
 800b304:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800b306:	7cfb      	ldrb	r3, [r7, #19]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d016      	beq.n	800b33a <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	7cfa      	ldrb	r2, [r7, #19]
 800b310:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	4618      	mov	r0, r3
 800b318:	f7ff fd94 	bl	800ae44 <verify_packet>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d105      	bne.n	800b32e <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	4619      	mov	r1, r3
 800b326:	480d      	ldr	r0, [pc, #52]	; (800b35c <hci_notify_asynch_evt+0x98>)
 800b328:	f000 f872 	bl	800b410 <list_insert_tail>
 800b32c:	e00d      	b.n	800b34a <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	4619      	mov	r1, r3
 800b332:	4808      	ldr	r0, [pc, #32]	; (800b354 <hci_notify_asynch_evt+0x90>)
 800b334:	f000 f846 	bl	800b3c4 <list_insert_head>
 800b338:	e007      	b.n	800b34a <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	4619      	mov	r1, r3
 800b33e:	4805      	ldr	r0, [pc, #20]	; (800b354 <hci_notify_asynch_evt+0x90>)
 800b340:	f000 f840 	bl	800b3c4 <list_insert_head>
 800b344:	e001      	b.n	800b34a <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800b346:	2301      	movs	r3, #1
 800b348:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800b34a:	697b      	ldr	r3, [r7, #20]
  
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3718      	adds	r7, #24
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	20000910 	.word	0x20000910
 800b358:	20000e98 	.word	0x20000e98
 800b35c:	20000918 	.word	0x20000918

0800b360 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	605a      	str	r2, [r3, #4]
}
 800b374:	bf00      	nop
 800b376:	370c      	adds	r7, #12
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 800b380:	b480      	push	{r7}
 800b382:	b087      	sub	sp, #28
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b388:	f3ef 8310 	mrs	r3, PRIMASK
 800b38c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b38e:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b390:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b392:	b672      	cpsid	i
}
 800b394:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d102      	bne.n	800b3a6 <list_is_empty+0x26>
  {
    return_value = 1;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	75fb      	strb	r3, [r7, #23]
 800b3a4:	e001      	b.n	800b3aa <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	75fb      	strb	r3, [r7, #23]
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	f383 8810 	msr	PRIMASK, r3
}
 800b3b4:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800b3b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	371c      	adds	r7, #28
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b087      	sub	sp, #28
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3ce:	f3ef 8310 	mrs	r3, PRIMASK
 800b3d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b3d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b3d8:	b672      	cpsid	i
}
 800b3da:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	683a      	ldr	r2, [r7, #0]
 800b3ee:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	683a      	ldr	r2, [r7, #0]
 800b3f6:	605a      	str	r2, [r3, #4]
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	f383 8810 	msr	PRIMASK, r3
}
 800b402:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b404:	bf00      	nop
 800b406:	371c      	adds	r7, #28
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr

0800b410 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800b410:	b480      	push	{r7}
 800b412:	b087      	sub	sp, #28
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b41a:	f3ef 8310 	mrs	r3, PRIMASK
 800b41e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b420:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b422:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b424:	b672      	cpsid	i
}
 800b426:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	685a      	ldr	r2, [r3, #4]
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	683a      	ldr	r2, [r7, #0]
 800b43a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	683a      	ldr	r2, [r7, #0]
 800b442:	601a      	str	r2, [r3, #0]
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	f383 8810 	msr	PRIMASK, r3
}
 800b44e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b450:	bf00      	nop
 800b452:	371c      	adds	r7, #28
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <list_remove_node>:

void list_remove_node (tListNode * node)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b087      	sub	sp, #28
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b464:	f3ef 8310 	mrs	r3, PRIMASK
 800b468:	60fb      	str	r3, [r7, #12]
  return(result);
 800b46a:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b46c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b46e:	b672      	cpsid	i
}
 800b470:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	6812      	ldr	r2, [r2, #0]
 800b47a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	6852      	ldr	r2, [r2, #4]
 800b484:	605a      	str	r2, [r3, #4]
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	f383 8810 	msr	PRIMASK, r3
}
 800b490:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b492:	bf00      	nop
 800b494:	371c      	adds	r7, #28
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr

0800b49e <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b086      	sub	sp, #24
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
 800b4a6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4a8:	f3ef 8310 	mrs	r3, PRIMASK
 800b4ac:	60fb      	str	r3, [r7, #12]
  return(result);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b4b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b4b2:	b672      	cpsid	i
}
 800b4b4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f7ff ffca 	bl	800b45c <list_remove_node>
  (*node)->next = NULL;
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	605a      	str	r2, [r3, #4]
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	f383 8810 	msr	PRIMASK, r3
}
 800b4e2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b4e4:	bf00      	nop
 800b4e6:	3718      	adds	r7, #24
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b086      	sub	sp, #24
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4f6:	f3ef 8310 	mrs	r3, PRIMASK
 800b4fa:	60fb      	str	r3, [r7, #12]
  return(result);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b4fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b500:	b672      	cpsid	i
}
 800b502:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	685a      	ldr	r2, [r3, #4]
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	4618      	mov	r0, r3
 800b512:	f7ff ffa3 	bl	800b45c <list_remove_node>
  (*node)->next = NULL;
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	2200      	movs	r2, #0
 800b51c:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2200      	movs	r2, #0
 800b524:	605a      	str	r2, [r3, #4]
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	f383 8810 	msr	PRIMASK, r3
}
 800b530:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800b532:	bf00      	nop
 800b534:	3718      	adds	r7, #24
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 800b53a:	b480      	push	{r7}
 800b53c:	b089      	sub	sp, #36	; 0x24
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
  int size = 0;
 800b542:	2300      	movs	r3, #0
 800b544:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b546:	f3ef 8310 	mrs	r3, PRIMASK
 800b54a:	613b      	str	r3, [r7, #16]
  return(result);
 800b54c:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b54e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b550:	b672      	cpsid	i
}
 800b552:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800b55a:	e005      	b.n	800b568 <list_get_size+0x2e>
  {
    size++;
 800b55c:	69fb      	ldr	r3, [r7, #28]
 800b55e:	3301      	adds	r3, #1
 800b560:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800b562:	69bb      	ldr	r3, [r7, #24]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800b568:	69ba      	ldr	r2, [r7, #24]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d1f5      	bne.n	800b55c <list_get_size+0x22>
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f383 8810 	msr	PRIMASK, r3
}
 800b57a:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 800b57c:	69fb      	ldr	r3, [r7, #28]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3724      	adds	r7, #36	; 0x24
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr
	...

0800b58c <srand>:
 800b58c:	b538      	push	{r3, r4, r5, lr}
 800b58e:	4b10      	ldr	r3, [pc, #64]	; (800b5d0 <srand+0x44>)
 800b590:	681d      	ldr	r5, [r3, #0]
 800b592:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b594:	4604      	mov	r4, r0
 800b596:	b9b3      	cbnz	r3, 800b5c6 <srand+0x3a>
 800b598:	2018      	movs	r0, #24
 800b59a:	f001 fe63 	bl	800d264 <malloc>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	6328      	str	r0, [r5, #48]	; 0x30
 800b5a2:	b920      	cbnz	r0, 800b5ae <srand+0x22>
 800b5a4:	4b0b      	ldr	r3, [pc, #44]	; (800b5d4 <srand+0x48>)
 800b5a6:	480c      	ldr	r0, [pc, #48]	; (800b5d8 <srand+0x4c>)
 800b5a8:	2146      	movs	r1, #70	; 0x46
 800b5aa:	f000 ff77 	bl	800c49c <__assert_func>
 800b5ae:	490b      	ldr	r1, [pc, #44]	; (800b5dc <srand+0x50>)
 800b5b0:	4b0b      	ldr	r3, [pc, #44]	; (800b5e0 <srand+0x54>)
 800b5b2:	e9c0 1300 	strd	r1, r3, [r0]
 800b5b6:	4b0b      	ldr	r3, [pc, #44]	; (800b5e4 <srand+0x58>)
 800b5b8:	6083      	str	r3, [r0, #8]
 800b5ba:	230b      	movs	r3, #11
 800b5bc:	8183      	strh	r3, [r0, #12]
 800b5be:	2100      	movs	r1, #0
 800b5c0:	2001      	movs	r0, #1
 800b5c2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b5c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	611c      	str	r4, [r3, #16]
 800b5cc:	615a      	str	r2, [r3, #20]
 800b5ce:	bd38      	pop	{r3, r4, r5, pc}
 800b5d0:	2000007c 	.word	0x2000007c
 800b5d4:	0800eb78 	.word	0x0800eb78
 800b5d8:	0800eb8f 	.word	0x0800eb8f
 800b5dc:	abcd330e 	.word	0xabcd330e
 800b5e0:	e66d1234 	.word	0xe66d1234
 800b5e4:	0005deec 	.word	0x0005deec

0800b5e8 <rand>:
 800b5e8:	4b16      	ldr	r3, [pc, #88]	; (800b644 <rand+0x5c>)
 800b5ea:	b510      	push	{r4, lr}
 800b5ec:	681c      	ldr	r4, [r3, #0]
 800b5ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b5f0:	b9b3      	cbnz	r3, 800b620 <rand+0x38>
 800b5f2:	2018      	movs	r0, #24
 800b5f4:	f001 fe36 	bl	800d264 <malloc>
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	6320      	str	r0, [r4, #48]	; 0x30
 800b5fc:	b920      	cbnz	r0, 800b608 <rand+0x20>
 800b5fe:	4b12      	ldr	r3, [pc, #72]	; (800b648 <rand+0x60>)
 800b600:	4812      	ldr	r0, [pc, #72]	; (800b64c <rand+0x64>)
 800b602:	2152      	movs	r1, #82	; 0x52
 800b604:	f000 ff4a 	bl	800c49c <__assert_func>
 800b608:	4911      	ldr	r1, [pc, #68]	; (800b650 <rand+0x68>)
 800b60a:	4b12      	ldr	r3, [pc, #72]	; (800b654 <rand+0x6c>)
 800b60c:	e9c0 1300 	strd	r1, r3, [r0]
 800b610:	4b11      	ldr	r3, [pc, #68]	; (800b658 <rand+0x70>)
 800b612:	6083      	str	r3, [r0, #8]
 800b614:	230b      	movs	r3, #11
 800b616:	8183      	strh	r3, [r0, #12]
 800b618:	2100      	movs	r1, #0
 800b61a:	2001      	movs	r0, #1
 800b61c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800b620:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b622:	480e      	ldr	r0, [pc, #56]	; (800b65c <rand+0x74>)
 800b624:	690b      	ldr	r3, [r1, #16]
 800b626:	694c      	ldr	r4, [r1, #20]
 800b628:	4a0d      	ldr	r2, [pc, #52]	; (800b660 <rand+0x78>)
 800b62a:	4358      	muls	r0, r3
 800b62c:	fb02 0004 	mla	r0, r2, r4, r0
 800b630:	fba3 3202 	umull	r3, r2, r3, r2
 800b634:	3301      	adds	r3, #1
 800b636:	eb40 0002 	adc.w	r0, r0, r2
 800b63a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800b63e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b642:	bd10      	pop	{r4, pc}
 800b644:	2000007c 	.word	0x2000007c
 800b648:	0800eb78 	.word	0x0800eb78
 800b64c:	0800eb8f 	.word	0x0800eb8f
 800b650:	abcd330e 	.word	0xabcd330e
 800b654:	e66d1234 	.word	0xe66d1234
 800b658:	0005deec 	.word	0x0005deec
 800b65c:	5851f42d 	.word	0x5851f42d
 800b660:	4c957f2d 	.word	0x4c957f2d

0800b664 <__cvt>:
 800b664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b668:	ec55 4b10 	vmov	r4, r5, d0
 800b66c:	2d00      	cmp	r5, #0
 800b66e:	460e      	mov	r6, r1
 800b670:	4619      	mov	r1, r3
 800b672:	462b      	mov	r3, r5
 800b674:	bfbb      	ittet	lt
 800b676:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b67a:	461d      	movlt	r5, r3
 800b67c:	2300      	movge	r3, #0
 800b67e:	232d      	movlt	r3, #45	; 0x2d
 800b680:	700b      	strb	r3, [r1, #0]
 800b682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b684:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b688:	4691      	mov	r9, r2
 800b68a:	f023 0820 	bic.w	r8, r3, #32
 800b68e:	bfbc      	itt	lt
 800b690:	4622      	movlt	r2, r4
 800b692:	4614      	movlt	r4, r2
 800b694:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b698:	d005      	beq.n	800b6a6 <__cvt+0x42>
 800b69a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b69e:	d100      	bne.n	800b6a2 <__cvt+0x3e>
 800b6a0:	3601      	adds	r6, #1
 800b6a2:	2102      	movs	r1, #2
 800b6a4:	e000      	b.n	800b6a8 <__cvt+0x44>
 800b6a6:	2103      	movs	r1, #3
 800b6a8:	ab03      	add	r3, sp, #12
 800b6aa:	9301      	str	r3, [sp, #4]
 800b6ac:	ab02      	add	r3, sp, #8
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	ec45 4b10 	vmov	d0, r4, r5
 800b6b4:	4653      	mov	r3, sl
 800b6b6:	4632      	mov	r2, r6
 800b6b8:	f000 ff96 	bl	800c5e8 <_dtoa_r>
 800b6bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b6c0:	4607      	mov	r7, r0
 800b6c2:	d102      	bne.n	800b6ca <__cvt+0x66>
 800b6c4:	f019 0f01 	tst.w	r9, #1
 800b6c8:	d022      	beq.n	800b710 <__cvt+0xac>
 800b6ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b6ce:	eb07 0906 	add.w	r9, r7, r6
 800b6d2:	d110      	bne.n	800b6f6 <__cvt+0x92>
 800b6d4:	783b      	ldrb	r3, [r7, #0]
 800b6d6:	2b30      	cmp	r3, #48	; 0x30
 800b6d8:	d10a      	bne.n	800b6f0 <__cvt+0x8c>
 800b6da:	2200      	movs	r2, #0
 800b6dc:	2300      	movs	r3, #0
 800b6de:	4620      	mov	r0, r4
 800b6e0:	4629      	mov	r1, r5
 800b6e2:	f7f5 f9f1 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6e6:	b918      	cbnz	r0, 800b6f0 <__cvt+0x8c>
 800b6e8:	f1c6 0601 	rsb	r6, r6, #1
 800b6ec:	f8ca 6000 	str.w	r6, [sl]
 800b6f0:	f8da 3000 	ldr.w	r3, [sl]
 800b6f4:	4499      	add	r9, r3
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	4629      	mov	r1, r5
 800b6fe:	f7f5 f9e3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b702:	b108      	cbz	r0, 800b708 <__cvt+0xa4>
 800b704:	f8cd 900c 	str.w	r9, [sp, #12]
 800b708:	2230      	movs	r2, #48	; 0x30
 800b70a:	9b03      	ldr	r3, [sp, #12]
 800b70c:	454b      	cmp	r3, r9
 800b70e:	d307      	bcc.n	800b720 <__cvt+0xbc>
 800b710:	9b03      	ldr	r3, [sp, #12]
 800b712:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b714:	1bdb      	subs	r3, r3, r7
 800b716:	4638      	mov	r0, r7
 800b718:	6013      	str	r3, [r2, #0]
 800b71a:	b004      	add	sp, #16
 800b71c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b720:	1c59      	adds	r1, r3, #1
 800b722:	9103      	str	r1, [sp, #12]
 800b724:	701a      	strb	r2, [r3, #0]
 800b726:	e7f0      	b.n	800b70a <__cvt+0xa6>

0800b728 <__exponent>:
 800b728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b72a:	4603      	mov	r3, r0
 800b72c:	2900      	cmp	r1, #0
 800b72e:	bfb8      	it	lt
 800b730:	4249      	neglt	r1, r1
 800b732:	f803 2b02 	strb.w	r2, [r3], #2
 800b736:	bfb4      	ite	lt
 800b738:	222d      	movlt	r2, #45	; 0x2d
 800b73a:	222b      	movge	r2, #43	; 0x2b
 800b73c:	2909      	cmp	r1, #9
 800b73e:	7042      	strb	r2, [r0, #1]
 800b740:	dd2a      	ble.n	800b798 <__exponent+0x70>
 800b742:	f10d 0207 	add.w	r2, sp, #7
 800b746:	4617      	mov	r7, r2
 800b748:	260a      	movs	r6, #10
 800b74a:	4694      	mov	ip, r2
 800b74c:	fb91 f5f6 	sdiv	r5, r1, r6
 800b750:	fb06 1415 	mls	r4, r6, r5, r1
 800b754:	3430      	adds	r4, #48	; 0x30
 800b756:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b75a:	460c      	mov	r4, r1
 800b75c:	2c63      	cmp	r4, #99	; 0x63
 800b75e:	f102 32ff 	add.w	r2, r2, #4294967295
 800b762:	4629      	mov	r1, r5
 800b764:	dcf1      	bgt.n	800b74a <__exponent+0x22>
 800b766:	3130      	adds	r1, #48	; 0x30
 800b768:	f1ac 0402 	sub.w	r4, ip, #2
 800b76c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b770:	1c41      	adds	r1, r0, #1
 800b772:	4622      	mov	r2, r4
 800b774:	42ba      	cmp	r2, r7
 800b776:	d30a      	bcc.n	800b78e <__exponent+0x66>
 800b778:	f10d 0209 	add.w	r2, sp, #9
 800b77c:	eba2 020c 	sub.w	r2, r2, ip
 800b780:	42bc      	cmp	r4, r7
 800b782:	bf88      	it	hi
 800b784:	2200      	movhi	r2, #0
 800b786:	4413      	add	r3, r2
 800b788:	1a18      	subs	r0, r3, r0
 800b78a:	b003      	add	sp, #12
 800b78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b78e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b792:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b796:	e7ed      	b.n	800b774 <__exponent+0x4c>
 800b798:	2330      	movs	r3, #48	; 0x30
 800b79a:	3130      	adds	r1, #48	; 0x30
 800b79c:	7083      	strb	r3, [r0, #2]
 800b79e:	70c1      	strb	r1, [r0, #3]
 800b7a0:	1d03      	adds	r3, r0, #4
 800b7a2:	e7f1      	b.n	800b788 <__exponent+0x60>

0800b7a4 <_printf_float>:
 800b7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a8:	ed2d 8b02 	vpush	{d8}
 800b7ac:	b08d      	sub	sp, #52	; 0x34
 800b7ae:	460c      	mov	r4, r1
 800b7b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b7b4:	4616      	mov	r6, r2
 800b7b6:	461f      	mov	r7, r3
 800b7b8:	4605      	mov	r5, r0
 800b7ba:	f000 fde9 	bl	800c390 <_localeconv_r>
 800b7be:	f8d0 a000 	ldr.w	sl, [r0]
 800b7c2:	4650      	mov	r0, sl
 800b7c4:	f7f4 fd54 	bl	8000270 <strlen>
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	930a      	str	r3, [sp, #40]	; 0x28
 800b7cc:	6823      	ldr	r3, [r4, #0]
 800b7ce:	9305      	str	r3, [sp, #20]
 800b7d0:	f8d8 3000 	ldr.w	r3, [r8]
 800b7d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b7d8:	3307      	adds	r3, #7
 800b7da:	f023 0307 	bic.w	r3, r3, #7
 800b7de:	f103 0208 	add.w	r2, r3, #8
 800b7e2:	f8c8 2000 	str.w	r2, [r8]
 800b7e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b7ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b7ee:	9307      	str	r3, [sp, #28]
 800b7f0:	f8cd 8018 	str.w	r8, [sp, #24]
 800b7f4:	ee08 0a10 	vmov	s16, r0
 800b7f8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b7fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b800:	4b9e      	ldr	r3, [pc, #632]	; (800ba7c <_printf_float+0x2d8>)
 800b802:	f04f 32ff 	mov.w	r2, #4294967295
 800b806:	f7f5 f991 	bl	8000b2c <__aeabi_dcmpun>
 800b80a:	bb88      	cbnz	r0, 800b870 <_printf_float+0xcc>
 800b80c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b810:	4b9a      	ldr	r3, [pc, #616]	; (800ba7c <_printf_float+0x2d8>)
 800b812:	f04f 32ff 	mov.w	r2, #4294967295
 800b816:	f7f5 f96b 	bl	8000af0 <__aeabi_dcmple>
 800b81a:	bb48      	cbnz	r0, 800b870 <_printf_float+0xcc>
 800b81c:	2200      	movs	r2, #0
 800b81e:	2300      	movs	r3, #0
 800b820:	4640      	mov	r0, r8
 800b822:	4649      	mov	r1, r9
 800b824:	f7f5 f95a 	bl	8000adc <__aeabi_dcmplt>
 800b828:	b110      	cbz	r0, 800b830 <_printf_float+0x8c>
 800b82a:	232d      	movs	r3, #45	; 0x2d
 800b82c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b830:	4a93      	ldr	r2, [pc, #588]	; (800ba80 <_printf_float+0x2dc>)
 800b832:	4b94      	ldr	r3, [pc, #592]	; (800ba84 <_printf_float+0x2e0>)
 800b834:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b838:	bf94      	ite	ls
 800b83a:	4690      	movls	r8, r2
 800b83c:	4698      	movhi	r8, r3
 800b83e:	2303      	movs	r3, #3
 800b840:	6123      	str	r3, [r4, #16]
 800b842:	9b05      	ldr	r3, [sp, #20]
 800b844:	f023 0304 	bic.w	r3, r3, #4
 800b848:	6023      	str	r3, [r4, #0]
 800b84a:	f04f 0900 	mov.w	r9, #0
 800b84e:	9700      	str	r7, [sp, #0]
 800b850:	4633      	mov	r3, r6
 800b852:	aa0b      	add	r2, sp, #44	; 0x2c
 800b854:	4621      	mov	r1, r4
 800b856:	4628      	mov	r0, r5
 800b858:	f000 f9da 	bl	800bc10 <_printf_common>
 800b85c:	3001      	adds	r0, #1
 800b85e:	f040 8090 	bne.w	800b982 <_printf_float+0x1de>
 800b862:	f04f 30ff 	mov.w	r0, #4294967295
 800b866:	b00d      	add	sp, #52	; 0x34
 800b868:	ecbd 8b02 	vpop	{d8}
 800b86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b870:	4642      	mov	r2, r8
 800b872:	464b      	mov	r3, r9
 800b874:	4640      	mov	r0, r8
 800b876:	4649      	mov	r1, r9
 800b878:	f7f5 f958 	bl	8000b2c <__aeabi_dcmpun>
 800b87c:	b140      	cbz	r0, 800b890 <_printf_float+0xec>
 800b87e:	464b      	mov	r3, r9
 800b880:	2b00      	cmp	r3, #0
 800b882:	bfbc      	itt	lt
 800b884:	232d      	movlt	r3, #45	; 0x2d
 800b886:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b88a:	4a7f      	ldr	r2, [pc, #508]	; (800ba88 <_printf_float+0x2e4>)
 800b88c:	4b7f      	ldr	r3, [pc, #508]	; (800ba8c <_printf_float+0x2e8>)
 800b88e:	e7d1      	b.n	800b834 <_printf_float+0x90>
 800b890:	6863      	ldr	r3, [r4, #4]
 800b892:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b896:	9206      	str	r2, [sp, #24]
 800b898:	1c5a      	adds	r2, r3, #1
 800b89a:	d13f      	bne.n	800b91c <_printf_float+0x178>
 800b89c:	2306      	movs	r3, #6
 800b89e:	6063      	str	r3, [r4, #4]
 800b8a0:	9b05      	ldr	r3, [sp, #20]
 800b8a2:	6861      	ldr	r1, [r4, #4]
 800b8a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	9303      	str	r3, [sp, #12]
 800b8ac:	ab0a      	add	r3, sp, #40	; 0x28
 800b8ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b8b2:	ab09      	add	r3, sp, #36	; 0x24
 800b8b4:	ec49 8b10 	vmov	d0, r8, r9
 800b8b8:	9300      	str	r3, [sp, #0]
 800b8ba:	6022      	str	r2, [r4, #0]
 800b8bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	f7ff fecf 	bl	800b664 <__cvt>
 800b8c6:	9b06      	ldr	r3, [sp, #24]
 800b8c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8ca:	2b47      	cmp	r3, #71	; 0x47
 800b8cc:	4680      	mov	r8, r0
 800b8ce:	d108      	bne.n	800b8e2 <_printf_float+0x13e>
 800b8d0:	1cc8      	adds	r0, r1, #3
 800b8d2:	db02      	blt.n	800b8da <_printf_float+0x136>
 800b8d4:	6863      	ldr	r3, [r4, #4]
 800b8d6:	4299      	cmp	r1, r3
 800b8d8:	dd41      	ble.n	800b95e <_printf_float+0x1ba>
 800b8da:	f1ab 0302 	sub.w	r3, fp, #2
 800b8de:	fa5f fb83 	uxtb.w	fp, r3
 800b8e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b8e6:	d820      	bhi.n	800b92a <_printf_float+0x186>
 800b8e8:	3901      	subs	r1, #1
 800b8ea:	465a      	mov	r2, fp
 800b8ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b8f0:	9109      	str	r1, [sp, #36]	; 0x24
 800b8f2:	f7ff ff19 	bl	800b728 <__exponent>
 800b8f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8f8:	1813      	adds	r3, r2, r0
 800b8fa:	2a01      	cmp	r2, #1
 800b8fc:	4681      	mov	r9, r0
 800b8fe:	6123      	str	r3, [r4, #16]
 800b900:	dc02      	bgt.n	800b908 <_printf_float+0x164>
 800b902:	6822      	ldr	r2, [r4, #0]
 800b904:	07d2      	lsls	r2, r2, #31
 800b906:	d501      	bpl.n	800b90c <_printf_float+0x168>
 800b908:	3301      	adds	r3, #1
 800b90a:	6123      	str	r3, [r4, #16]
 800b90c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b910:	2b00      	cmp	r3, #0
 800b912:	d09c      	beq.n	800b84e <_printf_float+0xaa>
 800b914:	232d      	movs	r3, #45	; 0x2d
 800b916:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b91a:	e798      	b.n	800b84e <_printf_float+0xaa>
 800b91c:	9a06      	ldr	r2, [sp, #24]
 800b91e:	2a47      	cmp	r2, #71	; 0x47
 800b920:	d1be      	bne.n	800b8a0 <_printf_float+0xfc>
 800b922:	2b00      	cmp	r3, #0
 800b924:	d1bc      	bne.n	800b8a0 <_printf_float+0xfc>
 800b926:	2301      	movs	r3, #1
 800b928:	e7b9      	b.n	800b89e <_printf_float+0xfa>
 800b92a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b92e:	d118      	bne.n	800b962 <_printf_float+0x1be>
 800b930:	2900      	cmp	r1, #0
 800b932:	6863      	ldr	r3, [r4, #4]
 800b934:	dd0b      	ble.n	800b94e <_printf_float+0x1aa>
 800b936:	6121      	str	r1, [r4, #16]
 800b938:	b913      	cbnz	r3, 800b940 <_printf_float+0x19c>
 800b93a:	6822      	ldr	r2, [r4, #0]
 800b93c:	07d0      	lsls	r0, r2, #31
 800b93e:	d502      	bpl.n	800b946 <_printf_float+0x1a2>
 800b940:	3301      	adds	r3, #1
 800b942:	440b      	add	r3, r1
 800b944:	6123      	str	r3, [r4, #16]
 800b946:	65a1      	str	r1, [r4, #88]	; 0x58
 800b948:	f04f 0900 	mov.w	r9, #0
 800b94c:	e7de      	b.n	800b90c <_printf_float+0x168>
 800b94e:	b913      	cbnz	r3, 800b956 <_printf_float+0x1b2>
 800b950:	6822      	ldr	r2, [r4, #0]
 800b952:	07d2      	lsls	r2, r2, #31
 800b954:	d501      	bpl.n	800b95a <_printf_float+0x1b6>
 800b956:	3302      	adds	r3, #2
 800b958:	e7f4      	b.n	800b944 <_printf_float+0x1a0>
 800b95a:	2301      	movs	r3, #1
 800b95c:	e7f2      	b.n	800b944 <_printf_float+0x1a0>
 800b95e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b964:	4299      	cmp	r1, r3
 800b966:	db05      	blt.n	800b974 <_printf_float+0x1d0>
 800b968:	6823      	ldr	r3, [r4, #0]
 800b96a:	6121      	str	r1, [r4, #16]
 800b96c:	07d8      	lsls	r0, r3, #31
 800b96e:	d5ea      	bpl.n	800b946 <_printf_float+0x1a2>
 800b970:	1c4b      	adds	r3, r1, #1
 800b972:	e7e7      	b.n	800b944 <_printf_float+0x1a0>
 800b974:	2900      	cmp	r1, #0
 800b976:	bfd4      	ite	le
 800b978:	f1c1 0202 	rsble	r2, r1, #2
 800b97c:	2201      	movgt	r2, #1
 800b97e:	4413      	add	r3, r2
 800b980:	e7e0      	b.n	800b944 <_printf_float+0x1a0>
 800b982:	6823      	ldr	r3, [r4, #0]
 800b984:	055a      	lsls	r2, r3, #21
 800b986:	d407      	bmi.n	800b998 <_printf_float+0x1f4>
 800b988:	6923      	ldr	r3, [r4, #16]
 800b98a:	4642      	mov	r2, r8
 800b98c:	4631      	mov	r1, r6
 800b98e:	4628      	mov	r0, r5
 800b990:	47b8      	blx	r7
 800b992:	3001      	adds	r0, #1
 800b994:	d12c      	bne.n	800b9f0 <_printf_float+0x24c>
 800b996:	e764      	b.n	800b862 <_printf_float+0xbe>
 800b998:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b99c:	f240 80e0 	bls.w	800bb60 <_printf_float+0x3bc>
 800b9a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	f7f5 f88e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	d034      	beq.n	800ba1a <_printf_float+0x276>
 800b9b0:	4a37      	ldr	r2, [pc, #220]	; (800ba90 <_printf_float+0x2ec>)
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	4631      	mov	r1, r6
 800b9b6:	4628      	mov	r0, r5
 800b9b8:	47b8      	blx	r7
 800b9ba:	3001      	adds	r0, #1
 800b9bc:	f43f af51 	beq.w	800b862 <_printf_float+0xbe>
 800b9c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	db02      	blt.n	800b9ce <_printf_float+0x22a>
 800b9c8:	6823      	ldr	r3, [r4, #0]
 800b9ca:	07d8      	lsls	r0, r3, #31
 800b9cc:	d510      	bpl.n	800b9f0 <_printf_float+0x24c>
 800b9ce:	ee18 3a10 	vmov	r3, s16
 800b9d2:	4652      	mov	r2, sl
 800b9d4:	4631      	mov	r1, r6
 800b9d6:	4628      	mov	r0, r5
 800b9d8:	47b8      	blx	r7
 800b9da:	3001      	adds	r0, #1
 800b9dc:	f43f af41 	beq.w	800b862 <_printf_float+0xbe>
 800b9e0:	f04f 0800 	mov.w	r8, #0
 800b9e4:	f104 091a 	add.w	r9, r4, #26
 800b9e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9ea:	3b01      	subs	r3, #1
 800b9ec:	4543      	cmp	r3, r8
 800b9ee:	dc09      	bgt.n	800ba04 <_printf_float+0x260>
 800b9f0:	6823      	ldr	r3, [r4, #0]
 800b9f2:	079b      	lsls	r3, r3, #30
 800b9f4:	f100 8107 	bmi.w	800bc06 <_printf_float+0x462>
 800b9f8:	68e0      	ldr	r0, [r4, #12]
 800b9fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9fc:	4298      	cmp	r0, r3
 800b9fe:	bfb8      	it	lt
 800ba00:	4618      	movlt	r0, r3
 800ba02:	e730      	b.n	800b866 <_printf_float+0xc2>
 800ba04:	2301      	movs	r3, #1
 800ba06:	464a      	mov	r2, r9
 800ba08:	4631      	mov	r1, r6
 800ba0a:	4628      	mov	r0, r5
 800ba0c:	47b8      	blx	r7
 800ba0e:	3001      	adds	r0, #1
 800ba10:	f43f af27 	beq.w	800b862 <_printf_float+0xbe>
 800ba14:	f108 0801 	add.w	r8, r8, #1
 800ba18:	e7e6      	b.n	800b9e8 <_printf_float+0x244>
 800ba1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	dc39      	bgt.n	800ba94 <_printf_float+0x2f0>
 800ba20:	4a1b      	ldr	r2, [pc, #108]	; (800ba90 <_printf_float+0x2ec>)
 800ba22:	2301      	movs	r3, #1
 800ba24:	4631      	mov	r1, r6
 800ba26:	4628      	mov	r0, r5
 800ba28:	47b8      	blx	r7
 800ba2a:	3001      	adds	r0, #1
 800ba2c:	f43f af19 	beq.w	800b862 <_printf_float+0xbe>
 800ba30:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ba34:	4313      	orrs	r3, r2
 800ba36:	d102      	bne.n	800ba3e <_printf_float+0x29a>
 800ba38:	6823      	ldr	r3, [r4, #0]
 800ba3a:	07d9      	lsls	r1, r3, #31
 800ba3c:	d5d8      	bpl.n	800b9f0 <_printf_float+0x24c>
 800ba3e:	ee18 3a10 	vmov	r3, s16
 800ba42:	4652      	mov	r2, sl
 800ba44:	4631      	mov	r1, r6
 800ba46:	4628      	mov	r0, r5
 800ba48:	47b8      	blx	r7
 800ba4a:	3001      	adds	r0, #1
 800ba4c:	f43f af09 	beq.w	800b862 <_printf_float+0xbe>
 800ba50:	f04f 0900 	mov.w	r9, #0
 800ba54:	f104 0a1a 	add.w	sl, r4, #26
 800ba58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba5a:	425b      	negs	r3, r3
 800ba5c:	454b      	cmp	r3, r9
 800ba5e:	dc01      	bgt.n	800ba64 <_printf_float+0x2c0>
 800ba60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba62:	e792      	b.n	800b98a <_printf_float+0x1e6>
 800ba64:	2301      	movs	r3, #1
 800ba66:	4652      	mov	r2, sl
 800ba68:	4631      	mov	r1, r6
 800ba6a:	4628      	mov	r0, r5
 800ba6c:	47b8      	blx	r7
 800ba6e:	3001      	adds	r0, #1
 800ba70:	f43f aef7 	beq.w	800b862 <_printf_float+0xbe>
 800ba74:	f109 0901 	add.w	r9, r9, #1
 800ba78:	e7ee      	b.n	800ba58 <_printf_float+0x2b4>
 800ba7a:	bf00      	nop
 800ba7c:	7fefffff 	.word	0x7fefffff
 800ba80:	0800ebe7 	.word	0x0800ebe7
 800ba84:	0800ebeb 	.word	0x0800ebeb
 800ba88:	0800ebef 	.word	0x0800ebef
 800ba8c:	0800ebf3 	.word	0x0800ebf3
 800ba90:	0800ebf7 	.word	0x0800ebf7
 800ba94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	bfa8      	it	ge
 800ba9c:	461a      	movge	r2, r3
 800ba9e:	2a00      	cmp	r2, #0
 800baa0:	4691      	mov	r9, r2
 800baa2:	dc37      	bgt.n	800bb14 <_printf_float+0x370>
 800baa4:	f04f 0b00 	mov.w	fp, #0
 800baa8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800baac:	f104 021a 	add.w	r2, r4, #26
 800bab0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bab2:	9305      	str	r3, [sp, #20]
 800bab4:	eba3 0309 	sub.w	r3, r3, r9
 800bab8:	455b      	cmp	r3, fp
 800baba:	dc33      	bgt.n	800bb24 <_printf_float+0x380>
 800babc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bac0:	429a      	cmp	r2, r3
 800bac2:	db3b      	blt.n	800bb3c <_printf_float+0x398>
 800bac4:	6823      	ldr	r3, [r4, #0]
 800bac6:	07da      	lsls	r2, r3, #31
 800bac8:	d438      	bmi.n	800bb3c <_printf_float+0x398>
 800baca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bace:	eba2 0903 	sub.w	r9, r2, r3
 800bad2:	9b05      	ldr	r3, [sp, #20]
 800bad4:	1ad2      	subs	r2, r2, r3
 800bad6:	4591      	cmp	r9, r2
 800bad8:	bfa8      	it	ge
 800bada:	4691      	movge	r9, r2
 800badc:	f1b9 0f00 	cmp.w	r9, #0
 800bae0:	dc35      	bgt.n	800bb4e <_printf_float+0x3aa>
 800bae2:	f04f 0800 	mov.w	r8, #0
 800bae6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800baea:	f104 0a1a 	add.w	sl, r4, #26
 800baee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800baf2:	1a9b      	subs	r3, r3, r2
 800baf4:	eba3 0309 	sub.w	r3, r3, r9
 800baf8:	4543      	cmp	r3, r8
 800bafa:	f77f af79 	ble.w	800b9f0 <_printf_float+0x24c>
 800bafe:	2301      	movs	r3, #1
 800bb00:	4652      	mov	r2, sl
 800bb02:	4631      	mov	r1, r6
 800bb04:	4628      	mov	r0, r5
 800bb06:	47b8      	blx	r7
 800bb08:	3001      	adds	r0, #1
 800bb0a:	f43f aeaa 	beq.w	800b862 <_printf_float+0xbe>
 800bb0e:	f108 0801 	add.w	r8, r8, #1
 800bb12:	e7ec      	b.n	800baee <_printf_float+0x34a>
 800bb14:	4613      	mov	r3, r2
 800bb16:	4631      	mov	r1, r6
 800bb18:	4642      	mov	r2, r8
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	47b8      	blx	r7
 800bb1e:	3001      	adds	r0, #1
 800bb20:	d1c0      	bne.n	800baa4 <_printf_float+0x300>
 800bb22:	e69e      	b.n	800b862 <_printf_float+0xbe>
 800bb24:	2301      	movs	r3, #1
 800bb26:	4631      	mov	r1, r6
 800bb28:	4628      	mov	r0, r5
 800bb2a:	9205      	str	r2, [sp, #20]
 800bb2c:	47b8      	blx	r7
 800bb2e:	3001      	adds	r0, #1
 800bb30:	f43f ae97 	beq.w	800b862 <_printf_float+0xbe>
 800bb34:	9a05      	ldr	r2, [sp, #20]
 800bb36:	f10b 0b01 	add.w	fp, fp, #1
 800bb3a:	e7b9      	b.n	800bab0 <_printf_float+0x30c>
 800bb3c:	ee18 3a10 	vmov	r3, s16
 800bb40:	4652      	mov	r2, sl
 800bb42:	4631      	mov	r1, r6
 800bb44:	4628      	mov	r0, r5
 800bb46:	47b8      	blx	r7
 800bb48:	3001      	adds	r0, #1
 800bb4a:	d1be      	bne.n	800baca <_printf_float+0x326>
 800bb4c:	e689      	b.n	800b862 <_printf_float+0xbe>
 800bb4e:	9a05      	ldr	r2, [sp, #20]
 800bb50:	464b      	mov	r3, r9
 800bb52:	4442      	add	r2, r8
 800bb54:	4631      	mov	r1, r6
 800bb56:	4628      	mov	r0, r5
 800bb58:	47b8      	blx	r7
 800bb5a:	3001      	adds	r0, #1
 800bb5c:	d1c1      	bne.n	800bae2 <_printf_float+0x33e>
 800bb5e:	e680      	b.n	800b862 <_printf_float+0xbe>
 800bb60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb62:	2a01      	cmp	r2, #1
 800bb64:	dc01      	bgt.n	800bb6a <_printf_float+0x3c6>
 800bb66:	07db      	lsls	r3, r3, #31
 800bb68:	d53a      	bpl.n	800bbe0 <_printf_float+0x43c>
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	4642      	mov	r2, r8
 800bb6e:	4631      	mov	r1, r6
 800bb70:	4628      	mov	r0, r5
 800bb72:	47b8      	blx	r7
 800bb74:	3001      	adds	r0, #1
 800bb76:	f43f ae74 	beq.w	800b862 <_printf_float+0xbe>
 800bb7a:	ee18 3a10 	vmov	r3, s16
 800bb7e:	4652      	mov	r2, sl
 800bb80:	4631      	mov	r1, r6
 800bb82:	4628      	mov	r0, r5
 800bb84:	47b8      	blx	r7
 800bb86:	3001      	adds	r0, #1
 800bb88:	f43f ae6b 	beq.w	800b862 <_printf_float+0xbe>
 800bb8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bb90:	2200      	movs	r2, #0
 800bb92:	2300      	movs	r3, #0
 800bb94:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800bb98:	f7f4 ff96 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb9c:	b9d8      	cbnz	r0, 800bbd6 <_printf_float+0x432>
 800bb9e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bba2:	f108 0201 	add.w	r2, r8, #1
 800bba6:	4631      	mov	r1, r6
 800bba8:	4628      	mov	r0, r5
 800bbaa:	47b8      	blx	r7
 800bbac:	3001      	adds	r0, #1
 800bbae:	d10e      	bne.n	800bbce <_printf_float+0x42a>
 800bbb0:	e657      	b.n	800b862 <_printf_float+0xbe>
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	4652      	mov	r2, sl
 800bbb6:	4631      	mov	r1, r6
 800bbb8:	4628      	mov	r0, r5
 800bbba:	47b8      	blx	r7
 800bbbc:	3001      	adds	r0, #1
 800bbbe:	f43f ae50 	beq.w	800b862 <_printf_float+0xbe>
 800bbc2:	f108 0801 	add.w	r8, r8, #1
 800bbc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbc8:	3b01      	subs	r3, #1
 800bbca:	4543      	cmp	r3, r8
 800bbcc:	dcf1      	bgt.n	800bbb2 <_printf_float+0x40e>
 800bbce:	464b      	mov	r3, r9
 800bbd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bbd4:	e6da      	b.n	800b98c <_printf_float+0x1e8>
 800bbd6:	f04f 0800 	mov.w	r8, #0
 800bbda:	f104 0a1a 	add.w	sl, r4, #26
 800bbde:	e7f2      	b.n	800bbc6 <_printf_float+0x422>
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	4642      	mov	r2, r8
 800bbe4:	e7df      	b.n	800bba6 <_printf_float+0x402>
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	464a      	mov	r2, r9
 800bbea:	4631      	mov	r1, r6
 800bbec:	4628      	mov	r0, r5
 800bbee:	47b8      	blx	r7
 800bbf0:	3001      	adds	r0, #1
 800bbf2:	f43f ae36 	beq.w	800b862 <_printf_float+0xbe>
 800bbf6:	f108 0801 	add.w	r8, r8, #1
 800bbfa:	68e3      	ldr	r3, [r4, #12]
 800bbfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bbfe:	1a5b      	subs	r3, r3, r1
 800bc00:	4543      	cmp	r3, r8
 800bc02:	dcf0      	bgt.n	800bbe6 <_printf_float+0x442>
 800bc04:	e6f8      	b.n	800b9f8 <_printf_float+0x254>
 800bc06:	f04f 0800 	mov.w	r8, #0
 800bc0a:	f104 0919 	add.w	r9, r4, #25
 800bc0e:	e7f4      	b.n	800bbfa <_printf_float+0x456>

0800bc10 <_printf_common>:
 800bc10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc14:	4616      	mov	r6, r2
 800bc16:	4699      	mov	r9, r3
 800bc18:	688a      	ldr	r2, [r1, #8]
 800bc1a:	690b      	ldr	r3, [r1, #16]
 800bc1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc20:	4293      	cmp	r3, r2
 800bc22:	bfb8      	it	lt
 800bc24:	4613      	movlt	r3, r2
 800bc26:	6033      	str	r3, [r6, #0]
 800bc28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc2c:	4607      	mov	r7, r0
 800bc2e:	460c      	mov	r4, r1
 800bc30:	b10a      	cbz	r2, 800bc36 <_printf_common+0x26>
 800bc32:	3301      	adds	r3, #1
 800bc34:	6033      	str	r3, [r6, #0]
 800bc36:	6823      	ldr	r3, [r4, #0]
 800bc38:	0699      	lsls	r1, r3, #26
 800bc3a:	bf42      	ittt	mi
 800bc3c:	6833      	ldrmi	r3, [r6, #0]
 800bc3e:	3302      	addmi	r3, #2
 800bc40:	6033      	strmi	r3, [r6, #0]
 800bc42:	6825      	ldr	r5, [r4, #0]
 800bc44:	f015 0506 	ands.w	r5, r5, #6
 800bc48:	d106      	bne.n	800bc58 <_printf_common+0x48>
 800bc4a:	f104 0a19 	add.w	sl, r4, #25
 800bc4e:	68e3      	ldr	r3, [r4, #12]
 800bc50:	6832      	ldr	r2, [r6, #0]
 800bc52:	1a9b      	subs	r3, r3, r2
 800bc54:	42ab      	cmp	r3, r5
 800bc56:	dc26      	bgt.n	800bca6 <_printf_common+0x96>
 800bc58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc5c:	1e13      	subs	r3, r2, #0
 800bc5e:	6822      	ldr	r2, [r4, #0]
 800bc60:	bf18      	it	ne
 800bc62:	2301      	movne	r3, #1
 800bc64:	0692      	lsls	r2, r2, #26
 800bc66:	d42b      	bmi.n	800bcc0 <_printf_common+0xb0>
 800bc68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc6c:	4649      	mov	r1, r9
 800bc6e:	4638      	mov	r0, r7
 800bc70:	47c0      	blx	r8
 800bc72:	3001      	adds	r0, #1
 800bc74:	d01e      	beq.n	800bcb4 <_printf_common+0xa4>
 800bc76:	6823      	ldr	r3, [r4, #0]
 800bc78:	6922      	ldr	r2, [r4, #16]
 800bc7a:	f003 0306 	and.w	r3, r3, #6
 800bc7e:	2b04      	cmp	r3, #4
 800bc80:	bf02      	ittt	eq
 800bc82:	68e5      	ldreq	r5, [r4, #12]
 800bc84:	6833      	ldreq	r3, [r6, #0]
 800bc86:	1aed      	subeq	r5, r5, r3
 800bc88:	68a3      	ldr	r3, [r4, #8]
 800bc8a:	bf0c      	ite	eq
 800bc8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc90:	2500      	movne	r5, #0
 800bc92:	4293      	cmp	r3, r2
 800bc94:	bfc4      	itt	gt
 800bc96:	1a9b      	subgt	r3, r3, r2
 800bc98:	18ed      	addgt	r5, r5, r3
 800bc9a:	2600      	movs	r6, #0
 800bc9c:	341a      	adds	r4, #26
 800bc9e:	42b5      	cmp	r5, r6
 800bca0:	d11a      	bne.n	800bcd8 <_printf_common+0xc8>
 800bca2:	2000      	movs	r0, #0
 800bca4:	e008      	b.n	800bcb8 <_printf_common+0xa8>
 800bca6:	2301      	movs	r3, #1
 800bca8:	4652      	mov	r2, sl
 800bcaa:	4649      	mov	r1, r9
 800bcac:	4638      	mov	r0, r7
 800bcae:	47c0      	blx	r8
 800bcb0:	3001      	adds	r0, #1
 800bcb2:	d103      	bne.n	800bcbc <_printf_common+0xac>
 800bcb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcbc:	3501      	adds	r5, #1
 800bcbe:	e7c6      	b.n	800bc4e <_printf_common+0x3e>
 800bcc0:	18e1      	adds	r1, r4, r3
 800bcc2:	1c5a      	adds	r2, r3, #1
 800bcc4:	2030      	movs	r0, #48	; 0x30
 800bcc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bcca:	4422      	add	r2, r4
 800bccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bcd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bcd4:	3302      	adds	r3, #2
 800bcd6:	e7c7      	b.n	800bc68 <_printf_common+0x58>
 800bcd8:	2301      	movs	r3, #1
 800bcda:	4622      	mov	r2, r4
 800bcdc:	4649      	mov	r1, r9
 800bcde:	4638      	mov	r0, r7
 800bce0:	47c0      	blx	r8
 800bce2:	3001      	adds	r0, #1
 800bce4:	d0e6      	beq.n	800bcb4 <_printf_common+0xa4>
 800bce6:	3601      	adds	r6, #1
 800bce8:	e7d9      	b.n	800bc9e <_printf_common+0x8e>
	...

0800bcec <_printf_i>:
 800bcec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcf0:	7e0f      	ldrb	r7, [r1, #24]
 800bcf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bcf4:	2f78      	cmp	r7, #120	; 0x78
 800bcf6:	4691      	mov	r9, r2
 800bcf8:	4680      	mov	r8, r0
 800bcfa:	460c      	mov	r4, r1
 800bcfc:	469a      	mov	sl, r3
 800bcfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bd02:	d807      	bhi.n	800bd14 <_printf_i+0x28>
 800bd04:	2f62      	cmp	r7, #98	; 0x62
 800bd06:	d80a      	bhi.n	800bd1e <_printf_i+0x32>
 800bd08:	2f00      	cmp	r7, #0
 800bd0a:	f000 80d4 	beq.w	800beb6 <_printf_i+0x1ca>
 800bd0e:	2f58      	cmp	r7, #88	; 0x58
 800bd10:	f000 80c0 	beq.w	800be94 <_printf_i+0x1a8>
 800bd14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd1c:	e03a      	b.n	800bd94 <_printf_i+0xa8>
 800bd1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd22:	2b15      	cmp	r3, #21
 800bd24:	d8f6      	bhi.n	800bd14 <_printf_i+0x28>
 800bd26:	a101      	add	r1, pc, #4	; (adr r1, 800bd2c <_printf_i+0x40>)
 800bd28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd2c:	0800bd85 	.word	0x0800bd85
 800bd30:	0800bd99 	.word	0x0800bd99
 800bd34:	0800bd15 	.word	0x0800bd15
 800bd38:	0800bd15 	.word	0x0800bd15
 800bd3c:	0800bd15 	.word	0x0800bd15
 800bd40:	0800bd15 	.word	0x0800bd15
 800bd44:	0800bd99 	.word	0x0800bd99
 800bd48:	0800bd15 	.word	0x0800bd15
 800bd4c:	0800bd15 	.word	0x0800bd15
 800bd50:	0800bd15 	.word	0x0800bd15
 800bd54:	0800bd15 	.word	0x0800bd15
 800bd58:	0800be9d 	.word	0x0800be9d
 800bd5c:	0800bdc5 	.word	0x0800bdc5
 800bd60:	0800be57 	.word	0x0800be57
 800bd64:	0800bd15 	.word	0x0800bd15
 800bd68:	0800bd15 	.word	0x0800bd15
 800bd6c:	0800bebf 	.word	0x0800bebf
 800bd70:	0800bd15 	.word	0x0800bd15
 800bd74:	0800bdc5 	.word	0x0800bdc5
 800bd78:	0800bd15 	.word	0x0800bd15
 800bd7c:	0800bd15 	.word	0x0800bd15
 800bd80:	0800be5f 	.word	0x0800be5f
 800bd84:	682b      	ldr	r3, [r5, #0]
 800bd86:	1d1a      	adds	r2, r3, #4
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	602a      	str	r2, [r5, #0]
 800bd8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd94:	2301      	movs	r3, #1
 800bd96:	e09f      	b.n	800bed8 <_printf_i+0x1ec>
 800bd98:	6820      	ldr	r0, [r4, #0]
 800bd9a:	682b      	ldr	r3, [r5, #0]
 800bd9c:	0607      	lsls	r7, r0, #24
 800bd9e:	f103 0104 	add.w	r1, r3, #4
 800bda2:	6029      	str	r1, [r5, #0]
 800bda4:	d501      	bpl.n	800bdaa <_printf_i+0xbe>
 800bda6:	681e      	ldr	r6, [r3, #0]
 800bda8:	e003      	b.n	800bdb2 <_printf_i+0xc6>
 800bdaa:	0646      	lsls	r6, r0, #25
 800bdac:	d5fb      	bpl.n	800bda6 <_printf_i+0xba>
 800bdae:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bdb2:	2e00      	cmp	r6, #0
 800bdb4:	da03      	bge.n	800bdbe <_printf_i+0xd2>
 800bdb6:	232d      	movs	r3, #45	; 0x2d
 800bdb8:	4276      	negs	r6, r6
 800bdba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdbe:	485a      	ldr	r0, [pc, #360]	; (800bf28 <_printf_i+0x23c>)
 800bdc0:	230a      	movs	r3, #10
 800bdc2:	e012      	b.n	800bdea <_printf_i+0xfe>
 800bdc4:	682b      	ldr	r3, [r5, #0]
 800bdc6:	6820      	ldr	r0, [r4, #0]
 800bdc8:	1d19      	adds	r1, r3, #4
 800bdca:	6029      	str	r1, [r5, #0]
 800bdcc:	0605      	lsls	r5, r0, #24
 800bdce:	d501      	bpl.n	800bdd4 <_printf_i+0xe8>
 800bdd0:	681e      	ldr	r6, [r3, #0]
 800bdd2:	e002      	b.n	800bdda <_printf_i+0xee>
 800bdd4:	0641      	lsls	r1, r0, #25
 800bdd6:	d5fb      	bpl.n	800bdd0 <_printf_i+0xe4>
 800bdd8:	881e      	ldrh	r6, [r3, #0]
 800bdda:	4853      	ldr	r0, [pc, #332]	; (800bf28 <_printf_i+0x23c>)
 800bddc:	2f6f      	cmp	r7, #111	; 0x6f
 800bdde:	bf0c      	ite	eq
 800bde0:	2308      	moveq	r3, #8
 800bde2:	230a      	movne	r3, #10
 800bde4:	2100      	movs	r1, #0
 800bde6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bdea:	6865      	ldr	r5, [r4, #4]
 800bdec:	60a5      	str	r5, [r4, #8]
 800bdee:	2d00      	cmp	r5, #0
 800bdf0:	bfa2      	ittt	ge
 800bdf2:	6821      	ldrge	r1, [r4, #0]
 800bdf4:	f021 0104 	bicge.w	r1, r1, #4
 800bdf8:	6021      	strge	r1, [r4, #0]
 800bdfa:	b90e      	cbnz	r6, 800be00 <_printf_i+0x114>
 800bdfc:	2d00      	cmp	r5, #0
 800bdfe:	d04b      	beq.n	800be98 <_printf_i+0x1ac>
 800be00:	4615      	mov	r5, r2
 800be02:	fbb6 f1f3 	udiv	r1, r6, r3
 800be06:	fb03 6711 	mls	r7, r3, r1, r6
 800be0a:	5dc7      	ldrb	r7, [r0, r7]
 800be0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800be10:	4637      	mov	r7, r6
 800be12:	42bb      	cmp	r3, r7
 800be14:	460e      	mov	r6, r1
 800be16:	d9f4      	bls.n	800be02 <_printf_i+0x116>
 800be18:	2b08      	cmp	r3, #8
 800be1a:	d10b      	bne.n	800be34 <_printf_i+0x148>
 800be1c:	6823      	ldr	r3, [r4, #0]
 800be1e:	07de      	lsls	r6, r3, #31
 800be20:	d508      	bpl.n	800be34 <_printf_i+0x148>
 800be22:	6923      	ldr	r3, [r4, #16]
 800be24:	6861      	ldr	r1, [r4, #4]
 800be26:	4299      	cmp	r1, r3
 800be28:	bfde      	ittt	le
 800be2a:	2330      	movle	r3, #48	; 0x30
 800be2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be30:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be34:	1b52      	subs	r2, r2, r5
 800be36:	6122      	str	r2, [r4, #16]
 800be38:	f8cd a000 	str.w	sl, [sp]
 800be3c:	464b      	mov	r3, r9
 800be3e:	aa03      	add	r2, sp, #12
 800be40:	4621      	mov	r1, r4
 800be42:	4640      	mov	r0, r8
 800be44:	f7ff fee4 	bl	800bc10 <_printf_common>
 800be48:	3001      	adds	r0, #1
 800be4a:	d14a      	bne.n	800bee2 <_printf_i+0x1f6>
 800be4c:	f04f 30ff 	mov.w	r0, #4294967295
 800be50:	b004      	add	sp, #16
 800be52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be56:	6823      	ldr	r3, [r4, #0]
 800be58:	f043 0320 	orr.w	r3, r3, #32
 800be5c:	6023      	str	r3, [r4, #0]
 800be5e:	4833      	ldr	r0, [pc, #204]	; (800bf2c <_printf_i+0x240>)
 800be60:	2778      	movs	r7, #120	; 0x78
 800be62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800be66:	6823      	ldr	r3, [r4, #0]
 800be68:	6829      	ldr	r1, [r5, #0]
 800be6a:	061f      	lsls	r7, r3, #24
 800be6c:	f851 6b04 	ldr.w	r6, [r1], #4
 800be70:	d402      	bmi.n	800be78 <_printf_i+0x18c>
 800be72:	065f      	lsls	r7, r3, #25
 800be74:	bf48      	it	mi
 800be76:	b2b6      	uxthmi	r6, r6
 800be78:	07df      	lsls	r7, r3, #31
 800be7a:	bf48      	it	mi
 800be7c:	f043 0320 	orrmi.w	r3, r3, #32
 800be80:	6029      	str	r1, [r5, #0]
 800be82:	bf48      	it	mi
 800be84:	6023      	strmi	r3, [r4, #0]
 800be86:	b91e      	cbnz	r6, 800be90 <_printf_i+0x1a4>
 800be88:	6823      	ldr	r3, [r4, #0]
 800be8a:	f023 0320 	bic.w	r3, r3, #32
 800be8e:	6023      	str	r3, [r4, #0]
 800be90:	2310      	movs	r3, #16
 800be92:	e7a7      	b.n	800bde4 <_printf_i+0xf8>
 800be94:	4824      	ldr	r0, [pc, #144]	; (800bf28 <_printf_i+0x23c>)
 800be96:	e7e4      	b.n	800be62 <_printf_i+0x176>
 800be98:	4615      	mov	r5, r2
 800be9a:	e7bd      	b.n	800be18 <_printf_i+0x12c>
 800be9c:	682b      	ldr	r3, [r5, #0]
 800be9e:	6826      	ldr	r6, [r4, #0]
 800bea0:	6961      	ldr	r1, [r4, #20]
 800bea2:	1d18      	adds	r0, r3, #4
 800bea4:	6028      	str	r0, [r5, #0]
 800bea6:	0635      	lsls	r5, r6, #24
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	d501      	bpl.n	800beb0 <_printf_i+0x1c4>
 800beac:	6019      	str	r1, [r3, #0]
 800beae:	e002      	b.n	800beb6 <_printf_i+0x1ca>
 800beb0:	0670      	lsls	r0, r6, #25
 800beb2:	d5fb      	bpl.n	800beac <_printf_i+0x1c0>
 800beb4:	8019      	strh	r1, [r3, #0]
 800beb6:	2300      	movs	r3, #0
 800beb8:	6123      	str	r3, [r4, #16]
 800beba:	4615      	mov	r5, r2
 800bebc:	e7bc      	b.n	800be38 <_printf_i+0x14c>
 800bebe:	682b      	ldr	r3, [r5, #0]
 800bec0:	1d1a      	adds	r2, r3, #4
 800bec2:	602a      	str	r2, [r5, #0]
 800bec4:	681d      	ldr	r5, [r3, #0]
 800bec6:	6862      	ldr	r2, [r4, #4]
 800bec8:	2100      	movs	r1, #0
 800beca:	4628      	mov	r0, r5
 800becc:	f7f4 f980 	bl	80001d0 <memchr>
 800bed0:	b108      	cbz	r0, 800bed6 <_printf_i+0x1ea>
 800bed2:	1b40      	subs	r0, r0, r5
 800bed4:	6060      	str	r0, [r4, #4]
 800bed6:	6863      	ldr	r3, [r4, #4]
 800bed8:	6123      	str	r3, [r4, #16]
 800beda:	2300      	movs	r3, #0
 800bedc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bee0:	e7aa      	b.n	800be38 <_printf_i+0x14c>
 800bee2:	6923      	ldr	r3, [r4, #16]
 800bee4:	462a      	mov	r2, r5
 800bee6:	4649      	mov	r1, r9
 800bee8:	4640      	mov	r0, r8
 800beea:	47d0      	blx	sl
 800beec:	3001      	adds	r0, #1
 800beee:	d0ad      	beq.n	800be4c <_printf_i+0x160>
 800bef0:	6823      	ldr	r3, [r4, #0]
 800bef2:	079b      	lsls	r3, r3, #30
 800bef4:	d413      	bmi.n	800bf1e <_printf_i+0x232>
 800bef6:	68e0      	ldr	r0, [r4, #12]
 800bef8:	9b03      	ldr	r3, [sp, #12]
 800befa:	4298      	cmp	r0, r3
 800befc:	bfb8      	it	lt
 800befe:	4618      	movlt	r0, r3
 800bf00:	e7a6      	b.n	800be50 <_printf_i+0x164>
 800bf02:	2301      	movs	r3, #1
 800bf04:	4632      	mov	r2, r6
 800bf06:	4649      	mov	r1, r9
 800bf08:	4640      	mov	r0, r8
 800bf0a:	47d0      	blx	sl
 800bf0c:	3001      	adds	r0, #1
 800bf0e:	d09d      	beq.n	800be4c <_printf_i+0x160>
 800bf10:	3501      	adds	r5, #1
 800bf12:	68e3      	ldr	r3, [r4, #12]
 800bf14:	9903      	ldr	r1, [sp, #12]
 800bf16:	1a5b      	subs	r3, r3, r1
 800bf18:	42ab      	cmp	r3, r5
 800bf1a:	dcf2      	bgt.n	800bf02 <_printf_i+0x216>
 800bf1c:	e7eb      	b.n	800bef6 <_printf_i+0x20a>
 800bf1e:	2500      	movs	r5, #0
 800bf20:	f104 0619 	add.w	r6, r4, #25
 800bf24:	e7f5      	b.n	800bf12 <_printf_i+0x226>
 800bf26:	bf00      	nop
 800bf28:	0800ebf9 	.word	0x0800ebf9
 800bf2c:	0800ec0a 	.word	0x0800ec0a

0800bf30 <std>:
 800bf30:	2300      	movs	r3, #0
 800bf32:	b510      	push	{r4, lr}
 800bf34:	4604      	mov	r4, r0
 800bf36:	e9c0 3300 	strd	r3, r3, [r0]
 800bf3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf3e:	6083      	str	r3, [r0, #8]
 800bf40:	8181      	strh	r1, [r0, #12]
 800bf42:	6643      	str	r3, [r0, #100]	; 0x64
 800bf44:	81c2      	strh	r2, [r0, #14]
 800bf46:	6183      	str	r3, [r0, #24]
 800bf48:	4619      	mov	r1, r3
 800bf4a:	2208      	movs	r2, #8
 800bf4c:	305c      	adds	r0, #92	; 0x5c
 800bf4e:	f000 fa17 	bl	800c380 <memset>
 800bf52:	4b0d      	ldr	r3, [pc, #52]	; (800bf88 <std+0x58>)
 800bf54:	6263      	str	r3, [r4, #36]	; 0x24
 800bf56:	4b0d      	ldr	r3, [pc, #52]	; (800bf8c <std+0x5c>)
 800bf58:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf5a:	4b0d      	ldr	r3, [pc, #52]	; (800bf90 <std+0x60>)
 800bf5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf5e:	4b0d      	ldr	r3, [pc, #52]	; (800bf94 <std+0x64>)
 800bf60:	6323      	str	r3, [r4, #48]	; 0x30
 800bf62:	4b0d      	ldr	r3, [pc, #52]	; (800bf98 <std+0x68>)
 800bf64:	6224      	str	r4, [r4, #32]
 800bf66:	429c      	cmp	r4, r3
 800bf68:	d006      	beq.n	800bf78 <std+0x48>
 800bf6a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bf6e:	4294      	cmp	r4, r2
 800bf70:	d002      	beq.n	800bf78 <std+0x48>
 800bf72:	33d0      	adds	r3, #208	; 0xd0
 800bf74:	429c      	cmp	r4, r3
 800bf76:	d105      	bne.n	800bf84 <std+0x54>
 800bf78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf80:	f000 ba7a 	b.w	800c478 <__retarget_lock_init_recursive>
 800bf84:	bd10      	pop	{r4, pc}
 800bf86:	bf00      	nop
 800bf88:	0800c1d1 	.word	0x0800c1d1
 800bf8c:	0800c1f3 	.word	0x0800c1f3
 800bf90:	0800c22b 	.word	0x0800c22b
 800bf94:	0800c24f 	.word	0x0800c24f
 800bf98:	20000eb8 	.word	0x20000eb8

0800bf9c <stdio_exit_handler>:
 800bf9c:	4a02      	ldr	r2, [pc, #8]	; (800bfa8 <stdio_exit_handler+0xc>)
 800bf9e:	4903      	ldr	r1, [pc, #12]	; (800bfac <stdio_exit_handler+0x10>)
 800bfa0:	4803      	ldr	r0, [pc, #12]	; (800bfb0 <stdio_exit_handler+0x14>)
 800bfa2:	f000 b869 	b.w	800c078 <_fwalk_sglue>
 800bfa6:	bf00      	nop
 800bfa8:	20000024 	.word	0x20000024
 800bfac:	0800e109 	.word	0x0800e109
 800bfb0:	20000030 	.word	0x20000030

0800bfb4 <cleanup_stdio>:
 800bfb4:	6841      	ldr	r1, [r0, #4]
 800bfb6:	4b0c      	ldr	r3, [pc, #48]	; (800bfe8 <cleanup_stdio+0x34>)
 800bfb8:	4299      	cmp	r1, r3
 800bfba:	b510      	push	{r4, lr}
 800bfbc:	4604      	mov	r4, r0
 800bfbe:	d001      	beq.n	800bfc4 <cleanup_stdio+0x10>
 800bfc0:	f002 f8a2 	bl	800e108 <_fflush_r>
 800bfc4:	68a1      	ldr	r1, [r4, #8]
 800bfc6:	4b09      	ldr	r3, [pc, #36]	; (800bfec <cleanup_stdio+0x38>)
 800bfc8:	4299      	cmp	r1, r3
 800bfca:	d002      	beq.n	800bfd2 <cleanup_stdio+0x1e>
 800bfcc:	4620      	mov	r0, r4
 800bfce:	f002 f89b 	bl	800e108 <_fflush_r>
 800bfd2:	68e1      	ldr	r1, [r4, #12]
 800bfd4:	4b06      	ldr	r3, [pc, #24]	; (800bff0 <cleanup_stdio+0x3c>)
 800bfd6:	4299      	cmp	r1, r3
 800bfd8:	d004      	beq.n	800bfe4 <cleanup_stdio+0x30>
 800bfda:	4620      	mov	r0, r4
 800bfdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfe0:	f002 b892 	b.w	800e108 <_fflush_r>
 800bfe4:	bd10      	pop	{r4, pc}
 800bfe6:	bf00      	nop
 800bfe8:	20000eb8 	.word	0x20000eb8
 800bfec:	20000f20 	.word	0x20000f20
 800bff0:	20000f88 	.word	0x20000f88

0800bff4 <global_stdio_init.part.0>:
 800bff4:	b510      	push	{r4, lr}
 800bff6:	4b0b      	ldr	r3, [pc, #44]	; (800c024 <global_stdio_init.part.0+0x30>)
 800bff8:	4c0b      	ldr	r4, [pc, #44]	; (800c028 <global_stdio_init.part.0+0x34>)
 800bffa:	4a0c      	ldr	r2, [pc, #48]	; (800c02c <global_stdio_init.part.0+0x38>)
 800bffc:	601a      	str	r2, [r3, #0]
 800bffe:	4620      	mov	r0, r4
 800c000:	2200      	movs	r2, #0
 800c002:	2104      	movs	r1, #4
 800c004:	f7ff ff94 	bl	800bf30 <std>
 800c008:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c00c:	2201      	movs	r2, #1
 800c00e:	2109      	movs	r1, #9
 800c010:	f7ff ff8e 	bl	800bf30 <std>
 800c014:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c018:	2202      	movs	r2, #2
 800c01a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c01e:	2112      	movs	r1, #18
 800c020:	f7ff bf86 	b.w	800bf30 <std>
 800c024:	20000ff0 	.word	0x20000ff0
 800c028:	20000eb8 	.word	0x20000eb8
 800c02c:	0800bf9d 	.word	0x0800bf9d

0800c030 <__sfp_lock_acquire>:
 800c030:	4801      	ldr	r0, [pc, #4]	; (800c038 <__sfp_lock_acquire+0x8>)
 800c032:	f000 ba22 	b.w	800c47a <__retarget_lock_acquire_recursive>
 800c036:	bf00      	nop
 800c038:	20000ff9 	.word	0x20000ff9

0800c03c <__sfp_lock_release>:
 800c03c:	4801      	ldr	r0, [pc, #4]	; (800c044 <__sfp_lock_release+0x8>)
 800c03e:	f000 ba1d 	b.w	800c47c <__retarget_lock_release_recursive>
 800c042:	bf00      	nop
 800c044:	20000ff9 	.word	0x20000ff9

0800c048 <__sinit>:
 800c048:	b510      	push	{r4, lr}
 800c04a:	4604      	mov	r4, r0
 800c04c:	f7ff fff0 	bl	800c030 <__sfp_lock_acquire>
 800c050:	6a23      	ldr	r3, [r4, #32]
 800c052:	b11b      	cbz	r3, 800c05c <__sinit+0x14>
 800c054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c058:	f7ff bff0 	b.w	800c03c <__sfp_lock_release>
 800c05c:	4b04      	ldr	r3, [pc, #16]	; (800c070 <__sinit+0x28>)
 800c05e:	6223      	str	r3, [r4, #32]
 800c060:	4b04      	ldr	r3, [pc, #16]	; (800c074 <__sinit+0x2c>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d1f5      	bne.n	800c054 <__sinit+0xc>
 800c068:	f7ff ffc4 	bl	800bff4 <global_stdio_init.part.0>
 800c06c:	e7f2      	b.n	800c054 <__sinit+0xc>
 800c06e:	bf00      	nop
 800c070:	0800bfb5 	.word	0x0800bfb5
 800c074:	20000ff0 	.word	0x20000ff0

0800c078 <_fwalk_sglue>:
 800c078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c07c:	4607      	mov	r7, r0
 800c07e:	4688      	mov	r8, r1
 800c080:	4614      	mov	r4, r2
 800c082:	2600      	movs	r6, #0
 800c084:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c088:	f1b9 0901 	subs.w	r9, r9, #1
 800c08c:	d505      	bpl.n	800c09a <_fwalk_sglue+0x22>
 800c08e:	6824      	ldr	r4, [r4, #0]
 800c090:	2c00      	cmp	r4, #0
 800c092:	d1f7      	bne.n	800c084 <_fwalk_sglue+0xc>
 800c094:	4630      	mov	r0, r6
 800c096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c09a:	89ab      	ldrh	r3, [r5, #12]
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	d907      	bls.n	800c0b0 <_fwalk_sglue+0x38>
 800c0a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	d003      	beq.n	800c0b0 <_fwalk_sglue+0x38>
 800c0a8:	4629      	mov	r1, r5
 800c0aa:	4638      	mov	r0, r7
 800c0ac:	47c0      	blx	r8
 800c0ae:	4306      	orrs	r6, r0
 800c0b0:	3568      	adds	r5, #104	; 0x68
 800c0b2:	e7e9      	b.n	800c088 <_fwalk_sglue+0x10>

0800c0b4 <iprintf>:
 800c0b4:	b40f      	push	{r0, r1, r2, r3}
 800c0b6:	b507      	push	{r0, r1, r2, lr}
 800c0b8:	4906      	ldr	r1, [pc, #24]	; (800c0d4 <iprintf+0x20>)
 800c0ba:	ab04      	add	r3, sp, #16
 800c0bc:	6808      	ldr	r0, [r1, #0]
 800c0be:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0c2:	6881      	ldr	r1, [r0, #8]
 800c0c4:	9301      	str	r3, [sp, #4]
 800c0c6:	f001 fe7f 	bl	800ddc8 <_vfiprintf_r>
 800c0ca:	b003      	add	sp, #12
 800c0cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0d0:	b004      	add	sp, #16
 800c0d2:	4770      	bx	lr
 800c0d4:	2000007c 	.word	0x2000007c

0800c0d8 <_puts_r>:
 800c0d8:	6a03      	ldr	r3, [r0, #32]
 800c0da:	b570      	push	{r4, r5, r6, lr}
 800c0dc:	6884      	ldr	r4, [r0, #8]
 800c0de:	4605      	mov	r5, r0
 800c0e0:	460e      	mov	r6, r1
 800c0e2:	b90b      	cbnz	r3, 800c0e8 <_puts_r+0x10>
 800c0e4:	f7ff ffb0 	bl	800c048 <__sinit>
 800c0e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0ea:	07db      	lsls	r3, r3, #31
 800c0ec:	d405      	bmi.n	800c0fa <_puts_r+0x22>
 800c0ee:	89a3      	ldrh	r3, [r4, #12]
 800c0f0:	0598      	lsls	r0, r3, #22
 800c0f2:	d402      	bmi.n	800c0fa <_puts_r+0x22>
 800c0f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0f6:	f000 f9c0 	bl	800c47a <__retarget_lock_acquire_recursive>
 800c0fa:	89a3      	ldrh	r3, [r4, #12]
 800c0fc:	0719      	lsls	r1, r3, #28
 800c0fe:	d513      	bpl.n	800c128 <_puts_r+0x50>
 800c100:	6923      	ldr	r3, [r4, #16]
 800c102:	b18b      	cbz	r3, 800c128 <_puts_r+0x50>
 800c104:	3e01      	subs	r6, #1
 800c106:	68a3      	ldr	r3, [r4, #8]
 800c108:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c10c:	3b01      	subs	r3, #1
 800c10e:	60a3      	str	r3, [r4, #8]
 800c110:	b9e9      	cbnz	r1, 800c14e <_puts_r+0x76>
 800c112:	2b00      	cmp	r3, #0
 800c114:	da2e      	bge.n	800c174 <_puts_r+0x9c>
 800c116:	4622      	mov	r2, r4
 800c118:	210a      	movs	r1, #10
 800c11a:	4628      	mov	r0, r5
 800c11c:	f000 f89b 	bl	800c256 <__swbuf_r>
 800c120:	3001      	adds	r0, #1
 800c122:	d007      	beq.n	800c134 <_puts_r+0x5c>
 800c124:	250a      	movs	r5, #10
 800c126:	e007      	b.n	800c138 <_puts_r+0x60>
 800c128:	4621      	mov	r1, r4
 800c12a:	4628      	mov	r0, r5
 800c12c:	f000 f8d0 	bl	800c2d0 <__swsetup_r>
 800c130:	2800      	cmp	r0, #0
 800c132:	d0e7      	beq.n	800c104 <_puts_r+0x2c>
 800c134:	f04f 35ff 	mov.w	r5, #4294967295
 800c138:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c13a:	07da      	lsls	r2, r3, #31
 800c13c:	d405      	bmi.n	800c14a <_puts_r+0x72>
 800c13e:	89a3      	ldrh	r3, [r4, #12]
 800c140:	059b      	lsls	r3, r3, #22
 800c142:	d402      	bmi.n	800c14a <_puts_r+0x72>
 800c144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c146:	f000 f999 	bl	800c47c <__retarget_lock_release_recursive>
 800c14a:	4628      	mov	r0, r5
 800c14c:	bd70      	pop	{r4, r5, r6, pc}
 800c14e:	2b00      	cmp	r3, #0
 800c150:	da04      	bge.n	800c15c <_puts_r+0x84>
 800c152:	69a2      	ldr	r2, [r4, #24]
 800c154:	429a      	cmp	r2, r3
 800c156:	dc06      	bgt.n	800c166 <_puts_r+0x8e>
 800c158:	290a      	cmp	r1, #10
 800c15a:	d004      	beq.n	800c166 <_puts_r+0x8e>
 800c15c:	6823      	ldr	r3, [r4, #0]
 800c15e:	1c5a      	adds	r2, r3, #1
 800c160:	6022      	str	r2, [r4, #0]
 800c162:	7019      	strb	r1, [r3, #0]
 800c164:	e7cf      	b.n	800c106 <_puts_r+0x2e>
 800c166:	4622      	mov	r2, r4
 800c168:	4628      	mov	r0, r5
 800c16a:	f000 f874 	bl	800c256 <__swbuf_r>
 800c16e:	3001      	adds	r0, #1
 800c170:	d1c9      	bne.n	800c106 <_puts_r+0x2e>
 800c172:	e7df      	b.n	800c134 <_puts_r+0x5c>
 800c174:	6823      	ldr	r3, [r4, #0]
 800c176:	250a      	movs	r5, #10
 800c178:	1c5a      	adds	r2, r3, #1
 800c17a:	6022      	str	r2, [r4, #0]
 800c17c:	701d      	strb	r5, [r3, #0]
 800c17e:	e7db      	b.n	800c138 <_puts_r+0x60>

0800c180 <puts>:
 800c180:	4b02      	ldr	r3, [pc, #8]	; (800c18c <puts+0xc>)
 800c182:	4601      	mov	r1, r0
 800c184:	6818      	ldr	r0, [r3, #0]
 800c186:	f7ff bfa7 	b.w	800c0d8 <_puts_r>
 800c18a:	bf00      	nop
 800c18c:	2000007c 	.word	0x2000007c

0800c190 <siprintf>:
 800c190:	b40e      	push	{r1, r2, r3}
 800c192:	b500      	push	{lr}
 800c194:	b09c      	sub	sp, #112	; 0x70
 800c196:	ab1d      	add	r3, sp, #116	; 0x74
 800c198:	9002      	str	r0, [sp, #8]
 800c19a:	9006      	str	r0, [sp, #24]
 800c19c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c1a0:	4809      	ldr	r0, [pc, #36]	; (800c1c8 <siprintf+0x38>)
 800c1a2:	9107      	str	r1, [sp, #28]
 800c1a4:	9104      	str	r1, [sp, #16]
 800c1a6:	4909      	ldr	r1, [pc, #36]	; (800c1cc <siprintf+0x3c>)
 800c1a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1ac:	9105      	str	r1, [sp, #20]
 800c1ae:	6800      	ldr	r0, [r0, #0]
 800c1b0:	9301      	str	r3, [sp, #4]
 800c1b2:	a902      	add	r1, sp, #8
 800c1b4:	f001 fce0 	bl	800db78 <_svfiprintf_r>
 800c1b8:	9b02      	ldr	r3, [sp, #8]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	701a      	strb	r2, [r3, #0]
 800c1be:	b01c      	add	sp, #112	; 0x70
 800c1c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1c4:	b003      	add	sp, #12
 800c1c6:	4770      	bx	lr
 800c1c8:	2000007c 	.word	0x2000007c
 800c1cc:	ffff0208 	.word	0xffff0208

0800c1d0 <__sread>:
 800c1d0:	b510      	push	{r4, lr}
 800c1d2:	460c      	mov	r4, r1
 800c1d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1d8:	f000 f900 	bl	800c3dc <_read_r>
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	bfab      	itete	ge
 800c1e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c1e2:	89a3      	ldrhlt	r3, [r4, #12]
 800c1e4:	181b      	addge	r3, r3, r0
 800c1e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c1ea:	bfac      	ite	ge
 800c1ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800c1ee:	81a3      	strhlt	r3, [r4, #12]
 800c1f0:	bd10      	pop	{r4, pc}

0800c1f2 <__swrite>:
 800c1f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1f6:	461f      	mov	r7, r3
 800c1f8:	898b      	ldrh	r3, [r1, #12]
 800c1fa:	05db      	lsls	r3, r3, #23
 800c1fc:	4605      	mov	r5, r0
 800c1fe:	460c      	mov	r4, r1
 800c200:	4616      	mov	r6, r2
 800c202:	d505      	bpl.n	800c210 <__swrite+0x1e>
 800c204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c208:	2302      	movs	r3, #2
 800c20a:	2200      	movs	r2, #0
 800c20c:	f000 f8d4 	bl	800c3b8 <_lseek_r>
 800c210:	89a3      	ldrh	r3, [r4, #12]
 800c212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c216:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c21a:	81a3      	strh	r3, [r4, #12]
 800c21c:	4632      	mov	r2, r6
 800c21e:	463b      	mov	r3, r7
 800c220:	4628      	mov	r0, r5
 800c222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c226:	f000 b8eb 	b.w	800c400 <_write_r>

0800c22a <__sseek>:
 800c22a:	b510      	push	{r4, lr}
 800c22c:	460c      	mov	r4, r1
 800c22e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c232:	f000 f8c1 	bl	800c3b8 <_lseek_r>
 800c236:	1c43      	adds	r3, r0, #1
 800c238:	89a3      	ldrh	r3, [r4, #12]
 800c23a:	bf15      	itete	ne
 800c23c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c23e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c242:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c246:	81a3      	strheq	r3, [r4, #12]
 800c248:	bf18      	it	ne
 800c24a:	81a3      	strhne	r3, [r4, #12]
 800c24c:	bd10      	pop	{r4, pc}

0800c24e <__sclose>:
 800c24e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c252:	f000 b8a1 	b.w	800c398 <_close_r>

0800c256 <__swbuf_r>:
 800c256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c258:	460e      	mov	r6, r1
 800c25a:	4614      	mov	r4, r2
 800c25c:	4605      	mov	r5, r0
 800c25e:	b118      	cbz	r0, 800c268 <__swbuf_r+0x12>
 800c260:	6a03      	ldr	r3, [r0, #32]
 800c262:	b90b      	cbnz	r3, 800c268 <__swbuf_r+0x12>
 800c264:	f7ff fef0 	bl	800c048 <__sinit>
 800c268:	69a3      	ldr	r3, [r4, #24]
 800c26a:	60a3      	str	r3, [r4, #8]
 800c26c:	89a3      	ldrh	r3, [r4, #12]
 800c26e:	071a      	lsls	r2, r3, #28
 800c270:	d525      	bpl.n	800c2be <__swbuf_r+0x68>
 800c272:	6923      	ldr	r3, [r4, #16]
 800c274:	b31b      	cbz	r3, 800c2be <__swbuf_r+0x68>
 800c276:	6823      	ldr	r3, [r4, #0]
 800c278:	6922      	ldr	r2, [r4, #16]
 800c27a:	1a98      	subs	r0, r3, r2
 800c27c:	6963      	ldr	r3, [r4, #20]
 800c27e:	b2f6      	uxtb	r6, r6
 800c280:	4283      	cmp	r3, r0
 800c282:	4637      	mov	r7, r6
 800c284:	dc04      	bgt.n	800c290 <__swbuf_r+0x3a>
 800c286:	4621      	mov	r1, r4
 800c288:	4628      	mov	r0, r5
 800c28a:	f001 ff3d 	bl	800e108 <_fflush_r>
 800c28e:	b9e0      	cbnz	r0, 800c2ca <__swbuf_r+0x74>
 800c290:	68a3      	ldr	r3, [r4, #8]
 800c292:	3b01      	subs	r3, #1
 800c294:	60a3      	str	r3, [r4, #8]
 800c296:	6823      	ldr	r3, [r4, #0]
 800c298:	1c5a      	adds	r2, r3, #1
 800c29a:	6022      	str	r2, [r4, #0]
 800c29c:	701e      	strb	r6, [r3, #0]
 800c29e:	6962      	ldr	r2, [r4, #20]
 800c2a0:	1c43      	adds	r3, r0, #1
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d004      	beq.n	800c2b0 <__swbuf_r+0x5a>
 800c2a6:	89a3      	ldrh	r3, [r4, #12]
 800c2a8:	07db      	lsls	r3, r3, #31
 800c2aa:	d506      	bpl.n	800c2ba <__swbuf_r+0x64>
 800c2ac:	2e0a      	cmp	r6, #10
 800c2ae:	d104      	bne.n	800c2ba <__swbuf_r+0x64>
 800c2b0:	4621      	mov	r1, r4
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	f001 ff28 	bl	800e108 <_fflush_r>
 800c2b8:	b938      	cbnz	r0, 800c2ca <__swbuf_r+0x74>
 800c2ba:	4638      	mov	r0, r7
 800c2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2be:	4621      	mov	r1, r4
 800c2c0:	4628      	mov	r0, r5
 800c2c2:	f000 f805 	bl	800c2d0 <__swsetup_r>
 800c2c6:	2800      	cmp	r0, #0
 800c2c8:	d0d5      	beq.n	800c276 <__swbuf_r+0x20>
 800c2ca:	f04f 37ff 	mov.w	r7, #4294967295
 800c2ce:	e7f4      	b.n	800c2ba <__swbuf_r+0x64>

0800c2d0 <__swsetup_r>:
 800c2d0:	b538      	push	{r3, r4, r5, lr}
 800c2d2:	4b2a      	ldr	r3, [pc, #168]	; (800c37c <__swsetup_r+0xac>)
 800c2d4:	4605      	mov	r5, r0
 800c2d6:	6818      	ldr	r0, [r3, #0]
 800c2d8:	460c      	mov	r4, r1
 800c2da:	b118      	cbz	r0, 800c2e4 <__swsetup_r+0x14>
 800c2dc:	6a03      	ldr	r3, [r0, #32]
 800c2de:	b90b      	cbnz	r3, 800c2e4 <__swsetup_r+0x14>
 800c2e0:	f7ff feb2 	bl	800c048 <__sinit>
 800c2e4:	89a3      	ldrh	r3, [r4, #12]
 800c2e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2ea:	0718      	lsls	r0, r3, #28
 800c2ec:	d422      	bmi.n	800c334 <__swsetup_r+0x64>
 800c2ee:	06d9      	lsls	r1, r3, #27
 800c2f0:	d407      	bmi.n	800c302 <__swsetup_r+0x32>
 800c2f2:	2309      	movs	r3, #9
 800c2f4:	602b      	str	r3, [r5, #0]
 800c2f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c2fa:	81a3      	strh	r3, [r4, #12]
 800c2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c300:	e034      	b.n	800c36c <__swsetup_r+0x9c>
 800c302:	0758      	lsls	r0, r3, #29
 800c304:	d512      	bpl.n	800c32c <__swsetup_r+0x5c>
 800c306:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c308:	b141      	cbz	r1, 800c31c <__swsetup_r+0x4c>
 800c30a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c30e:	4299      	cmp	r1, r3
 800c310:	d002      	beq.n	800c318 <__swsetup_r+0x48>
 800c312:	4628      	mov	r0, r5
 800c314:	f000 ff5a 	bl	800d1cc <_free_r>
 800c318:	2300      	movs	r3, #0
 800c31a:	6363      	str	r3, [r4, #52]	; 0x34
 800c31c:	89a3      	ldrh	r3, [r4, #12]
 800c31e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c322:	81a3      	strh	r3, [r4, #12]
 800c324:	2300      	movs	r3, #0
 800c326:	6063      	str	r3, [r4, #4]
 800c328:	6923      	ldr	r3, [r4, #16]
 800c32a:	6023      	str	r3, [r4, #0]
 800c32c:	89a3      	ldrh	r3, [r4, #12]
 800c32e:	f043 0308 	orr.w	r3, r3, #8
 800c332:	81a3      	strh	r3, [r4, #12]
 800c334:	6923      	ldr	r3, [r4, #16]
 800c336:	b94b      	cbnz	r3, 800c34c <__swsetup_r+0x7c>
 800c338:	89a3      	ldrh	r3, [r4, #12]
 800c33a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c33e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c342:	d003      	beq.n	800c34c <__swsetup_r+0x7c>
 800c344:	4621      	mov	r1, r4
 800c346:	4628      	mov	r0, r5
 800c348:	f001 ff3e 	bl	800e1c8 <__smakebuf_r>
 800c34c:	89a0      	ldrh	r0, [r4, #12]
 800c34e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c352:	f010 0301 	ands.w	r3, r0, #1
 800c356:	d00a      	beq.n	800c36e <__swsetup_r+0x9e>
 800c358:	2300      	movs	r3, #0
 800c35a:	60a3      	str	r3, [r4, #8]
 800c35c:	6963      	ldr	r3, [r4, #20]
 800c35e:	425b      	negs	r3, r3
 800c360:	61a3      	str	r3, [r4, #24]
 800c362:	6923      	ldr	r3, [r4, #16]
 800c364:	b943      	cbnz	r3, 800c378 <__swsetup_r+0xa8>
 800c366:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c36a:	d1c4      	bne.n	800c2f6 <__swsetup_r+0x26>
 800c36c:	bd38      	pop	{r3, r4, r5, pc}
 800c36e:	0781      	lsls	r1, r0, #30
 800c370:	bf58      	it	pl
 800c372:	6963      	ldrpl	r3, [r4, #20]
 800c374:	60a3      	str	r3, [r4, #8]
 800c376:	e7f4      	b.n	800c362 <__swsetup_r+0x92>
 800c378:	2000      	movs	r0, #0
 800c37a:	e7f7      	b.n	800c36c <__swsetup_r+0x9c>
 800c37c:	2000007c 	.word	0x2000007c

0800c380 <memset>:
 800c380:	4402      	add	r2, r0
 800c382:	4603      	mov	r3, r0
 800c384:	4293      	cmp	r3, r2
 800c386:	d100      	bne.n	800c38a <memset+0xa>
 800c388:	4770      	bx	lr
 800c38a:	f803 1b01 	strb.w	r1, [r3], #1
 800c38e:	e7f9      	b.n	800c384 <memset+0x4>

0800c390 <_localeconv_r>:
 800c390:	4800      	ldr	r0, [pc, #0]	; (800c394 <_localeconv_r+0x4>)
 800c392:	4770      	bx	lr
 800c394:	20000170 	.word	0x20000170

0800c398 <_close_r>:
 800c398:	b538      	push	{r3, r4, r5, lr}
 800c39a:	4d06      	ldr	r5, [pc, #24]	; (800c3b4 <_close_r+0x1c>)
 800c39c:	2300      	movs	r3, #0
 800c39e:	4604      	mov	r4, r0
 800c3a0:	4608      	mov	r0, r1
 800c3a2:	602b      	str	r3, [r5, #0]
 800c3a4:	f7f7 fcc5 	bl	8003d32 <_close>
 800c3a8:	1c43      	adds	r3, r0, #1
 800c3aa:	d102      	bne.n	800c3b2 <_close_r+0x1a>
 800c3ac:	682b      	ldr	r3, [r5, #0]
 800c3ae:	b103      	cbz	r3, 800c3b2 <_close_r+0x1a>
 800c3b0:	6023      	str	r3, [r4, #0]
 800c3b2:	bd38      	pop	{r3, r4, r5, pc}
 800c3b4:	20000ff4 	.word	0x20000ff4

0800c3b8 <_lseek_r>:
 800c3b8:	b538      	push	{r3, r4, r5, lr}
 800c3ba:	4d07      	ldr	r5, [pc, #28]	; (800c3d8 <_lseek_r+0x20>)
 800c3bc:	4604      	mov	r4, r0
 800c3be:	4608      	mov	r0, r1
 800c3c0:	4611      	mov	r1, r2
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	602a      	str	r2, [r5, #0]
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	f7f7 fcda 	bl	8003d80 <_lseek>
 800c3cc:	1c43      	adds	r3, r0, #1
 800c3ce:	d102      	bne.n	800c3d6 <_lseek_r+0x1e>
 800c3d0:	682b      	ldr	r3, [r5, #0]
 800c3d2:	b103      	cbz	r3, 800c3d6 <_lseek_r+0x1e>
 800c3d4:	6023      	str	r3, [r4, #0]
 800c3d6:	bd38      	pop	{r3, r4, r5, pc}
 800c3d8:	20000ff4 	.word	0x20000ff4

0800c3dc <_read_r>:
 800c3dc:	b538      	push	{r3, r4, r5, lr}
 800c3de:	4d07      	ldr	r5, [pc, #28]	; (800c3fc <_read_r+0x20>)
 800c3e0:	4604      	mov	r4, r0
 800c3e2:	4608      	mov	r0, r1
 800c3e4:	4611      	mov	r1, r2
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	602a      	str	r2, [r5, #0]
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	f7f7 fc68 	bl	8003cc0 <_read>
 800c3f0:	1c43      	adds	r3, r0, #1
 800c3f2:	d102      	bne.n	800c3fa <_read_r+0x1e>
 800c3f4:	682b      	ldr	r3, [r5, #0]
 800c3f6:	b103      	cbz	r3, 800c3fa <_read_r+0x1e>
 800c3f8:	6023      	str	r3, [r4, #0]
 800c3fa:	bd38      	pop	{r3, r4, r5, pc}
 800c3fc:	20000ff4 	.word	0x20000ff4

0800c400 <_write_r>:
 800c400:	b538      	push	{r3, r4, r5, lr}
 800c402:	4d07      	ldr	r5, [pc, #28]	; (800c420 <_write_r+0x20>)
 800c404:	4604      	mov	r4, r0
 800c406:	4608      	mov	r0, r1
 800c408:	4611      	mov	r1, r2
 800c40a:	2200      	movs	r2, #0
 800c40c:	602a      	str	r2, [r5, #0]
 800c40e:	461a      	mov	r2, r3
 800c410:	f7f7 fc73 	bl	8003cfa <_write>
 800c414:	1c43      	adds	r3, r0, #1
 800c416:	d102      	bne.n	800c41e <_write_r+0x1e>
 800c418:	682b      	ldr	r3, [r5, #0]
 800c41a:	b103      	cbz	r3, 800c41e <_write_r+0x1e>
 800c41c:	6023      	str	r3, [r4, #0]
 800c41e:	bd38      	pop	{r3, r4, r5, pc}
 800c420:	20000ff4 	.word	0x20000ff4

0800c424 <__errno>:
 800c424:	4b01      	ldr	r3, [pc, #4]	; (800c42c <__errno+0x8>)
 800c426:	6818      	ldr	r0, [r3, #0]
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	2000007c 	.word	0x2000007c

0800c430 <__libc_init_array>:
 800c430:	b570      	push	{r4, r5, r6, lr}
 800c432:	4d0d      	ldr	r5, [pc, #52]	; (800c468 <__libc_init_array+0x38>)
 800c434:	4c0d      	ldr	r4, [pc, #52]	; (800c46c <__libc_init_array+0x3c>)
 800c436:	1b64      	subs	r4, r4, r5
 800c438:	10a4      	asrs	r4, r4, #2
 800c43a:	2600      	movs	r6, #0
 800c43c:	42a6      	cmp	r6, r4
 800c43e:	d109      	bne.n	800c454 <__libc_init_array+0x24>
 800c440:	4d0b      	ldr	r5, [pc, #44]	; (800c470 <__libc_init_array+0x40>)
 800c442:	4c0c      	ldr	r4, [pc, #48]	; (800c474 <__libc_init_array+0x44>)
 800c444:	f002 f800 	bl	800e448 <_init>
 800c448:	1b64      	subs	r4, r4, r5
 800c44a:	10a4      	asrs	r4, r4, #2
 800c44c:	2600      	movs	r6, #0
 800c44e:	42a6      	cmp	r6, r4
 800c450:	d105      	bne.n	800c45e <__libc_init_array+0x2e>
 800c452:	bd70      	pop	{r4, r5, r6, pc}
 800c454:	f855 3b04 	ldr.w	r3, [r5], #4
 800c458:	4798      	blx	r3
 800c45a:	3601      	adds	r6, #1
 800c45c:	e7ee      	b.n	800c43c <__libc_init_array+0xc>
 800c45e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c462:	4798      	blx	r3
 800c464:	3601      	adds	r6, #1
 800c466:	e7f2      	b.n	800c44e <__libc_init_array+0x1e>
 800c468:	0800ef48 	.word	0x0800ef48
 800c46c:	0800ef48 	.word	0x0800ef48
 800c470:	0800ef48 	.word	0x0800ef48
 800c474:	0800ef4c 	.word	0x0800ef4c

0800c478 <__retarget_lock_init_recursive>:
 800c478:	4770      	bx	lr

0800c47a <__retarget_lock_acquire_recursive>:
 800c47a:	4770      	bx	lr

0800c47c <__retarget_lock_release_recursive>:
 800c47c:	4770      	bx	lr

0800c47e <memcpy>:
 800c47e:	440a      	add	r2, r1
 800c480:	4291      	cmp	r1, r2
 800c482:	f100 33ff 	add.w	r3, r0, #4294967295
 800c486:	d100      	bne.n	800c48a <memcpy+0xc>
 800c488:	4770      	bx	lr
 800c48a:	b510      	push	{r4, lr}
 800c48c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c490:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c494:	4291      	cmp	r1, r2
 800c496:	d1f9      	bne.n	800c48c <memcpy+0xe>
 800c498:	bd10      	pop	{r4, pc}
	...

0800c49c <__assert_func>:
 800c49c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c49e:	4614      	mov	r4, r2
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	4b09      	ldr	r3, [pc, #36]	; (800c4c8 <__assert_func+0x2c>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4605      	mov	r5, r0
 800c4a8:	68d8      	ldr	r0, [r3, #12]
 800c4aa:	b14c      	cbz	r4, 800c4c0 <__assert_func+0x24>
 800c4ac:	4b07      	ldr	r3, [pc, #28]	; (800c4cc <__assert_func+0x30>)
 800c4ae:	9100      	str	r1, [sp, #0]
 800c4b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c4b4:	4906      	ldr	r1, [pc, #24]	; (800c4d0 <__assert_func+0x34>)
 800c4b6:	462b      	mov	r3, r5
 800c4b8:	f001 fe4e 	bl	800e158 <fiprintf>
 800c4bc:	f001 ff0c 	bl	800e2d8 <abort>
 800c4c0:	4b04      	ldr	r3, [pc, #16]	; (800c4d4 <__assert_func+0x38>)
 800c4c2:	461c      	mov	r4, r3
 800c4c4:	e7f3      	b.n	800c4ae <__assert_func+0x12>
 800c4c6:	bf00      	nop
 800c4c8:	2000007c 	.word	0x2000007c
 800c4cc:	0800ec1b 	.word	0x0800ec1b
 800c4d0:	0800ec28 	.word	0x0800ec28
 800c4d4:	0800ec56 	.word	0x0800ec56

0800c4d8 <quorem>:
 800c4d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4dc:	6903      	ldr	r3, [r0, #16]
 800c4de:	690c      	ldr	r4, [r1, #16]
 800c4e0:	42a3      	cmp	r3, r4
 800c4e2:	4607      	mov	r7, r0
 800c4e4:	db7e      	blt.n	800c5e4 <quorem+0x10c>
 800c4e6:	3c01      	subs	r4, #1
 800c4e8:	f101 0814 	add.w	r8, r1, #20
 800c4ec:	f100 0514 	add.w	r5, r0, #20
 800c4f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c4f4:	9301      	str	r3, [sp, #4]
 800c4f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c4fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c4fe:	3301      	adds	r3, #1
 800c500:	429a      	cmp	r2, r3
 800c502:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c506:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c50a:	fbb2 f6f3 	udiv	r6, r2, r3
 800c50e:	d331      	bcc.n	800c574 <quorem+0x9c>
 800c510:	f04f 0e00 	mov.w	lr, #0
 800c514:	4640      	mov	r0, r8
 800c516:	46ac      	mov	ip, r5
 800c518:	46f2      	mov	sl, lr
 800c51a:	f850 2b04 	ldr.w	r2, [r0], #4
 800c51e:	b293      	uxth	r3, r2
 800c520:	fb06 e303 	mla	r3, r6, r3, lr
 800c524:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c528:	0c1a      	lsrs	r2, r3, #16
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	ebaa 0303 	sub.w	r3, sl, r3
 800c530:	f8dc a000 	ldr.w	sl, [ip]
 800c534:	fa13 f38a 	uxtah	r3, r3, sl
 800c538:	fb06 220e 	mla	r2, r6, lr, r2
 800c53c:	9300      	str	r3, [sp, #0]
 800c53e:	9b00      	ldr	r3, [sp, #0]
 800c540:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c544:	b292      	uxth	r2, r2
 800c546:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c54a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c54e:	f8bd 3000 	ldrh.w	r3, [sp]
 800c552:	4581      	cmp	r9, r0
 800c554:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c558:	f84c 3b04 	str.w	r3, [ip], #4
 800c55c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c560:	d2db      	bcs.n	800c51a <quorem+0x42>
 800c562:	f855 300b 	ldr.w	r3, [r5, fp]
 800c566:	b92b      	cbnz	r3, 800c574 <quorem+0x9c>
 800c568:	9b01      	ldr	r3, [sp, #4]
 800c56a:	3b04      	subs	r3, #4
 800c56c:	429d      	cmp	r5, r3
 800c56e:	461a      	mov	r2, r3
 800c570:	d32c      	bcc.n	800c5cc <quorem+0xf4>
 800c572:	613c      	str	r4, [r7, #16]
 800c574:	4638      	mov	r0, r7
 800c576:	f001 f9a5 	bl	800d8c4 <__mcmp>
 800c57a:	2800      	cmp	r0, #0
 800c57c:	db22      	blt.n	800c5c4 <quorem+0xec>
 800c57e:	3601      	adds	r6, #1
 800c580:	4629      	mov	r1, r5
 800c582:	2000      	movs	r0, #0
 800c584:	f858 2b04 	ldr.w	r2, [r8], #4
 800c588:	f8d1 c000 	ldr.w	ip, [r1]
 800c58c:	b293      	uxth	r3, r2
 800c58e:	1ac3      	subs	r3, r0, r3
 800c590:	0c12      	lsrs	r2, r2, #16
 800c592:	fa13 f38c 	uxtah	r3, r3, ip
 800c596:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c59a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c59e:	b29b      	uxth	r3, r3
 800c5a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5a4:	45c1      	cmp	r9, r8
 800c5a6:	f841 3b04 	str.w	r3, [r1], #4
 800c5aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c5ae:	d2e9      	bcs.n	800c584 <quorem+0xac>
 800c5b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5b8:	b922      	cbnz	r2, 800c5c4 <quorem+0xec>
 800c5ba:	3b04      	subs	r3, #4
 800c5bc:	429d      	cmp	r5, r3
 800c5be:	461a      	mov	r2, r3
 800c5c0:	d30a      	bcc.n	800c5d8 <quorem+0x100>
 800c5c2:	613c      	str	r4, [r7, #16]
 800c5c4:	4630      	mov	r0, r6
 800c5c6:	b003      	add	sp, #12
 800c5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5cc:	6812      	ldr	r2, [r2, #0]
 800c5ce:	3b04      	subs	r3, #4
 800c5d0:	2a00      	cmp	r2, #0
 800c5d2:	d1ce      	bne.n	800c572 <quorem+0x9a>
 800c5d4:	3c01      	subs	r4, #1
 800c5d6:	e7c9      	b.n	800c56c <quorem+0x94>
 800c5d8:	6812      	ldr	r2, [r2, #0]
 800c5da:	3b04      	subs	r3, #4
 800c5dc:	2a00      	cmp	r2, #0
 800c5de:	d1f0      	bne.n	800c5c2 <quorem+0xea>
 800c5e0:	3c01      	subs	r4, #1
 800c5e2:	e7eb      	b.n	800c5bc <quorem+0xe4>
 800c5e4:	2000      	movs	r0, #0
 800c5e6:	e7ee      	b.n	800c5c6 <quorem+0xee>

0800c5e8 <_dtoa_r>:
 800c5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ec:	ed2d 8b04 	vpush	{d8-d9}
 800c5f0:	69c5      	ldr	r5, [r0, #28]
 800c5f2:	b093      	sub	sp, #76	; 0x4c
 800c5f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c5f8:	ec57 6b10 	vmov	r6, r7, d0
 800c5fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c600:	9107      	str	r1, [sp, #28]
 800c602:	4604      	mov	r4, r0
 800c604:	920a      	str	r2, [sp, #40]	; 0x28
 800c606:	930d      	str	r3, [sp, #52]	; 0x34
 800c608:	b975      	cbnz	r5, 800c628 <_dtoa_r+0x40>
 800c60a:	2010      	movs	r0, #16
 800c60c:	f000 fe2a 	bl	800d264 <malloc>
 800c610:	4602      	mov	r2, r0
 800c612:	61e0      	str	r0, [r4, #28]
 800c614:	b920      	cbnz	r0, 800c620 <_dtoa_r+0x38>
 800c616:	4bae      	ldr	r3, [pc, #696]	; (800c8d0 <_dtoa_r+0x2e8>)
 800c618:	21ef      	movs	r1, #239	; 0xef
 800c61a:	48ae      	ldr	r0, [pc, #696]	; (800c8d4 <_dtoa_r+0x2ec>)
 800c61c:	f7ff ff3e 	bl	800c49c <__assert_func>
 800c620:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c624:	6005      	str	r5, [r0, #0]
 800c626:	60c5      	str	r5, [r0, #12]
 800c628:	69e3      	ldr	r3, [r4, #28]
 800c62a:	6819      	ldr	r1, [r3, #0]
 800c62c:	b151      	cbz	r1, 800c644 <_dtoa_r+0x5c>
 800c62e:	685a      	ldr	r2, [r3, #4]
 800c630:	604a      	str	r2, [r1, #4]
 800c632:	2301      	movs	r3, #1
 800c634:	4093      	lsls	r3, r2
 800c636:	608b      	str	r3, [r1, #8]
 800c638:	4620      	mov	r0, r4
 800c63a:	f000 ff07 	bl	800d44c <_Bfree>
 800c63e:	69e3      	ldr	r3, [r4, #28]
 800c640:	2200      	movs	r2, #0
 800c642:	601a      	str	r2, [r3, #0]
 800c644:	1e3b      	subs	r3, r7, #0
 800c646:	bfbb      	ittet	lt
 800c648:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c64c:	9303      	strlt	r3, [sp, #12]
 800c64e:	2300      	movge	r3, #0
 800c650:	2201      	movlt	r2, #1
 800c652:	bfac      	ite	ge
 800c654:	f8c8 3000 	strge.w	r3, [r8]
 800c658:	f8c8 2000 	strlt.w	r2, [r8]
 800c65c:	4b9e      	ldr	r3, [pc, #632]	; (800c8d8 <_dtoa_r+0x2f0>)
 800c65e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c662:	ea33 0308 	bics.w	r3, r3, r8
 800c666:	d11b      	bne.n	800c6a0 <_dtoa_r+0xb8>
 800c668:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c66a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c66e:	6013      	str	r3, [r2, #0]
 800c670:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c674:	4333      	orrs	r3, r6
 800c676:	f000 8593 	beq.w	800d1a0 <_dtoa_r+0xbb8>
 800c67a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c67c:	b963      	cbnz	r3, 800c698 <_dtoa_r+0xb0>
 800c67e:	4b97      	ldr	r3, [pc, #604]	; (800c8dc <_dtoa_r+0x2f4>)
 800c680:	e027      	b.n	800c6d2 <_dtoa_r+0xea>
 800c682:	4b97      	ldr	r3, [pc, #604]	; (800c8e0 <_dtoa_r+0x2f8>)
 800c684:	9300      	str	r3, [sp, #0]
 800c686:	3308      	adds	r3, #8
 800c688:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c68a:	6013      	str	r3, [r2, #0]
 800c68c:	9800      	ldr	r0, [sp, #0]
 800c68e:	b013      	add	sp, #76	; 0x4c
 800c690:	ecbd 8b04 	vpop	{d8-d9}
 800c694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c698:	4b90      	ldr	r3, [pc, #576]	; (800c8dc <_dtoa_r+0x2f4>)
 800c69a:	9300      	str	r3, [sp, #0]
 800c69c:	3303      	adds	r3, #3
 800c69e:	e7f3      	b.n	800c688 <_dtoa_r+0xa0>
 800c6a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	ec51 0b17 	vmov	r0, r1, d7
 800c6aa:	eeb0 8a47 	vmov.f32	s16, s14
 800c6ae:	eef0 8a67 	vmov.f32	s17, s15
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	f7f4 fa08 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6b8:	4681      	mov	r9, r0
 800c6ba:	b160      	cbz	r0, 800c6d6 <_dtoa_r+0xee>
 800c6bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c6be:	2301      	movs	r3, #1
 800c6c0:	6013      	str	r3, [r2, #0]
 800c6c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	f000 8568 	beq.w	800d19a <_dtoa_r+0xbb2>
 800c6ca:	4b86      	ldr	r3, [pc, #536]	; (800c8e4 <_dtoa_r+0x2fc>)
 800c6cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c6ce:	6013      	str	r3, [r2, #0]
 800c6d0:	3b01      	subs	r3, #1
 800c6d2:	9300      	str	r3, [sp, #0]
 800c6d4:	e7da      	b.n	800c68c <_dtoa_r+0xa4>
 800c6d6:	aa10      	add	r2, sp, #64	; 0x40
 800c6d8:	a911      	add	r1, sp, #68	; 0x44
 800c6da:	4620      	mov	r0, r4
 800c6dc:	eeb0 0a48 	vmov.f32	s0, s16
 800c6e0:	eef0 0a68 	vmov.f32	s1, s17
 800c6e4:	f001 f994 	bl	800da10 <__d2b>
 800c6e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c6ec:	4682      	mov	sl, r0
 800c6ee:	2d00      	cmp	r5, #0
 800c6f0:	d07f      	beq.n	800c7f2 <_dtoa_r+0x20a>
 800c6f2:	ee18 3a90 	vmov	r3, s17
 800c6f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c6fe:	ec51 0b18 	vmov	r0, r1, d8
 800c702:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c706:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c70a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c70e:	4619      	mov	r1, r3
 800c710:	2200      	movs	r2, #0
 800c712:	4b75      	ldr	r3, [pc, #468]	; (800c8e8 <_dtoa_r+0x300>)
 800c714:	f7f3 fdb8 	bl	8000288 <__aeabi_dsub>
 800c718:	a367      	add	r3, pc, #412	; (adr r3, 800c8b8 <_dtoa_r+0x2d0>)
 800c71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71e:	f7f3 ff6b 	bl	80005f8 <__aeabi_dmul>
 800c722:	a367      	add	r3, pc, #412	; (adr r3, 800c8c0 <_dtoa_r+0x2d8>)
 800c724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c728:	f7f3 fdb0 	bl	800028c <__adddf3>
 800c72c:	4606      	mov	r6, r0
 800c72e:	4628      	mov	r0, r5
 800c730:	460f      	mov	r7, r1
 800c732:	f7f3 fef7 	bl	8000524 <__aeabi_i2d>
 800c736:	a364      	add	r3, pc, #400	; (adr r3, 800c8c8 <_dtoa_r+0x2e0>)
 800c738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c73c:	f7f3 ff5c 	bl	80005f8 <__aeabi_dmul>
 800c740:	4602      	mov	r2, r0
 800c742:	460b      	mov	r3, r1
 800c744:	4630      	mov	r0, r6
 800c746:	4639      	mov	r1, r7
 800c748:	f7f3 fda0 	bl	800028c <__adddf3>
 800c74c:	4606      	mov	r6, r0
 800c74e:	460f      	mov	r7, r1
 800c750:	f7f4 fa02 	bl	8000b58 <__aeabi_d2iz>
 800c754:	2200      	movs	r2, #0
 800c756:	4683      	mov	fp, r0
 800c758:	2300      	movs	r3, #0
 800c75a:	4630      	mov	r0, r6
 800c75c:	4639      	mov	r1, r7
 800c75e:	f7f4 f9bd 	bl	8000adc <__aeabi_dcmplt>
 800c762:	b148      	cbz	r0, 800c778 <_dtoa_r+0x190>
 800c764:	4658      	mov	r0, fp
 800c766:	f7f3 fedd 	bl	8000524 <__aeabi_i2d>
 800c76a:	4632      	mov	r2, r6
 800c76c:	463b      	mov	r3, r7
 800c76e:	f7f4 f9ab 	bl	8000ac8 <__aeabi_dcmpeq>
 800c772:	b908      	cbnz	r0, 800c778 <_dtoa_r+0x190>
 800c774:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c778:	f1bb 0f16 	cmp.w	fp, #22
 800c77c:	d857      	bhi.n	800c82e <_dtoa_r+0x246>
 800c77e:	4b5b      	ldr	r3, [pc, #364]	; (800c8ec <_dtoa_r+0x304>)
 800c780:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c788:	ec51 0b18 	vmov	r0, r1, d8
 800c78c:	f7f4 f9a6 	bl	8000adc <__aeabi_dcmplt>
 800c790:	2800      	cmp	r0, #0
 800c792:	d04e      	beq.n	800c832 <_dtoa_r+0x24a>
 800c794:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c798:	2300      	movs	r3, #0
 800c79a:	930c      	str	r3, [sp, #48]	; 0x30
 800c79c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c79e:	1b5b      	subs	r3, r3, r5
 800c7a0:	1e5a      	subs	r2, r3, #1
 800c7a2:	bf45      	ittet	mi
 800c7a4:	f1c3 0301 	rsbmi	r3, r3, #1
 800c7a8:	9305      	strmi	r3, [sp, #20]
 800c7aa:	2300      	movpl	r3, #0
 800c7ac:	2300      	movmi	r3, #0
 800c7ae:	9206      	str	r2, [sp, #24]
 800c7b0:	bf54      	ite	pl
 800c7b2:	9305      	strpl	r3, [sp, #20]
 800c7b4:	9306      	strmi	r3, [sp, #24]
 800c7b6:	f1bb 0f00 	cmp.w	fp, #0
 800c7ba:	db3c      	blt.n	800c836 <_dtoa_r+0x24e>
 800c7bc:	9b06      	ldr	r3, [sp, #24]
 800c7be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c7c2:	445b      	add	r3, fp
 800c7c4:	9306      	str	r3, [sp, #24]
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	9308      	str	r3, [sp, #32]
 800c7ca:	9b07      	ldr	r3, [sp, #28]
 800c7cc:	2b09      	cmp	r3, #9
 800c7ce:	d868      	bhi.n	800c8a2 <_dtoa_r+0x2ba>
 800c7d0:	2b05      	cmp	r3, #5
 800c7d2:	bfc4      	itt	gt
 800c7d4:	3b04      	subgt	r3, #4
 800c7d6:	9307      	strgt	r3, [sp, #28]
 800c7d8:	9b07      	ldr	r3, [sp, #28]
 800c7da:	f1a3 0302 	sub.w	r3, r3, #2
 800c7de:	bfcc      	ite	gt
 800c7e0:	2500      	movgt	r5, #0
 800c7e2:	2501      	movle	r5, #1
 800c7e4:	2b03      	cmp	r3, #3
 800c7e6:	f200 8085 	bhi.w	800c8f4 <_dtoa_r+0x30c>
 800c7ea:	e8df f003 	tbb	[pc, r3]
 800c7ee:	3b2e      	.short	0x3b2e
 800c7f0:	5839      	.short	0x5839
 800c7f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c7f6:	441d      	add	r5, r3
 800c7f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c7fc:	2b20      	cmp	r3, #32
 800c7fe:	bfc1      	itttt	gt
 800c800:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c804:	fa08 f803 	lslgt.w	r8, r8, r3
 800c808:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c80c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c810:	bfd6      	itet	le
 800c812:	f1c3 0320 	rsble	r3, r3, #32
 800c816:	ea48 0003 	orrgt.w	r0, r8, r3
 800c81a:	fa06 f003 	lslle.w	r0, r6, r3
 800c81e:	f7f3 fe71 	bl	8000504 <__aeabi_ui2d>
 800c822:	2201      	movs	r2, #1
 800c824:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c828:	3d01      	subs	r5, #1
 800c82a:	920e      	str	r2, [sp, #56]	; 0x38
 800c82c:	e76f      	b.n	800c70e <_dtoa_r+0x126>
 800c82e:	2301      	movs	r3, #1
 800c830:	e7b3      	b.n	800c79a <_dtoa_r+0x1b2>
 800c832:	900c      	str	r0, [sp, #48]	; 0x30
 800c834:	e7b2      	b.n	800c79c <_dtoa_r+0x1b4>
 800c836:	9b05      	ldr	r3, [sp, #20]
 800c838:	eba3 030b 	sub.w	r3, r3, fp
 800c83c:	9305      	str	r3, [sp, #20]
 800c83e:	f1cb 0300 	rsb	r3, fp, #0
 800c842:	9308      	str	r3, [sp, #32]
 800c844:	2300      	movs	r3, #0
 800c846:	930b      	str	r3, [sp, #44]	; 0x2c
 800c848:	e7bf      	b.n	800c7ca <_dtoa_r+0x1e2>
 800c84a:	2300      	movs	r3, #0
 800c84c:	9309      	str	r3, [sp, #36]	; 0x24
 800c84e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c850:	2b00      	cmp	r3, #0
 800c852:	dc52      	bgt.n	800c8fa <_dtoa_r+0x312>
 800c854:	2301      	movs	r3, #1
 800c856:	9301      	str	r3, [sp, #4]
 800c858:	9304      	str	r3, [sp, #16]
 800c85a:	461a      	mov	r2, r3
 800c85c:	920a      	str	r2, [sp, #40]	; 0x28
 800c85e:	e00b      	b.n	800c878 <_dtoa_r+0x290>
 800c860:	2301      	movs	r3, #1
 800c862:	e7f3      	b.n	800c84c <_dtoa_r+0x264>
 800c864:	2300      	movs	r3, #0
 800c866:	9309      	str	r3, [sp, #36]	; 0x24
 800c868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c86a:	445b      	add	r3, fp
 800c86c:	9301      	str	r3, [sp, #4]
 800c86e:	3301      	adds	r3, #1
 800c870:	2b01      	cmp	r3, #1
 800c872:	9304      	str	r3, [sp, #16]
 800c874:	bfb8      	it	lt
 800c876:	2301      	movlt	r3, #1
 800c878:	69e0      	ldr	r0, [r4, #28]
 800c87a:	2100      	movs	r1, #0
 800c87c:	2204      	movs	r2, #4
 800c87e:	f102 0614 	add.w	r6, r2, #20
 800c882:	429e      	cmp	r6, r3
 800c884:	d93d      	bls.n	800c902 <_dtoa_r+0x31a>
 800c886:	6041      	str	r1, [r0, #4]
 800c888:	4620      	mov	r0, r4
 800c88a:	f000 fd9f 	bl	800d3cc <_Balloc>
 800c88e:	9000      	str	r0, [sp, #0]
 800c890:	2800      	cmp	r0, #0
 800c892:	d139      	bne.n	800c908 <_dtoa_r+0x320>
 800c894:	4b16      	ldr	r3, [pc, #88]	; (800c8f0 <_dtoa_r+0x308>)
 800c896:	4602      	mov	r2, r0
 800c898:	f240 11af 	movw	r1, #431	; 0x1af
 800c89c:	e6bd      	b.n	800c61a <_dtoa_r+0x32>
 800c89e:	2301      	movs	r3, #1
 800c8a0:	e7e1      	b.n	800c866 <_dtoa_r+0x27e>
 800c8a2:	2501      	movs	r5, #1
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	9307      	str	r3, [sp, #28]
 800c8a8:	9509      	str	r5, [sp, #36]	; 0x24
 800c8aa:	f04f 33ff 	mov.w	r3, #4294967295
 800c8ae:	9301      	str	r3, [sp, #4]
 800c8b0:	9304      	str	r3, [sp, #16]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	2312      	movs	r3, #18
 800c8b6:	e7d1      	b.n	800c85c <_dtoa_r+0x274>
 800c8b8:	636f4361 	.word	0x636f4361
 800c8bc:	3fd287a7 	.word	0x3fd287a7
 800c8c0:	8b60c8b3 	.word	0x8b60c8b3
 800c8c4:	3fc68a28 	.word	0x3fc68a28
 800c8c8:	509f79fb 	.word	0x509f79fb
 800c8cc:	3fd34413 	.word	0x3fd34413
 800c8d0:	0800eb78 	.word	0x0800eb78
 800c8d4:	0800ec64 	.word	0x0800ec64
 800c8d8:	7ff00000 	.word	0x7ff00000
 800c8dc:	0800ec60 	.word	0x0800ec60
 800c8e0:	0800ec57 	.word	0x0800ec57
 800c8e4:	0800ebf8 	.word	0x0800ebf8
 800c8e8:	3ff80000 	.word	0x3ff80000
 800c8ec:	0800ed50 	.word	0x0800ed50
 800c8f0:	0800ecbc 	.word	0x0800ecbc
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	9309      	str	r3, [sp, #36]	; 0x24
 800c8f8:	e7d7      	b.n	800c8aa <_dtoa_r+0x2c2>
 800c8fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8fc:	9301      	str	r3, [sp, #4]
 800c8fe:	9304      	str	r3, [sp, #16]
 800c900:	e7ba      	b.n	800c878 <_dtoa_r+0x290>
 800c902:	3101      	adds	r1, #1
 800c904:	0052      	lsls	r2, r2, #1
 800c906:	e7ba      	b.n	800c87e <_dtoa_r+0x296>
 800c908:	69e3      	ldr	r3, [r4, #28]
 800c90a:	9a00      	ldr	r2, [sp, #0]
 800c90c:	601a      	str	r2, [r3, #0]
 800c90e:	9b04      	ldr	r3, [sp, #16]
 800c910:	2b0e      	cmp	r3, #14
 800c912:	f200 80a8 	bhi.w	800ca66 <_dtoa_r+0x47e>
 800c916:	2d00      	cmp	r5, #0
 800c918:	f000 80a5 	beq.w	800ca66 <_dtoa_r+0x47e>
 800c91c:	f1bb 0f00 	cmp.w	fp, #0
 800c920:	dd38      	ble.n	800c994 <_dtoa_r+0x3ac>
 800c922:	4bc0      	ldr	r3, [pc, #768]	; (800cc24 <_dtoa_r+0x63c>)
 800c924:	f00b 020f 	and.w	r2, fp, #15
 800c928:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c92c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c930:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c934:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c938:	d019      	beq.n	800c96e <_dtoa_r+0x386>
 800c93a:	4bbb      	ldr	r3, [pc, #748]	; (800cc28 <_dtoa_r+0x640>)
 800c93c:	ec51 0b18 	vmov	r0, r1, d8
 800c940:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c944:	f7f3 ff82 	bl	800084c <__aeabi_ddiv>
 800c948:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c94c:	f008 080f 	and.w	r8, r8, #15
 800c950:	2503      	movs	r5, #3
 800c952:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800cc28 <_dtoa_r+0x640>
 800c956:	f1b8 0f00 	cmp.w	r8, #0
 800c95a:	d10a      	bne.n	800c972 <_dtoa_r+0x38a>
 800c95c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c960:	4632      	mov	r2, r6
 800c962:	463b      	mov	r3, r7
 800c964:	f7f3 ff72 	bl	800084c <__aeabi_ddiv>
 800c968:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c96c:	e02b      	b.n	800c9c6 <_dtoa_r+0x3de>
 800c96e:	2502      	movs	r5, #2
 800c970:	e7ef      	b.n	800c952 <_dtoa_r+0x36a>
 800c972:	f018 0f01 	tst.w	r8, #1
 800c976:	d008      	beq.n	800c98a <_dtoa_r+0x3a2>
 800c978:	4630      	mov	r0, r6
 800c97a:	4639      	mov	r1, r7
 800c97c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c980:	f7f3 fe3a 	bl	80005f8 <__aeabi_dmul>
 800c984:	3501      	adds	r5, #1
 800c986:	4606      	mov	r6, r0
 800c988:	460f      	mov	r7, r1
 800c98a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c98e:	f109 0908 	add.w	r9, r9, #8
 800c992:	e7e0      	b.n	800c956 <_dtoa_r+0x36e>
 800c994:	f000 809f 	beq.w	800cad6 <_dtoa_r+0x4ee>
 800c998:	f1cb 0600 	rsb	r6, fp, #0
 800c99c:	4ba1      	ldr	r3, [pc, #644]	; (800cc24 <_dtoa_r+0x63c>)
 800c99e:	4fa2      	ldr	r7, [pc, #648]	; (800cc28 <_dtoa_r+0x640>)
 800c9a0:	f006 020f 	and.w	r2, r6, #15
 800c9a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ac:	ec51 0b18 	vmov	r0, r1, d8
 800c9b0:	f7f3 fe22 	bl	80005f8 <__aeabi_dmul>
 800c9b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9b8:	1136      	asrs	r6, r6, #4
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	2502      	movs	r5, #2
 800c9be:	2e00      	cmp	r6, #0
 800c9c0:	d17e      	bne.n	800cac0 <_dtoa_r+0x4d8>
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d1d0      	bne.n	800c968 <_dtoa_r+0x380>
 800c9c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9c8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	f000 8084 	beq.w	800cada <_dtoa_r+0x4f2>
 800c9d2:	4b96      	ldr	r3, [pc, #600]	; (800cc2c <_dtoa_r+0x644>)
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	4640      	mov	r0, r8
 800c9d8:	4649      	mov	r1, r9
 800c9da:	f7f4 f87f 	bl	8000adc <__aeabi_dcmplt>
 800c9de:	2800      	cmp	r0, #0
 800c9e0:	d07b      	beq.n	800cada <_dtoa_r+0x4f2>
 800c9e2:	9b04      	ldr	r3, [sp, #16]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d078      	beq.n	800cada <_dtoa_r+0x4f2>
 800c9e8:	9b01      	ldr	r3, [sp, #4]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	dd39      	ble.n	800ca62 <_dtoa_r+0x47a>
 800c9ee:	4b90      	ldr	r3, [pc, #576]	; (800cc30 <_dtoa_r+0x648>)
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	4640      	mov	r0, r8
 800c9f4:	4649      	mov	r1, r9
 800c9f6:	f7f3 fdff 	bl	80005f8 <__aeabi_dmul>
 800c9fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9fe:	9e01      	ldr	r6, [sp, #4]
 800ca00:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ca04:	3501      	adds	r5, #1
 800ca06:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ca0a:	4628      	mov	r0, r5
 800ca0c:	f7f3 fd8a 	bl	8000524 <__aeabi_i2d>
 800ca10:	4642      	mov	r2, r8
 800ca12:	464b      	mov	r3, r9
 800ca14:	f7f3 fdf0 	bl	80005f8 <__aeabi_dmul>
 800ca18:	4b86      	ldr	r3, [pc, #536]	; (800cc34 <_dtoa_r+0x64c>)
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	f7f3 fc36 	bl	800028c <__adddf3>
 800ca20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ca24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca28:	9303      	str	r3, [sp, #12]
 800ca2a:	2e00      	cmp	r6, #0
 800ca2c:	d158      	bne.n	800cae0 <_dtoa_r+0x4f8>
 800ca2e:	4b82      	ldr	r3, [pc, #520]	; (800cc38 <_dtoa_r+0x650>)
 800ca30:	2200      	movs	r2, #0
 800ca32:	4640      	mov	r0, r8
 800ca34:	4649      	mov	r1, r9
 800ca36:	f7f3 fc27 	bl	8000288 <__aeabi_dsub>
 800ca3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca3e:	4680      	mov	r8, r0
 800ca40:	4689      	mov	r9, r1
 800ca42:	f7f4 f869 	bl	8000b18 <__aeabi_dcmpgt>
 800ca46:	2800      	cmp	r0, #0
 800ca48:	f040 8296 	bne.w	800cf78 <_dtoa_r+0x990>
 800ca4c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ca50:	4640      	mov	r0, r8
 800ca52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca56:	4649      	mov	r1, r9
 800ca58:	f7f4 f840 	bl	8000adc <__aeabi_dcmplt>
 800ca5c:	2800      	cmp	r0, #0
 800ca5e:	f040 8289 	bne.w	800cf74 <_dtoa_r+0x98c>
 800ca62:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ca66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	f2c0 814e 	blt.w	800cd0a <_dtoa_r+0x722>
 800ca6e:	f1bb 0f0e 	cmp.w	fp, #14
 800ca72:	f300 814a 	bgt.w	800cd0a <_dtoa_r+0x722>
 800ca76:	4b6b      	ldr	r3, [pc, #428]	; (800cc24 <_dtoa_r+0x63c>)
 800ca78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ca7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ca80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	f280 80dc 	bge.w	800cc40 <_dtoa_r+0x658>
 800ca88:	9b04      	ldr	r3, [sp, #16]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	f300 80d8 	bgt.w	800cc40 <_dtoa_r+0x658>
 800ca90:	f040 826f 	bne.w	800cf72 <_dtoa_r+0x98a>
 800ca94:	4b68      	ldr	r3, [pc, #416]	; (800cc38 <_dtoa_r+0x650>)
 800ca96:	2200      	movs	r2, #0
 800ca98:	4640      	mov	r0, r8
 800ca9a:	4649      	mov	r1, r9
 800ca9c:	f7f3 fdac 	bl	80005f8 <__aeabi_dmul>
 800caa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800caa4:	f7f4 f82e 	bl	8000b04 <__aeabi_dcmpge>
 800caa8:	9e04      	ldr	r6, [sp, #16]
 800caaa:	4637      	mov	r7, r6
 800caac:	2800      	cmp	r0, #0
 800caae:	f040 8245 	bne.w	800cf3c <_dtoa_r+0x954>
 800cab2:	9d00      	ldr	r5, [sp, #0]
 800cab4:	2331      	movs	r3, #49	; 0x31
 800cab6:	f805 3b01 	strb.w	r3, [r5], #1
 800caba:	f10b 0b01 	add.w	fp, fp, #1
 800cabe:	e241      	b.n	800cf44 <_dtoa_r+0x95c>
 800cac0:	07f2      	lsls	r2, r6, #31
 800cac2:	d505      	bpl.n	800cad0 <_dtoa_r+0x4e8>
 800cac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cac8:	f7f3 fd96 	bl	80005f8 <__aeabi_dmul>
 800cacc:	3501      	adds	r5, #1
 800cace:	2301      	movs	r3, #1
 800cad0:	1076      	asrs	r6, r6, #1
 800cad2:	3708      	adds	r7, #8
 800cad4:	e773      	b.n	800c9be <_dtoa_r+0x3d6>
 800cad6:	2502      	movs	r5, #2
 800cad8:	e775      	b.n	800c9c6 <_dtoa_r+0x3de>
 800cada:	9e04      	ldr	r6, [sp, #16]
 800cadc:	465f      	mov	r7, fp
 800cade:	e792      	b.n	800ca06 <_dtoa_r+0x41e>
 800cae0:	9900      	ldr	r1, [sp, #0]
 800cae2:	4b50      	ldr	r3, [pc, #320]	; (800cc24 <_dtoa_r+0x63c>)
 800cae4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cae8:	4431      	add	r1, r6
 800caea:	9102      	str	r1, [sp, #8]
 800caec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800caee:	eeb0 9a47 	vmov.f32	s18, s14
 800caf2:	eef0 9a67 	vmov.f32	s19, s15
 800caf6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cafa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cafe:	2900      	cmp	r1, #0
 800cb00:	d044      	beq.n	800cb8c <_dtoa_r+0x5a4>
 800cb02:	494e      	ldr	r1, [pc, #312]	; (800cc3c <_dtoa_r+0x654>)
 800cb04:	2000      	movs	r0, #0
 800cb06:	f7f3 fea1 	bl	800084c <__aeabi_ddiv>
 800cb0a:	ec53 2b19 	vmov	r2, r3, d9
 800cb0e:	f7f3 fbbb 	bl	8000288 <__aeabi_dsub>
 800cb12:	9d00      	ldr	r5, [sp, #0]
 800cb14:	ec41 0b19 	vmov	d9, r0, r1
 800cb18:	4649      	mov	r1, r9
 800cb1a:	4640      	mov	r0, r8
 800cb1c:	f7f4 f81c 	bl	8000b58 <__aeabi_d2iz>
 800cb20:	4606      	mov	r6, r0
 800cb22:	f7f3 fcff 	bl	8000524 <__aeabi_i2d>
 800cb26:	4602      	mov	r2, r0
 800cb28:	460b      	mov	r3, r1
 800cb2a:	4640      	mov	r0, r8
 800cb2c:	4649      	mov	r1, r9
 800cb2e:	f7f3 fbab 	bl	8000288 <__aeabi_dsub>
 800cb32:	3630      	adds	r6, #48	; 0x30
 800cb34:	f805 6b01 	strb.w	r6, [r5], #1
 800cb38:	ec53 2b19 	vmov	r2, r3, d9
 800cb3c:	4680      	mov	r8, r0
 800cb3e:	4689      	mov	r9, r1
 800cb40:	f7f3 ffcc 	bl	8000adc <__aeabi_dcmplt>
 800cb44:	2800      	cmp	r0, #0
 800cb46:	d164      	bne.n	800cc12 <_dtoa_r+0x62a>
 800cb48:	4642      	mov	r2, r8
 800cb4a:	464b      	mov	r3, r9
 800cb4c:	4937      	ldr	r1, [pc, #220]	; (800cc2c <_dtoa_r+0x644>)
 800cb4e:	2000      	movs	r0, #0
 800cb50:	f7f3 fb9a 	bl	8000288 <__aeabi_dsub>
 800cb54:	ec53 2b19 	vmov	r2, r3, d9
 800cb58:	f7f3 ffc0 	bl	8000adc <__aeabi_dcmplt>
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	f040 80b6 	bne.w	800ccce <_dtoa_r+0x6e6>
 800cb62:	9b02      	ldr	r3, [sp, #8]
 800cb64:	429d      	cmp	r5, r3
 800cb66:	f43f af7c 	beq.w	800ca62 <_dtoa_r+0x47a>
 800cb6a:	4b31      	ldr	r3, [pc, #196]	; (800cc30 <_dtoa_r+0x648>)
 800cb6c:	ec51 0b19 	vmov	r0, r1, d9
 800cb70:	2200      	movs	r2, #0
 800cb72:	f7f3 fd41 	bl	80005f8 <__aeabi_dmul>
 800cb76:	4b2e      	ldr	r3, [pc, #184]	; (800cc30 <_dtoa_r+0x648>)
 800cb78:	ec41 0b19 	vmov	d9, r0, r1
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	4640      	mov	r0, r8
 800cb80:	4649      	mov	r1, r9
 800cb82:	f7f3 fd39 	bl	80005f8 <__aeabi_dmul>
 800cb86:	4680      	mov	r8, r0
 800cb88:	4689      	mov	r9, r1
 800cb8a:	e7c5      	b.n	800cb18 <_dtoa_r+0x530>
 800cb8c:	ec51 0b17 	vmov	r0, r1, d7
 800cb90:	f7f3 fd32 	bl	80005f8 <__aeabi_dmul>
 800cb94:	9b02      	ldr	r3, [sp, #8]
 800cb96:	9d00      	ldr	r5, [sp, #0]
 800cb98:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb9a:	ec41 0b19 	vmov	d9, r0, r1
 800cb9e:	4649      	mov	r1, r9
 800cba0:	4640      	mov	r0, r8
 800cba2:	f7f3 ffd9 	bl	8000b58 <__aeabi_d2iz>
 800cba6:	4606      	mov	r6, r0
 800cba8:	f7f3 fcbc 	bl	8000524 <__aeabi_i2d>
 800cbac:	3630      	adds	r6, #48	; 0x30
 800cbae:	4602      	mov	r2, r0
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	4640      	mov	r0, r8
 800cbb4:	4649      	mov	r1, r9
 800cbb6:	f7f3 fb67 	bl	8000288 <__aeabi_dsub>
 800cbba:	f805 6b01 	strb.w	r6, [r5], #1
 800cbbe:	9b02      	ldr	r3, [sp, #8]
 800cbc0:	429d      	cmp	r5, r3
 800cbc2:	4680      	mov	r8, r0
 800cbc4:	4689      	mov	r9, r1
 800cbc6:	f04f 0200 	mov.w	r2, #0
 800cbca:	d124      	bne.n	800cc16 <_dtoa_r+0x62e>
 800cbcc:	4b1b      	ldr	r3, [pc, #108]	; (800cc3c <_dtoa_r+0x654>)
 800cbce:	ec51 0b19 	vmov	r0, r1, d9
 800cbd2:	f7f3 fb5b 	bl	800028c <__adddf3>
 800cbd6:	4602      	mov	r2, r0
 800cbd8:	460b      	mov	r3, r1
 800cbda:	4640      	mov	r0, r8
 800cbdc:	4649      	mov	r1, r9
 800cbde:	f7f3 ff9b 	bl	8000b18 <__aeabi_dcmpgt>
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	d173      	bne.n	800ccce <_dtoa_r+0x6e6>
 800cbe6:	ec53 2b19 	vmov	r2, r3, d9
 800cbea:	4914      	ldr	r1, [pc, #80]	; (800cc3c <_dtoa_r+0x654>)
 800cbec:	2000      	movs	r0, #0
 800cbee:	f7f3 fb4b 	bl	8000288 <__aeabi_dsub>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	4640      	mov	r0, r8
 800cbf8:	4649      	mov	r1, r9
 800cbfa:	f7f3 ff6f 	bl	8000adc <__aeabi_dcmplt>
 800cbfe:	2800      	cmp	r0, #0
 800cc00:	f43f af2f 	beq.w	800ca62 <_dtoa_r+0x47a>
 800cc04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cc06:	1e6b      	subs	r3, r5, #1
 800cc08:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cc0e:	2b30      	cmp	r3, #48	; 0x30
 800cc10:	d0f8      	beq.n	800cc04 <_dtoa_r+0x61c>
 800cc12:	46bb      	mov	fp, r7
 800cc14:	e04a      	b.n	800ccac <_dtoa_r+0x6c4>
 800cc16:	4b06      	ldr	r3, [pc, #24]	; (800cc30 <_dtoa_r+0x648>)
 800cc18:	f7f3 fcee 	bl	80005f8 <__aeabi_dmul>
 800cc1c:	4680      	mov	r8, r0
 800cc1e:	4689      	mov	r9, r1
 800cc20:	e7bd      	b.n	800cb9e <_dtoa_r+0x5b6>
 800cc22:	bf00      	nop
 800cc24:	0800ed50 	.word	0x0800ed50
 800cc28:	0800ed28 	.word	0x0800ed28
 800cc2c:	3ff00000 	.word	0x3ff00000
 800cc30:	40240000 	.word	0x40240000
 800cc34:	401c0000 	.word	0x401c0000
 800cc38:	40140000 	.word	0x40140000
 800cc3c:	3fe00000 	.word	0x3fe00000
 800cc40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cc44:	9d00      	ldr	r5, [sp, #0]
 800cc46:	4642      	mov	r2, r8
 800cc48:	464b      	mov	r3, r9
 800cc4a:	4630      	mov	r0, r6
 800cc4c:	4639      	mov	r1, r7
 800cc4e:	f7f3 fdfd 	bl	800084c <__aeabi_ddiv>
 800cc52:	f7f3 ff81 	bl	8000b58 <__aeabi_d2iz>
 800cc56:	9001      	str	r0, [sp, #4]
 800cc58:	f7f3 fc64 	bl	8000524 <__aeabi_i2d>
 800cc5c:	4642      	mov	r2, r8
 800cc5e:	464b      	mov	r3, r9
 800cc60:	f7f3 fcca 	bl	80005f8 <__aeabi_dmul>
 800cc64:	4602      	mov	r2, r0
 800cc66:	460b      	mov	r3, r1
 800cc68:	4630      	mov	r0, r6
 800cc6a:	4639      	mov	r1, r7
 800cc6c:	f7f3 fb0c 	bl	8000288 <__aeabi_dsub>
 800cc70:	9e01      	ldr	r6, [sp, #4]
 800cc72:	9f04      	ldr	r7, [sp, #16]
 800cc74:	3630      	adds	r6, #48	; 0x30
 800cc76:	f805 6b01 	strb.w	r6, [r5], #1
 800cc7a:	9e00      	ldr	r6, [sp, #0]
 800cc7c:	1bae      	subs	r6, r5, r6
 800cc7e:	42b7      	cmp	r7, r6
 800cc80:	4602      	mov	r2, r0
 800cc82:	460b      	mov	r3, r1
 800cc84:	d134      	bne.n	800ccf0 <_dtoa_r+0x708>
 800cc86:	f7f3 fb01 	bl	800028c <__adddf3>
 800cc8a:	4642      	mov	r2, r8
 800cc8c:	464b      	mov	r3, r9
 800cc8e:	4606      	mov	r6, r0
 800cc90:	460f      	mov	r7, r1
 800cc92:	f7f3 ff41 	bl	8000b18 <__aeabi_dcmpgt>
 800cc96:	b9c8      	cbnz	r0, 800cccc <_dtoa_r+0x6e4>
 800cc98:	4642      	mov	r2, r8
 800cc9a:	464b      	mov	r3, r9
 800cc9c:	4630      	mov	r0, r6
 800cc9e:	4639      	mov	r1, r7
 800cca0:	f7f3 ff12 	bl	8000ac8 <__aeabi_dcmpeq>
 800cca4:	b110      	cbz	r0, 800ccac <_dtoa_r+0x6c4>
 800cca6:	9b01      	ldr	r3, [sp, #4]
 800cca8:	07db      	lsls	r3, r3, #31
 800ccaa:	d40f      	bmi.n	800cccc <_dtoa_r+0x6e4>
 800ccac:	4651      	mov	r1, sl
 800ccae:	4620      	mov	r0, r4
 800ccb0:	f000 fbcc 	bl	800d44c <_Bfree>
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ccb8:	702b      	strb	r3, [r5, #0]
 800ccba:	f10b 0301 	add.w	r3, fp, #1
 800ccbe:	6013      	str	r3, [r2, #0]
 800ccc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	f43f ace2 	beq.w	800c68c <_dtoa_r+0xa4>
 800ccc8:	601d      	str	r5, [r3, #0]
 800ccca:	e4df      	b.n	800c68c <_dtoa_r+0xa4>
 800cccc:	465f      	mov	r7, fp
 800ccce:	462b      	mov	r3, r5
 800ccd0:	461d      	mov	r5, r3
 800ccd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccd6:	2a39      	cmp	r2, #57	; 0x39
 800ccd8:	d106      	bne.n	800cce8 <_dtoa_r+0x700>
 800ccda:	9a00      	ldr	r2, [sp, #0]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d1f7      	bne.n	800ccd0 <_dtoa_r+0x6e8>
 800cce0:	9900      	ldr	r1, [sp, #0]
 800cce2:	2230      	movs	r2, #48	; 0x30
 800cce4:	3701      	adds	r7, #1
 800cce6:	700a      	strb	r2, [r1, #0]
 800cce8:	781a      	ldrb	r2, [r3, #0]
 800ccea:	3201      	adds	r2, #1
 800ccec:	701a      	strb	r2, [r3, #0]
 800ccee:	e790      	b.n	800cc12 <_dtoa_r+0x62a>
 800ccf0:	4ba3      	ldr	r3, [pc, #652]	; (800cf80 <_dtoa_r+0x998>)
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	f7f3 fc80 	bl	80005f8 <__aeabi_dmul>
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	4606      	mov	r6, r0
 800ccfe:	460f      	mov	r7, r1
 800cd00:	f7f3 fee2 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd04:	2800      	cmp	r0, #0
 800cd06:	d09e      	beq.n	800cc46 <_dtoa_r+0x65e>
 800cd08:	e7d0      	b.n	800ccac <_dtoa_r+0x6c4>
 800cd0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd0c:	2a00      	cmp	r2, #0
 800cd0e:	f000 80ca 	beq.w	800cea6 <_dtoa_r+0x8be>
 800cd12:	9a07      	ldr	r2, [sp, #28]
 800cd14:	2a01      	cmp	r2, #1
 800cd16:	f300 80ad 	bgt.w	800ce74 <_dtoa_r+0x88c>
 800cd1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd1c:	2a00      	cmp	r2, #0
 800cd1e:	f000 80a5 	beq.w	800ce6c <_dtoa_r+0x884>
 800cd22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cd26:	9e08      	ldr	r6, [sp, #32]
 800cd28:	9d05      	ldr	r5, [sp, #20]
 800cd2a:	9a05      	ldr	r2, [sp, #20]
 800cd2c:	441a      	add	r2, r3
 800cd2e:	9205      	str	r2, [sp, #20]
 800cd30:	9a06      	ldr	r2, [sp, #24]
 800cd32:	2101      	movs	r1, #1
 800cd34:	441a      	add	r2, r3
 800cd36:	4620      	mov	r0, r4
 800cd38:	9206      	str	r2, [sp, #24]
 800cd3a:	f000 fc3d 	bl	800d5b8 <__i2b>
 800cd3e:	4607      	mov	r7, r0
 800cd40:	b165      	cbz	r5, 800cd5c <_dtoa_r+0x774>
 800cd42:	9b06      	ldr	r3, [sp, #24]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	dd09      	ble.n	800cd5c <_dtoa_r+0x774>
 800cd48:	42ab      	cmp	r3, r5
 800cd4a:	9a05      	ldr	r2, [sp, #20]
 800cd4c:	bfa8      	it	ge
 800cd4e:	462b      	movge	r3, r5
 800cd50:	1ad2      	subs	r2, r2, r3
 800cd52:	9205      	str	r2, [sp, #20]
 800cd54:	9a06      	ldr	r2, [sp, #24]
 800cd56:	1aed      	subs	r5, r5, r3
 800cd58:	1ad3      	subs	r3, r2, r3
 800cd5a:	9306      	str	r3, [sp, #24]
 800cd5c:	9b08      	ldr	r3, [sp, #32]
 800cd5e:	b1f3      	cbz	r3, 800cd9e <_dtoa_r+0x7b6>
 800cd60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	f000 80a3 	beq.w	800ceae <_dtoa_r+0x8c6>
 800cd68:	2e00      	cmp	r6, #0
 800cd6a:	dd10      	ble.n	800cd8e <_dtoa_r+0x7a6>
 800cd6c:	4639      	mov	r1, r7
 800cd6e:	4632      	mov	r2, r6
 800cd70:	4620      	mov	r0, r4
 800cd72:	f000 fce1 	bl	800d738 <__pow5mult>
 800cd76:	4652      	mov	r2, sl
 800cd78:	4601      	mov	r1, r0
 800cd7a:	4607      	mov	r7, r0
 800cd7c:	4620      	mov	r0, r4
 800cd7e:	f000 fc31 	bl	800d5e4 <__multiply>
 800cd82:	4651      	mov	r1, sl
 800cd84:	4680      	mov	r8, r0
 800cd86:	4620      	mov	r0, r4
 800cd88:	f000 fb60 	bl	800d44c <_Bfree>
 800cd8c:	46c2      	mov	sl, r8
 800cd8e:	9b08      	ldr	r3, [sp, #32]
 800cd90:	1b9a      	subs	r2, r3, r6
 800cd92:	d004      	beq.n	800cd9e <_dtoa_r+0x7b6>
 800cd94:	4651      	mov	r1, sl
 800cd96:	4620      	mov	r0, r4
 800cd98:	f000 fcce 	bl	800d738 <__pow5mult>
 800cd9c:	4682      	mov	sl, r0
 800cd9e:	2101      	movs	r1, #1
 800cda0:	4620      	mov	r0, r4
 800cda2:	f000 fc09 	bl	800d5b8 <__i2b>
 800cda6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	4606      	mov	r6, r0
 800cdac:	f340 8081 	ble.w	800ceb2 <_dtoa_r+0x8ca>
 800cdb0:	461a      	mov	r2, r3
 800cdb2:	4601      	mov	r1, r0
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	f000 fcbf 	bl	800d738 <__pow5mult>
 800cdba:	9b07      	ldr	r3, [sp, #28]
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	4606      	mov	r6, r0
 800cdc0:	dd7a      	ble.n	800ceb8 <_dtoa_r+0x8d0>
 800cdc2:	f04f 0800 	mov.w	r8, #0
 800cdc6:	6933      	ldr	r3, [r6, #16]
 800cdc8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cdcc:	6918      	ldr	r0, [r3, #16]
 800cdce:	f000 fba5 	bl	800d51c <__hi0bits>
 800cdd2:	f1c0 0020 	rsb	r0, r0, #32
 800cdd6:	9b06      	ldr	r3, [sp, #24]
 800cdd8:	4418      	add	r0, r3
 800cdda:	f010 001f 	ands.w	r0, r0, #31
 800cdde:	f000 8094 	beq.w	800cf0a <_dtoa_r+0x922>
 800cde2:	f1c0 0320 	rsb	r3, r0, #32
 800cde6:	2b04      	cmp	r3, #4
 800cde8:	f340 8085 	ble.w	800cef6 <_dtoa_r+0x90e>
 800cdec:	9b05      	ldr	r3, [sp, #20]
 800cdee:	f1c0 001c 	rsb	r0, r0, #28
 800cdf2:	4403      	add	r3, r0
 800cdf4:	9305      	str	r3, [sp, #20]
 800cdf6:	9b06      	ldr	r3, [sp, #24]
 800cdf8:	4403      	add	r3, r0
 800cdfa:	4405      	add	r5, r0
 800cdfc:	9306      	str	r3, [sp, #24]
 800cdfe:	9b05      	ldr	r3, [sp, #20]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	dd05      	ble.n	800ce10 <_dtoa_r+0x828>
 800ce04:	4651      	mov	r1, sl
 800ce06:	461a      	mov	r2, r3
 800ce08:	4620      	mov	r0, r4
 800ce0a:	f000 fcef 	bl	800d7ec <__lshift>
 800ce0e:	4682      	mov	sl, r0
 800ce10:	9b06      	ldr	r3, [sp, #24]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	dd05      	ble.n	800ce22 <_dtoa_r+0x83a>
 800ce16:	4631      	mov	r1, r6
 800ce18:	461a      	mov	r2, r3
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	f000 fce6 	bl	800d7ec <__lshift>
 800ce20:	4606      	mov	r6, r0
 800ce22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d072      	beq.n	800cf0e <_dtoa_r+0x926>
 800ce28:	4631      	mov	r1, r6
 800ce2a:	4650      	mov	r0, sl
 800ce2c:	f000 fd4a 	bl	800d8c4 <__mcmp>
 800ce30:	2800      	cmp	r0, #0
 800ce32:	da6c      	bge.n	800cf0e <_dtoa_r+0x926>
 800ce34:	2300      	movs	r3, #0
 800ce36:	4651      	mov	r1, sl
 800ce38:	220a      	movs	r2, #10
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	f000 fb28 	bl	800d490 <__multadd>
 800ce40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce42:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ce46:	4682      	mov	sl, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	f000 81b0 	beq.w	800d1ae <_dtoa_r+0xbc6>
 800ce4e:	2300      	movs	r3, #0
 800ce50:	4639      	mov	r1, r7
 800ce52:	220a      	movs	r2, #10
 800ce54:	4620      	mov	r0, r4
 800ce56:	f000 fb1b 	bl	800d490 <__multadd>
 800ce5a:	9b01      	ldr	r3, [sp, #4]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	4607      	mov	r7, r0
 800ce60:	f300 8096 	bgt.w	800cf90 <_dtoa_r+0x9a8>
 800ce64:	9b07      	ldr	r3, [sp, #28]
 800ce66:	2b02      	cmp	r3, #2
 800ce68:	dc59      	bgt.n	800cf1e <_dtoa_r+0x936>
 800ce6a:	e091      	b.n	800cf90 <_dtoa_r+0x9a8>
 800ce6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ce72:	e758      	b.n	800cd26 <_dtoa_r+0x73e>
 800ce74:	9b04      	ldr	r3, [sp, #16]
 800ce76:	1e5e      	subs	r6, r3, #1
 800ce78:	9b08      	ldr	r3, [sp, #32]
 800ce7a:	42b3      	cmp	r3, r6
 800ce7c:	bfbf      	itttt	lt
 800ce7e:	9b08      	ldrlt	r3, [sp, #32]
 800ce80:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ce82:	9608      	strlt	r6, [sp, #32]
 800ce84:	1af3      	sublt	r3, r6, r3
 800ce86:	bfb4      	ite	lt
 800ce88:	18d2      	addlt	r2, r2, r3
 800ce8a:	1b9e      	subge	r6, r3, r6
 800ce8c:	9b04      	ldr	r3, [sp, #16]
 800ce8e:	bfbc      	itt	lt
 800ce90:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ce92:	2600      	movlt	r6, #0
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	bfb7      	itett	lt
 800ce98:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ce9c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cea0:	1a9d      	sublt	r5, r3, r2
 800cea2:	2300      	movlt	r3, #0
 800cea4:	e741      	b.n	800cd2a <_dtoa_r+0x742>
 800cea6:	9e08      	ldr	r6, [sp, #32]
 800cea8:	9d05      	ldr	r5, [sp, #20]
 800ceaa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ceac:	e748      	b.n	800cd40 <_dtoa_r+0x758>
 800ceae:	9a08      	ldr	r2, [sp, #32]
 800ceb0:	e770      	b.n	800cd94 <_dtoa_r+0x7ac>
 800ceb2:	9b07      	ldr	r3, [sp, #28]
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	dc19      	bgt.n	800ceec <_dtoa_r+0x904>
 800ceb8:	9b02      	ldr	r3, [sp, #8]
 800ceba:	b9bb      	cbnz	r3, 800ceec <_dtoa_r+0x904>
 800cebc:	9b03      	ldr	r3, [sp, #12]
 800cebe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cec2:	b99b      	cbnz	r3, 800ceec <_dtoa_r+0x904>
 800cec4:	9b03      	ldr	r3, [sp, #12]
 800cec6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ceca:	0d1b      	lsrs	r3, r3, #20
 800cecc:	051b      	lsls	r3, r3, #20
 800cece:	b183      	cbz	r3, 800cef2 <_dtoa_r+0x90a>
 800ced0:	9b05      	ldr	r3, [sp, #20]
 800ced2:	3301      	adds	r3, #1
 800ced4:	9305      	str	r3, [sp, #20]
 800ced6:	9b06      	ldr	r3, [sp, #24]
 800ced8:	3301      	adds	r3, #1
 800ceda:	9306      	str	r3, [sp, #24]
 800cedc:	f04f 0801 	mov.w	r8, #1
 800cee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	f47f af6f 	bne.w	800cdc6 <_dtoa_r+0x7de>
 800cee8:	2001      	movs	r0, #1
 800ceea:	e774      	b.n	800cdd6 <_dtoa_r+0x7ee>
 800ceec:	f04f 0800 	mov.w	r8, #0
 800cef0:	e7f6      	b.n	800cee0 <_dtoa_r+0x8f8>
 800cef2:	4698      	mov	r8, r3
 800cef4:	e7f4      	b.n	800cee0 <_dtoa_r+0x8f8>
 800cef6:	d082      	beq.n	800cdfe <_dtoa_r+0x816>
 800cef8:	9a05      	ldr	r2, [sp, #20]
 800cefa:	331c      	adds	r3, #28
 800cefc:	441a      	add	r2, r3
 800cefe:	9205      	str	r2, [sp, #20]
 800cf00:	9a06      	ldr	r2, [sp, #24]
 800cf02:	441a      	add	r2, r3
 800cf04:	441d      	add	r5, r3
 800cf06:	9206      	str	r2, [sp, #24]
 800cf08:	e779      	b.n	800cdfe <_dtoa_r+0x816>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	e7f4      	b.n	800cef8 <_dtoa_r+0x910>
 800cf0e:	9b04      	ldr	r3, [sp, #16]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	dc37      	bgt.n	800cf84 <_dtoa_r+0x99c>
 800cf14:	9b07      	ldr	r3, [sp, #28]
 800cf16:	2b02      	cmp	r3, #2
 800cf18:	dd34      	ble.n	800cf84 <_dtoa_r+0x99c>
 800cf1a:	9b04      	ldr	r3, [sp, #16]
 800cf1c:	9301      	str	r3, [sp, #4]
 800cf1e:	9b01      	ldr	r3, [sp, #4]
 800cf20:	b963      	cbnz	r3, 800cf3c <_dtoa_r+0x954>
 800cf22:	4631      	mov	r1, r6
 800cf24:	2205      	movs	r2, #5
 800cf26:	4620      	mov	r0, r4
 800cf28:	f000 fab2 	bl	800d490 <__multadd>
 800cf2c:	4601      	mov	r1, r0
 800cf2e:	4606      	mov	r6, r0
 800cf30:	4650      	mov	r0, sl
 800cf32:	f000 fcc7 	bl	800d8c4 <__mcmp>
 800cf36:	2800      	cmp	r0, #0
 800cf38:	f73f adbb 	bgt.w	800cab2 <_dtoa_r+0x4ca>
 800cf3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf3e:	9d00      	ldr	r5, [sp, #0]
 800cf40:	ea6f 0b03 	mvn.w	fp, r3
 800cf44:	f04f 0800 	mov.w	r8, #0
 800cf48:	4631      	mov	r1, r6
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	f000 fa7e 	bl	800d44c <_Bfree>
 800cf50:	2f00      	cmp	r7, #0
 800cf52:	f43f aeab 	beq.w	800ccac <_dtoa_r+0x6c4>
 800cf56:	f1b8 0f00 	cmp.w	r8, #0
 800cf5a:	d005      	beq.n	800cf68 <_dtoa_r+0x980>
 800cf5c:	45b8      	cmp	r8, r7
 800cf5e:	d003      	beq.n	800cf68 <_dtoa_r+0x980>
 800cf60:	4641      	mov	r1, r8
 800cf62:	4620      	mov	r0, r4
 800cf64:	f000 fa72 	bl	800d44c <_Bfree>
 800cf68:	4639      	mov	r1, r7
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	f000 fa6e 	bl	800d44c <_Bfree>
 800cf70:	e69c      	b.n	800ccac <_dtoa_r+0x6c4>
 800cf72:	2600      	movs	r6, #0
 800cf74:	4637      	mov	r7, r6
 800cf76:	e7e1      	b.n	800cf3c <_dtoa_r+0x954>
 800cf78:	46bb      	mov	fp, r7
 800cf7a:	4637      	mov	r7, r6
 800cf7c:	e599      	b.n	800cab2 <_dtoa_r+0x4ca>
 800cf7e:	bf00      	nop
 800cf80:	40240000 	.word	0x40240000
 800cf84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	f000 80c8 	beq.w	800d11c <_dtoa_r+0xb34>
 800cf8c:	9b04      	ldr	r3, [sp, #16]
 800cf8e:	9301      	str	r3, [sp, #4]
 800cf90:	2d00      	cmp	r5, #0
 800cf92:	dd05      	ble.n	800cfa0 <_dtoa_r+0x9b8>
 800cf94:	4639      	mov	r1, r7
 800cf96:	462a      	mov	r2, r5
 800cf98:	4620      	mov	r0, r4
 800cf9a:	f000 fc27 	bl	800d7ec <__lshift>
 800cf9e:	4607      	mov	r7, r0
 800cfa0:	f1b8 0f00 	cmp.w	r8, #0
 800cfa4:	d05b      	beq.n	800d05e <_dtoa_r+0xa76>
 800cfa6:	6879      	ldr	r1, [r7, #4]
 800cfa8:	4620      	mov	r0, r4
 800cfaa:	f000 fa0f 	bl	800d3cc <_Balloc>
 800cfae:	4605      	mov	r5, r0
 800cfb0:	b928      	cbnz	r0, 800cfbe <_dtoa_r+0x9d6>
 800cfb2:	4b83      	ldr	r3, [pc, #524]	; (800d1c0 <_dtoa_r+0xbd8>)
 800cfb4:	4602      	mov	r2, r0
 800cfb6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cfba:	f7ff bb2e 	b.w	800c61a <_dtoa_r+0x32>
 800cfbe:	693a      	ldr	r2, [r7, #16]
 800cfc0:	3202      	adds	r2, #2
 800cfc2:	0092      	lsls	r2, r2, #2
 800cfc4:	f107 010c 	add.w	r1, r7, #12
 800cfc8:	300c      	adds	r0, #12
 800cfca:	f7ff fa58 	bl	800c47e <memcpy>
 800cfce:	2201      	movs	r2, #1
 800cfd0:	4629      	mov	r1, r5
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	f000 fc0a 	bl	800d7ec <__lshift>
 800cfd8:	9b00      	ldr	r3, [sp, #0]
 800cfda:	3301      	adds	r3, #1
 800cfdc:	9304      	str	r3, [sp, #16]
 800cfde:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfe2:	4413      	add	r3, r2
 800cfe4:	9308      	str	r3, [sp, #32]
 800cfe6:	9b02      	ldr	r3, [sp, #8]
 800cfe8:	f003 0301 	and.w	r3, r3, #1
 800cfec:	46b8      	mov	r8, r7
 800cfee:	9306      	str	r3, [sp, #24]
 800cff0:	4607      	mov	r7, r0
 800cff2:	9b04      	ldr	r3, [sp, #16]
 800cff4:	4631      	mov	r1, r6
 800cff6:	3b01      	subs	r3, #1
 800cff8:	4650      	mov	r0, sl
 800cffa:	9301      	str	r3, [sp, #4]
 800cffc:	f7ff fa6c 	bl	800c4d8 <quorem>
 800d000:	4641      	mov	r1, r8
 800d002:	9002      	str	r0, [sp, #8]
 800d004:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d008:	4650      	mov	r0, sl
 800d00a:	f000 fc5b 	bl	800d8c4 <__mcmp>
 800d00e:	463a      	mov	r2, r7
 800d010:	9005      	str	r0, [sp, #20]
 800d012:	4631      	mov	r1, r6
 800d014:	4620      	mov	r0, r4
 800d016:	f000 fc71 	bl	800d8fc <__mdiff>
 800d01a:	68c2      	ldr	r2, [r0, #12]
 800d01c:	4605      	mov	r5, r0
 800d01e:	bb02      	cbnz	r2, 800d062 <_dtoa_r+0xa7a>
 800d020:	4601      	mov	r1, r0
 800d022:	4650      	mov	r0, sl
 800d024:	f000 fc4e 	bl	800d8c4 <__mcmp>
 800d028:	4602      	mov	r2, r0
 800d02a:	4629      	mov	r1, r5
 800d02c:	4620      	mov	r0, r4
 800d02e:	9209      	str	r2, [sp, #36]	; 0x24
 800d030:	f000 fa0c 	bl	800d44c <_Bfree>
 800d034:	9b07      	ldr	r3, [sp, #28]
 800d036:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d038:	9d04      	ldr	r5, [sp, #16]
 800d03a:	ea43 0102 	orr.w	r1, r3, r2
 800d03e:	9b06      	ldr	r3, [sp, #24]
 800d040:	4319      	orrs	r1, r3
 800d042:	d110      	bne.n	800d066 <_dtoa_r+0xa7e>
 800d044:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d048:	d029      	beq.n	800d09e <_dtoa_r+0xab6>
 800d04a:	9b05      	ldr	r3, [sp, #20]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	dd02      	ble.n	800d056 <_dtoa_r+0xa6e>
 800d050:	9b02      	ldr	r3, [sp, #8]
 800d052:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d056:	9b01      	ldr	r3, [sp, #4]
 800d058:	f883 9000 	strb.w	r9, [r3]
 800d05c:	e774      	b.n	800cf48 <_dtoa_r+0x960>
 800d05e:	4638      	mov	r0, r7
 800d060:	e7ba      	b.n	800cfd8 <_dtoa_r+0x9f0>
 800d062:	2201      	movs	r2, #1
 800d064:	e7e1      	b.n	800d02a <_dtoa_r+0xa42>
 800d066:	9b05      	ldr	r3, [sp, #20]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	db04      	blt.n	800d076 <_dtoa_r+0xa8e>
 800d06c:	9907      	ldr	r1, [sp, #28]
 800d06e:	430b      	orrs	r3, r1
 800d070:	9906      	ldr	r1, [sp, #24]
 800d072:	430b      	orrs	r3, r1
 800d074:	d120      	bne.n	800d0b8 <_dtoa_r+0xad0>
 800d076:	2a00      	cmp	r2, #0
 800d078:	dded      	ble.n	800d056 <_dtoa_r+0xa6e>
 800d07a:	4651      	mov	r1, sl
 800d07c:	2201      	movs	r2, #1
 800d07e:	4620      	mov	r0, r4
 800d080:	f000 fbb4 	bl	800d7ec <__lshift>
 800d084:	4631      	mov	r1, r6
 800d086:	4682      	mov	sl, r0
 800d088:	f000 fc1c 	bl	800d8c4 <__mcmp>
 800d08c:	2800      	cmp	r0, #0
 800d08e:	dc03      	bgt.n	800d098 <_dtoa_r+0xab0>
 800d090:	d1e1      	bne.n	800d056 <_dtoa_r+0xa6e>
 800d092:	f019 0f01 	tst.w	r9, #1
 800d096:	d0de      	beq.n	800d056 <_dtoa_r+0xa6e>
 800d098:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d09c:	d1d8      	bne.n	800d050 <_dtoa_r+0xa68>
 800d09e:	9a01      	ldr	r2, [sp, #4]
 800d0a0:	2339      	movs	r3, #57	; 0x39
 800d0a2:	7013      	strb	r3, [r2, #0]
 800d0a4:	462b      	mov	r3, r5
 800d0a6:	461d      	mov	r5, r3
 800d0a8:	3b01      	subs	r3, #1
 800d0aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d0ae:	2a39      	cmp	r2, #57	; 0x39
 800d0b0:	d06c      	beq.n	800d18c <_dtoa_r+0xba4>
 800d0b2:	3201      	adds	r2, #1
 800d0b4:	701a      	strb	r2, [r3, #0]
 800d0b6:	e747      	b.n	800cf48 <_dtoa_r+0x960>
 800d0b8:	2a00      	cmp	r2, #0
 800d0ba:	dd07      	ble.n	800d0cc <_dtoa_r+0xae4>
 800d0bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d0c0:	d0ed      	beq.n	800d09e <_dtoa_r+0xab6>
 800d0c2:	9a01      	ldr	r2, [sp, #4]
 800d0c4:	f109 0301 	add.w	r3, r9, #1
 800d0c8:	7013      	strb	r3, [r2, #0]
 800d0ca:	e73d      	b.n	800cf48 <_dtoa_r+0x960>
 800d0cc:	9b04      	ldr	r3, [sp, #16]
 800d0ce:	9a08      	ldr	r2, [sp, #32]
 800d0d0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d043      	beq.n	800d160 <_dtoa_r+0xb78>
 800d0d8:	4651      	mov	r1, sl
 800d0da:	2300      	movs	r3, #0
 800d0dc:	220a      	movs	r2, #10
 800d0de:	4620      	mov	r0, r4
 800d0e0:	f000 f9d6 	bl	800d490 <__multadd>
 800d0e4:	45b8      	cmp	r8, r7
 800d0e6:	4682      	mov	sl, r0
 800d0e8:	f04f 0300 	mov.w	r3, #0
 800d0ec:	f04f 020a 	mov.w	r2, #10
 800d0f0:	4641      	mov	r1, r8
 800d0f2:	4620      	mov	r0, r4
 800d0f4:	d107      	bne.n	800d106 <_dtoa_r+0xb1e>
 800d0f6:	f000 f9cb 	bl	800d490 <__multadd>
 800d0fa:	4680      	mov	r8, r0
 800d0fc:	4607      	mov	r7, r0
 800d0fe:	9b04      	ldr	r3, [sp, #16]
 800d100:	3301      	adds	r3, #1
 800d102:	9304      	str	r3, [sp, #16]
 800d104:	e775      	b.n	800cff2 <_dtoa_r+0xa0a>
 800d106:	f000 f9c3 	bl	800d490 <__multadd>
 800d10a:	4639      	mov	r1, r7
 800d10c:	4680      	mov	r8, r0
 800d10e:	2300      	movs	r3, #0
 800d110:	220a      	movs	r2, #10
 800d112:	4620      	mov	r0, r4
 800d114:	f000 f9bc 	bl	800d490 <__multadd>
 800d118:	4607      	mov	r7, r0
 800d11a:	e7f0      	b.n	800d0fe <_dtoa_r+0xb16>
 800d11c:	9b04      	ldr	r3, [sp, #16]
 800d11e:	9301      	str	r3, [sp, #4]
 800d120:	9d00      	ldr	r5, [sp, #0]
 800d122:	4631      	mov	r1, r6
 800d124:	4650      	mov	r0, sl
 800d126:	f7ff f9d7 	bl	800c4d8 <quorem>
 800d12a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d12e:	9b00      	ldr	r3, [sp, #0]
 800d130:	f805 9b01 	strb.w	r9, [r5], #1
 800d134:	1aea      	subs	r2, r5, r3
 800d136:	9b01      	ldr	r3, [sp, #4]
 800d138:	4293      	cmp	r3, r2
 800d13a:	dd07      	ble.n	800d14c <_dtoa_r+0xb64>
 800d13c:	4651      	mov	r1, sl
 800d13e:	2300      	movs	r3, #0
 800d140:	220a      	movs	r2, #10
 800d142:	4620      	mov	r0, r4
 800d144:	f000 f9a4 	bl	800d490 <__multadd>
 800d148:	4682      	mov	sl, r0
 800d14a:	e7ea      	b.n	800d122 <_dtoa_r+0xb3a>
 800d14c:	9b01      	ldr	r3, [sp, #4]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	bfc8      	it	gt
 800d152:	461d      	movgt	r5, r3
 800d154:	9b00      	ldr	r3, [sp, #0]
 800d156:	bfd8      	it	le
 800d158:	2501      	movle	r5, #1
 800d15a:	441d      	add	r5, r3
 800d15c:	f04f 0800 	mov.w	r8, #0
 800d160:	4651      	mov	r1, sl
 800d162:	2201      	movs	r2, #1
 800d164:	4620      	mov	r0, r4
 800d166:	f000 fb41 	bl	800d7ec <__lshift>
 800d16a:	4631      	mov	r1, r6
 800d16c:	4682      	mov	sl, r0
 800d16e:	f000 fba9 	bl	800d8c4 <__mcmp>
 800d172:	2800      	cmp	r0, #0
 800d174:	dc96      	bgt.n	800d0a4 <_dtoa_r+0xabc>
 800d176:	d102      	bne.n	800d17e <_dtoa_r+0xb96>
 800d178:	f019 0f01 	tst.w	r9, #1
 800d17c:	d192      	bne.n	800d0a4 <_dtoa_r+0xabc>
 800d17e:	462b      	mov	r3, r5
 800d180:	461d      	mov	r5, r3
 800d182:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d186:	2a30      	cmp	r2, #48	; 0x30
 800d188:	d0fa      	beq.n	800d180 <_dtoa_r+0xb98>
 800d18a:	e6dd      	b.n	800cf48 <_dtoa_r+0x960>
 800d18c:	9a00      	ldr	r2, [sp, #0]
 800d18e:	429a      	cmp	r2, r3
 800d190:	d189      	bne.n	800d0a6 <_dtoa_r+0xabe>
 800d192:	f10b 0b01 	add.w	fp, fp, #1
 800d196:	2331      	movs	r3, #49	; 0x31
 800d198:	e796      	b.n	800d0c8 <_dtoa_r+0xae0>
 800d19a:	4b0a      	ldr	r3, [pc, #40]	; (800d1c4 <_dtoa_r+0xbdc>)
 800d19c:	f7ff ba99 	b.w	800c6d2 <_dtoa_r+0xea>
 800d1a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	f47f aa6d 	bne.w	800c682 <_dtoa_r+0x9a>
 800d1a8:	4b07      	ldr	r3, [pc, #28]	; (800d1c8 <_dtoa_r+0xbe0>)
 800d1aa:	f7ff ba92 	b.w	800c6d2 <_dtoa_r+0xea>
 800d1ae:	9b01      	ldr	r3, [sp, #4]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	dcb5      	bgt.n	800d120 <_dtoa_r+0xb38>
 800d1b4:	9b07      	ldr	r3, [sp, #28]
 800d1b6:	2b02      	cmp	r3, #2
 800d1b8:	f73f aeb1 	bgt.w	800cf1e <_dtoa_r+0x936>
 800d1bc:	e7b0      	b.n	800d120 <_dtoa_r+0xb38>
 800d1be:	bf00      	nop
 800d1c0:	0800ecbc 	.word	0x0800ecbc
 800d1c4:	0800ebf7 	.word	0x0800ebf7
 800d1c8:	0800ec57 	.word	0x0800ec57

0800d1cc <_free_r>:
 800d1cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d1ce:	2900      	cmp	r1, #0
 800d1d0:	d044      	beq.n	800d25c <_free_r+0x90>
 800d1d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1d6:	9001      	str	r0, [sp, #4]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	f1a1 0404 	sub.w	r4, r1, #4
 800d1de:	bfb8      	it	lt
 800d1e0:	18e4      	addlt	r4, r4, r3
 800d1e2:	f000 f8e7 	bl	800d3b4 <__malloc_lock>
 800d1e6:	4a1e      	ldr	r2, [pc, #120]	; (800d260 <_free_r+0x94>)
 800d1e8:	9801      	ldr	r0, [sp, #4]
 800d1ea:	6813      	ldr	r3, [r2, #0]
 800d1ec:	b933      	cbnz	r3, 800d1fc <_free_r+0x30>
 800d1ee:	6063      	str	r3, [r4, #4]
 800d1f0:	6014      	str	r4, [r2, #0]
 800d1f2:	b003      	add	sp, #12
 800d1f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1f8:	f000 b8e2 	b.w	800d3c0 <__malloc_unlock>
 800d1fc:	42a3      	cmp	r3, r4
 800d1fe:	d908      	bls.n	800d212 <_free_r+0x46>
 800d200:	6825      	ldr	r5, [r4, #0]
 800d202:	1961      	adds	r1, r4, r5
 800d204:	428b      	cmp	r3, r1
 800d206:	bf01      	itttt	eq
 800d208:	6819      	ldreq	r1, [r3, #0]
 800d20a:	685b      	ldreq	r3, [r3, #4]
 800d20c:	1949      	addeq	r1, r1, r5
 800d20e:	6021      	streq	r1, [r4, #0]
 800d210:	e7ed      	b.n	800d1ee <_free_r+0x22>
 800d212:	461a      	mov	r2, r3
 800d214:	685b      	ldr	r3, [r3, #4]
 800d216:	b10b      	cbz	r3, 800d21c <_free_r+0x50>
 800d218:	42a3      	cmp	r3, r4
 800d21a:	d9fa      	bls.n	800d212 <_free_r+0x46>
 800d21c:	6811      	ldr	r1, [r2, #0]
 800d21e:	1855      	adds	r5, r2, r1
 800d220:	42a5      	cmp	r5, r4
 800d222:	d10b      	bne.n	800d23c <_free_r+0x70>
 800d224:	6824      	ldr	r4, [r4, #0]
 800d226:	4421      	add	r1, r4
 800d228:	1854      	adds	r4, r2, r1
 800d22a:	42a3      	cmp	r3, r4
 800d22c:	6011      	str	r1, [r2, #0]
 800d22e:	d1e0      	bne.n	800d1f2 <_free_r+0x26>
 800d230:	681c      	ldr	r4, [r3, #0]
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	6053      	str	r3, [r2, #4]
 800d236:	440c      	add	r4, r1
 800d238:	6014      	str	r4, [r2, #0]
 800d23a:	e7da      	b.n	800d1f2 <_free_r+0x26>
 800d23c:	d902      	bls.n	800d244 <_free_r+0x78>
 800d23e:	230c      	movs	r3, #12
 800d240:	6003      	str	r3, [r0, #0]
 800d242:	e7d6      	b.n	800d1f2 <_free_r+0x26>
 800d244:	6825      	ldr	r5, [r4, #0]
 800d246:	1961      	adds	r1, r4, r5
 800d248:	428b      	cmp	r3, r1
 800d24a:	bf04      	itt	eq
 800d24c:	6819      	ldreq	r1, [r3, #0]
 800d24e:	685b      	ldreq	r3, [r3, #4]
 800d250:	6063      	str	r3, [r4, #4]
 800d252:	bf04      	itt	eq
 800d254:	1949      	addeq	r1, r1, r5
 800d256:	6021      	streq	r1, [r4, #0]
 800d258:	6054      	str	r4, [r2, #4]
 800d25a:	e7ca      	b.n	800d1f2 <_free_r+0x26>
 800d25c:	b003      	add	sp, #12
 800d25e:	bd30      	pop	{r4, r5, pc}
 800d260:	20000ffc 	.word	0x20000ffc

0800d264 <malloc>:
 800d264:	4b02      	ldr	r3, [pc, #8]	; (800d270 <malloc+0xc>)
 800d266:	4601      	mov	r1, r0
 800d268:	6818      	ldr	r0, [r3, #0]
 800d26a:	f000 b823 	b.w	800d2b4 <_malloc_r>
 800d26e:	bf00      	nop
 800d270:	2000007c 	.word	0x2000007c

0800d274 <sbrk_aligned>:
 800d274:	b570      	push	{r4, r5, r6, lr}
 800d276:	4e0e      	ldr	r6, [pc, #56]	; (800d2b0 <sbrk_aligned+0x3c>)
 800d278:	460c      	mov	r4, r1
 800d27a:	6831      	ldr	r1, [r6, #0]
 800d27c:	4605      	mov	r5, r0
 800d27e:	b911      	cbnz	r1, 800d286 <sbrk_aligned+0x12>
 800d280:	f001 f81a 	bl	800e2b8 <_sbrk_r>
 800d284:	6030      	str	r0, [r6, #0]
 800d286:	4621      	mov	r1, r4
 800d288:	4628      	mov	r0, r5
 800d28a:	f001 f815 	bl	800e2b8 <_sbrk_r>
 800d28e:	1c43      	adds	r3, r0, #1
 800d290:	d00a      	beq.n	800d2a8 <sbrk_aligned+0x34>
 800d292:	1cc4      	adds	r4, r0, #3
 800d294:	f024 0403 	bic.w	r4, r4, #3
 800d298:	42a0      	cmp	r0, r4
 800d29a:	d007      	beq.n	800d2ac <sbrk_aligned+0x38>
 800d29c:	1a21      	subs	r1, r4, r0
 800d29e:	4628      	mov	r0, r5
 800d2a0:	f001 f80a 	bl	800e2b8 <_sbrk_r>
 800d2a4:	3001      	adds	r0, #1
 800d2a6:	d101      	bne.n	800d2ac <sbrk_aligned+0x38>
 800d2a8:	f04f 34ff 	mov.w	r4, #4294967295
 800d2ac:	4620      	mov	r0, r4
 800d2ae:	bd70      	pop	{r4, r5, r6, pc}
 800d2b0:	20001000 	.word	0x20001000

0800d2b4 <_malloc_r>:
 800d2b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2b8:	1ccd      	adds	r5, r1, #3
 800d2ba:	f025 0503 	bic.w	r5, r5, #3
 800d2be:	3508      	adds	r5, #8
 800d2c0:	2d0c      	cmp	r5, #12
 800d2c2:	bf38      	it	cc
 800d2c4:	250c      	movcc	r5, #12
 800d2c6:	2d00      	cmp	r5, #0
 800d2c8:	4607      	mov	r7, r0
 800d2ca:	db01      	blt.n	800d2d0 <_malloc_r+0x1c>
 800d2cc:	42a9      	cmp	r1, r5
 800d2ce:	d905      	bls.n	800d2dc <_malloc_r+0x28>
 800d2d0:	230c      	movs	r3, #12
 800d2d2:	603b      	str	r3, [r7, #0]
 800d2d4:	2600      	movs	r6, #0
 800d2d6:	4630      	mov	r0, r6
 800d2d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d3b0 <_malloc_r+0xfc>
 800d2e0:	f000 f868 	bl	800d3b4 <__malloc_lock>
 800d2e4:	f8d8 3000 	ldr.w	r3, [r8]
 800d2e8:	461c      	mov	r4, r3
 800d2ea:	bb5c      	cbnz	r4, 800d344 <_malloc_r+0x90>
 800d2ec:	4629      	mov	r1, r5
 800d2ee:	4638      	mov	r0, r7
 800d2f0:	f7ff ffc0 	bl	800d274 <sbrk_aligned>
 800d2f4:	1c43      	adds	r3, r0, #1
 800d2f6:	4604      	mov	r4, r0
 800d2f8:	d155      	bne.n	800d3a6 <_malloc_r+0xf2>
 800d2fa:	f8d8 4000 	ldr.w	r4, [r8]
 800d2fe:	4626      	mov	r6, r4
 800d300:	2e00      	cmp	r6, #0
 800d302:	d145      	bne.n	800d390 <_malloc_r+0xdc>
 800d304:	2c00      	cmp	r4, #0
 800d306:	d048      	beq.n	800d39a <_malloc_r+0xe6>
 800d308:	6823      	ldr	r3, [r4, #0]
 800d30a:	4631      	mov	r1, r6
 800d30c:	4638      	mov	r0, r7
 800d30e:	eb04 0903 	add.w	r9, r4, r3
 800d312:	f000 ffd1 	bl	800e2b8 <_sbrk_r>
 800d316:	4581      	cmp	r9, r0
 800d318:	d13f      	bne.n	800d39a <_malloc_r+0xe6>
 800d31a:	6821      	ldr	r1, [r4, #0]
 800d31c:	1a6d      	subs	r5, r5, r1
 800d31e:	4629      	mov	r1, r5
 800d320:	4638      	mov	r0, r7
 800d322:	f7ff ffa7 	bl	800d274 <sbrk_aligned>
 800d326:	3001      	adds	r0, #1
 800d328:	d037      	beq.n	800d39a <_malloc_r+0xe6>
 800d32a:	6823      	ldr	r3, [r4, #0]
 800d32c:	442b      	add	r3, r5
 800d32e:	6023      	str	r3, [r4, #0]
 800d330:	f8d8 3000 	ldr.w	r3, [r8]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d038      	beq.n	800d3aa <_malloc_r+0xf6>
 800d338:	685a      	ldr	r2, [r3, #4]
 800d33a:	42a2      	cmp	r2, r4
 800d33c:	d12b      	bne.n	800d396 <_malloc_r+0xe2>
 800d33e:	2200      	movs	r2, #0
 800d340:	605a      	str	r2, [r3, #4]
 800d342:	e00f      	b.n	800d364 <_malloc_r+0xb0>
 800d344:	6822      	ldr	r2, [r4, #0]
 800d346:	1b52      	subs	r2, r2, r5
 800d348:	d41f      	bmi.n	800d38a <_malloc_r+0xd6>
 800d34a:	2a0b      	cmp	r2, #11
 800d34c:	d917      	bls.n	800d37e <_malloc_r+0xca>
 800d34e:	1961      	adds	r1, r4, r5
 800d350:	42a3      	cmp	r3, r4
 800d352:	6025      	str	r5, [r4, #0]
 800d354:	bf18      	it	ne
 800d356:	6059      	strne	r1, [r3, #4]
 800d358:	6863      	ldr	r3, [r4, #4]
 800d35a:	bf08      	it	eq
 800d35c:	f8c8 1000 	streq.w	r1, [r8]
 800d360:	5162      	str	r2, [r4, r5]
 800d362:	604b      	str	r3, [r1, #4]
 800d364:	4638      	mov	r0, r7
 800d366:	f104 060b 	add.w	r6, r4, #11
 800d36a:	f000 f829 	bl	800d3c0 <__malloc_unlock>
 800d36e:	f026 0607 	bic.w	r6, r6, #7
 800d372:	1d23      	adds	r3, r4, #4
 800d374:	1af2      	subs	r2, r6, r3
 800d376:	d0ae      	beq.n	800d2d6 <_malloc_r+0x22>
 800d378:	1b9b      	subs	r3, r3, r6
 800d37a:	50a3      	str	r3, [r4, r2]
 800d37c:	e7ab      	b.n	800d2d6 <_malloc_r+0x22>
 800d37e:	42a3      	cmp	r3, r4
 800d380:	6862      	ldr	r2, [r4, #4]
 800d382:	d1dd      	bne.n	800d340 <_malloc_r+0x8c>
 800d384:	f8c8 2000 	str.w	r2, [r8]
 800d388:	e7ec      	b.n	800d364 <_malloc_r+0xb0>
 800d38a:	4623      	mov	r3, r4
 800d38c:	6864      	ldr	r4, [r4, #4]
 800d38e:	e7ac      	b.n	800d2ea <_malloc_r+0x36>
 800d390:	4634      	mov	r4, r6
 800d392:	6876      	ldr	r6, [r6, #4]
 800d394:	e7b4      	b.n	800d300 <_malloc_r+0x4c>
 800d396:	4613      	mov	r3, r2
 800d398:	e7cc      	b.n	800d334 <_malloc_r+0x80>
 800d39a:	230c      	movs	r3, #12
 800d39c:	603b      	str	r3, [r7, #0]
 800d39e:	4638      	mov	r0, r7
 800d3a0:	f000 f80e 	bl	800d3c0 <__malloc_unlock>
 800d3a4:	e797      	b.n	800d2d6 <_malloc_r+0x22>
 800d3a6:	6025      	str	r5, [r4, #0]
 800d3a8:	e7dc      	b.n	800d364 <_malloc_r+0xb0>
 800d3aa:	605b      	str	r3, [r3, #4]
 800d3ac:	deff      	udf	#255	; 0xff
 800d3ae:	bf00      	nop
 800d3b0:	20000ffc 	.word	0x20000ffc

0800d3b4 <__malloc_lock>:
 800d3b4:	4801      	ldr	r0, [pc, #4]	; (800d3bc <__malloc_lock+0x8>)
 800d3b6:	f7ff b860 	b.w	800c47a <__retarget_lock_acquire_recursive>
 800d3ba:	bf00      	nop
 800d3bc:	20000ff8 	.word	0x20000ff8

0800d3c0 <__malloc_unlock>:
 800d3c0:	4801      	ldr	r0, [pc, #4]	; (800d3c8 <__malloc_unlock+0x8>)
 800d3c2:	f7ff b85b 	b.w	800c47c <__retarget_lock_release_recursive>
 800d3c6:	bf00      	nop
 800d3c8:	20000ff8 	.word	0x20000ff8

0800d3cc <_Balloc>:
 800d3cc:	b570      	push	{r4, r5, r6, lr}
 800d3ce:	69c6      	ldr	r6, [r0, #28]
 800d3d0:	4604      	mov	r4, r0
 800d3d2:	460d      	mov	r5, r1
 800d3d4:	b976      	cbnz	r6, 800d3f4 <_Balloc+0x28>
 800d3d6:	2010      	movs	r0, #16
 800d3d8:	f7ff ff44 	bl	800d264 <malloc>
 800d3dc:	4602      	mov	r2, r0
 800d3de:	61e0      	str	r0, [r4, #28]
 800d3e0:	b920      	cbnz	r0, 800d3ec <_Balloc+0x20>
 800d3e2:	4b18      	ldr	r3, [pc, #96]	; (800d444 <_Balloc+0x78>)
 800d3e4:	4818      	ldr	r0, [pc, #96]	; (800d448 <_Balloc+0x7c>)
 800d3e6:	216b      	movs	r1, #107	; 0x6b
 800d3e8:	f7ff f858 	bl	800c49c <__assert_func>
 800d3ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3f0:	6006      	str	r6, [r0, #0]
 800d3f2:	60c6      	str	r6, [r0, #12]
 800d3f4:	69e6      	ldr	r6, [r4, #28]
 800d3f6:	68f3      	ldr	r3, [r6, #12]
 800d3f8:	b183      	cbz	r3, 800d41c <_Balloc+0x50>
 800d3fa:	69e3      	ldr	r3, [r4, #28]
 800d3fc:	68db      	ldr	r3, [r3, #12]
 800d3fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d402:	b9b8      	cbnz	r0, 800d434 <_Balloc+0x68>
 800d404:	2101      	movs	r1, #1
 800d406:	fa01 f605 	lsl.w	r6, r1, r5
 800d40a:	1d72      	adds	r2, r6, #5
 800d40c:	0092      	lsls	r2, r2, #2
 800d40e:	4620      	mov	r0, r4
 800d410:	f000 ff69 	bl	800e2e6 <_calloc_r>
 800d414:	b160      	cbz	r0, 800d430 <_Balloc+0x64>
 800d416:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d41a:	e00e      	b.n	800d43a <_Balloc+0x6e>
 800d41c:	2221      	movs	r2, #33	; 0x21
 800d41e:	2104      	movs	r1, #4
 800d420:	4620      	mov	r0, r4
 800d422:	f000 ff60 	bl	800e2e6 <_calloc_r>
 800d426:	69e3      	ldr	r3, [r4, #28]
 800d428:	60f0      	str	r0, [r6, #12]
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d1e4      	bne.n	800d3fa <_Balloc+0x2e>
 800d430:	2000      	movs	r0, #0
 800d432:	bd70      	pop	{r4, r5, r6, pc}
 800d434:	6802      	ldr	r2, [r0, #0]
 800d436:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d43a:	2300      	movs	r3, #0
 800d43c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d440:	e7f7      	b.n	800d432 <_Balloc+0x66>
 800d442:	bf00      	nop
 800d444:	0800eb78 	.word	0x0800eb78
 800d448:	0800eccd 	.word	0x0800eccd

0800d44c <_Bfree>:
 800d44c:	b570      	push	{r4, r5, r6, lr}
 800d44e:	69c6      	ldr	r6, [r0, #28]
 800d450:	4605      	mov	r5, r0
 800d452:	460c      	mov	r4, r1
 800d454:	b976      	cbnz	r6, 800d474 <_Bfree+0x28>
 800d456:	2010      	movs	r0, #16
 800d458:	f7ff ff04 	bl	800d264 <malloc>
 800d45c:	4602      	mov	r2, r0
 800d45e:	61e8      	str	r0, [r5, #28]
 800d460:	b920      	cbnz	r0, 800d46c <_Bfree+0x20>
 800d462:	4b09      	ldr	r3, [pc, #36]	; (800d488 <_Bfree+0x3c>)
 800d464:	4809      	ldr	r0, [pc, #36]	; (800d48c <_Bfree+0x40>)
 800d466:	218f      	movs	r1, #143	; 0x8f
 800d468:	f7ff f818 	bl	800c49c <__assert_func>
 800d46c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d470:	6006      	str	r6, [r0, #0]
 800d472:	60c6      	str	r6, [r0, #12]
 800d474:	b13c      	cbz	r4, 800d486 <_Bfree+0x3a>
 800d476:	69eb      	ldr	r3, [r5, #28]
 800d478:	6862      	ldr	r2, [r4, #4]
 800d47a:	68db      	ldr	r3, [r3, #12]
 800d47c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d480:	6021      	str	r1, [r4, #0]
 800d482:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d486:	bd70      	pop	{r4, r5, r6, pc}
 800d488:	0800eb78 	.word	0x0800eb78
 800d48c:	0800eccd 	.word	0x0800eccd

0800d490 <__multadd>:
 800d490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d494:	690d      	ldr	r5, [r1, #16]
 800d496:	4607      	mov	r7, r0
 800d498:	460c      	mov	r4, r1
 800d49a:	461e      	mov	r6, r3
 800d49c:	f101 0c14 	add.w	ip, r1, #20
 800d4a0:	2000      	movs	r0, #0
 800d4a2:	f8dc 3000 	ldr.w	r3, [ip]
 800d4a6:	b299      	uxth	r1, r3
 800d4a8:	fb02 6101 	mla	r1, r2, r1, r6
 800d4ac:	0c1e      	lsrs	r6, r3, #16
 800d4ae:	0c0b      	lsrs	r3, r1, #16
 800d4b0:	fb02 3306 	mla	r3, r2, r6, r3
 800d4b4:	b289      	uxth	r1, r1
 800d4b6:	3001      	adds	r0, #1
 800d4b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d4bc:	4285      	cmp	r5, r0
 800d4be:	f84c 1b04 	str.w	r1, [ip], #4
 800d4c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d4c6:	dcec      	bgt.n	800d4a2 <__multadd+0x12>
 800d4c8:	b30e      	cbz	r6, 800d50e <__multadd+0x7e>
 800d4ca:	68a3      	ldr	r3, [r4, #8]
 800d4cc:	42ab      	cmp	r3, r5
 800d4ce:	dc19      	bgt.n	800d504 <__multadd+0x74>
 800d4d0:	6861      	ldr	r1, [r4, #4]
 800d4d2:	4638      	mov	r0, r7
 800d4d4:	3101      	adds	r1, #1
 800d4d6:	f7ff ff79 	bl	800d3cc <_Balloc>
 800d4da:	4680      	mov	r8, r0
 800d4dc:	b928      	cbnz	r0, 800d4ea <__multadd+0x5a>
 800d4de:	4602      	mov	r2, r0
 800d4e0:	4b0c      	ldr	r3, [pc, #48]	; (800d514 <__multadd+0x84>)
 800d4e2:	480d      	ldr	r0, [pc, #52]	; (800d518 <__multadd+0x88>)
 800d4e4:	21ba      	movs	r1, #186	; 0xba
 800d4e6:	f7fe ffd9 	bl	800c49c <__assert_func>
 800d4ea:	6922      	ldr	r2, [r4, #16]
 800d4ec:	3202      	adds	r2, #2
 800d4ee:	f104 010c 	add.w	r1, r4, #12
 800d4f2:	0092      	lsls	r2, r2, #2
 800d4f4:	300c      	adds	r0, #12
 800d4f6:	f7fe ffc2 	bl	800c47e <memcpy>
 800d4fa:	4621      	mov	r1, r4
 800d4fc:	4638      	mov	r0, r7
 800d4fe:	f7ff ffa5 	bl	800d44c <_Bfree>
 800d502:	4644      	mov	r4, r8
 800d504:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d508:	3501      	adds	r5, #1
 800d50a:	615e      	str	r6, [r3, #20]
 800d50c:	6125      	str	r5, [r4, #16]
 800d50e:	4620      	mov	r0, r4
 800d510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d514:	0800ecbc 	.word	0x0800ecbc
 800d518:	0800eccd 	.word	0x0800eccd

0800d51c <__hi0bits>:
 800d51c:	0c03      	lsrs	r3, r0, #16
 800d51e:	041b      	lsls	r3, r3, #16
 800d520:	b9d3      	cbnz	r3, 800d558 <__hi0bits+0x3c>
 800d522:	0400      	lsls	r0, r0, #16
 800d524:	2310      	movs	r3, #16
 800d526:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d52a:	bf04      	itt	eq
 800d52c:	0200      	lsleq	r0, r0, #8
 800d52e:	3308      	addeq	r3, #8
 800d530:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d534:	bf04      	itt	eq
 800d536:	0100      	lsleq	r0, r0, #4
 800d538:	3304      	addeq	r3, #4
 800d53a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d53e:	bf04      	itt	eq
 800d540:	0080      	lsleq	r0, r0, #2
 800d542:	3302      	addeq	r3, #2
 800d544:	2800      	cmp	r0, #0
 800d546:	db05      	blt.n	800d554 <__hi0bits+0x38>
 800d548:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d54c:	f103 0301 	add.w	r3, r3, #1
 800d550:	bf08      	it	eq
 800d552:	2320      	moveq	r3, #32
 800d554:	4618      	mov	r0, r3
 800d556:	4770      	bx	lr
 800d558:	2300      	movs	r3, #0
 800d55a:	e7e4      	b.n	800d526 <__hi0bits+0xa>

0800d55c <__lo0bits>:
 800d55c:	6803      	ldr	r3, [r0, #0]
 800d55e:	f013 0207 	ands.w	r2, r3, #7
 800d562:	d00c      	beq.n	800d57e <__lo0bits+0x22>
 800d564:	07d9      	lsls	r1, r3, #31
 800d566:	d422      	bmi.n	800d5ae <__lo0bits+0x52>
 800d568:	079a      	lsls	r2, r3, #30
 800d56a:	bf49      	itett	mi
 800d56c:	085b      	lsrmi	r3, r3, #1
 800d56e:	089b      	lsrpl	r3, r3, #2
 800d570:	6003      	strmi	r3, [r0, #0]
 800d572:	2201      	movmi	r2, #1
 800d574:	bf5c      	itt	pl
 800d576:	6003      	strpl	r3, [r0, #0]
 800d578:	2202      	movpl	r2, #2
 800d57a:	4610      	mov	r0, r2
 800d57c:	4770      	bx	lr
 800d57e:	b299      	uxth	r1, r3
 800d580:	b909      	cbnz	r1, 800d586 <__lo0bits+0x2a>
 800d582:	0c1b      	lsrs	r3, r3, #16
 800d584:	2210      	movs	r2, #16
 800d586:	b2d9      	uxtb	r1, r3
 800d588:	b909      	cbnz	r1, 800d58e <__lo0bits+0x32>
 800d58a:	3208      	adds	r2, #8
 800d58c:	0a1b      	lsrs	r3, r3, #8
 800d58e:	0719      	lsls	r1, r3, #28
 800d590:	bf04      	itt	eq
 800d592:	091b      	lsreq	r3, r3, #4
 800d594:	3204      	addeq	r2, #4
 800d596:	0799      	lsls	r1, r3, #30
 800d598:	bf04      	itt	eq
 800d59a:	089b      	lsreq	r3, r3, #2
 800d59c:	3202      	addeq	r2, #2
 800d59e:	07d9      	lsls	r1, r3, #31
 800d5a0:	d403      	bmi.n	800d5aa <__lo0bits+0x4e>
 800d5a2:	085b      	lsrs	r3, r3, #1
 800d5a4:	f102 0201 	add.w	r2, r2, #1
 800d5a8:	d003      	beq.n	800d5b2 <__lo0bits+0x56>
 800d5aa:	6003      	str	r3, [r0, #0]
 800d5ac:	e7e5      	b.n	800d57a <__lo0bits+0x1e>
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	e7e3      	b.n	800d57a <__lo0bits+0x1e>
 800d5b2:	2220      	movs	r2, #32
 800d5b4:	e7e1      	b.n	800d57a <__lo0bits+0x1e>
	...

0800d5b8 <__i2b>:
 800d5b8:	b510      	push	{r4, lr}
 800d5ba:	460c      	mov	r4, r1
 800d5bc:	2101      	movs	r1, #1
 800d5be:	f7ff ff05 	bl	800d3cc <_Balloc>
 800d5c2:	4602      	mov	r2, r0
 800d5c4:	b928      	cbnz	r0, 800d5d2 <__i2b+0x1a>
 800d5c6:	4b05      	ldr	r3, [pc, #20]	; (800d5dc <__i2b+0x24>)
 800d5c8:	4805      	ldr	r0, [pc, #20]	; (800d5e0 <__i2b+0x28>)
 800d5ca:	f240 1145 	movw	r1, #325	; 0x145
 800d5ce:	f7fe ff65 	bl	800c49c <__assert_func>
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	6144      	str	r4, [r0, #20]
 800d5d6:	6103      	str	r3, [r0, #16]
 800d5d8:	bd10      	pop	{r4, pc}
 800d5da:	bf00      	nop
 800d5dc:	0800ecbc 	.word	0x0800ecbc
 800d5e0:	0800eccd 	.word	0x0800eccd

0800d5e4 <__multiply>:
 800d5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e8:	4691      	mov	r9, r2
 800d5ea:	690a      	ldr	r2, [r1, #16]
 800d5ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	bfb8      	it	lt
 800d5f4:	460b      	movlt	r3, r1
 800d5f6:	460c      	mov	r4, r1
 800d5f8:	bfbc      	itt	lt
 800d5fa:	464c      	movlt	r4, r9
 800d5fc:	4699      	movlt	r9, r3
 800d5fe:	6927      	ldr	r7, [r4, #16]
 800d600:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d604:	68a3      	ldr	r3, [r4, #8]
 800d606:	6861      	ldr	r1, [r4, #4]
 800d608:	eb07 060a 	add.w	r6, r7, sl
 800d60c:	42b3      	cmp	r3, r6
 800d60e:	b085      	sub	sp, #20
 800d610:	bfb8      	it	lt
 800d612:	3101      	addlt	r1, #1
 800d614:	f7ff feda 	bl	800d3cc <_Balloc>
 800d618:	b930      	cbnz	r0, 800d628 <__multiply+0x44>
 800d61a:	4602      	mov	r2, r0
 800d61c:	4b44      	ldr	r3, [pc, #272]	; (800d730 <__multiply+0x14c>)
 800d61e:	4845      	ldr	r0, [pc, #276]	; (800d734 <__multiply+0x150>)
 800d620:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d624:	f7fe ff3a 	bl	800c49c <__assert_func>
 800d628:	f100 0514 	add.w	r5, r0, #20
 800d62c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d630:	462b      	mov	r3, r5
 800d632:	2200      	movs	r2, #0
 800d634:	4543      	cmp	r3, r8
 800d636:	d321      	bcc.n	800d67c <__multiply+0x98>
 800d638:	f104 0314 	add.w	r3, r4, #20
 800d63c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d640:	f109 0314 	add.w	r3, r9, #20
 800d644:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d648:	9202      	str	r2, [sp, #8]
 800d64a:	1b3a      	subs	r2, r7, r4
 800d64c:	3a15      	subs	r2, #21
 800d64e:	f022 0203 	bic.w	r2, r2, #3
 800d652:	3204      	adds	r2, #4
 800d654:	f104 0115 	add.w	r1, r4, #21
 800d658:	428f      	cmp	r7, r1
 800d65a:	bf38      	it	cc
 800d65c:	2204      	movcc	r2, #4
 800d65e:	9201      	str	r2, [sp, #4]
 800d660:	9a02      	ldr	r2, [sp, #8]
 800d662:	9303      	str	r3, [sp, #12]
 800d664:	429a      	cmp	r2, r3
 800d666:	d80c      	bhi.n	800d682 <__multiply+0x9e>
 800d668:	2e00      	cmp	r6, #0
 800d66a:	dd03      	ble.n	800d674 <__multiply+0x90>
 800d66c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d670:	2b00      	cmp	r3, #0
 800d672:	d05b      	beq.n	800d72c <__multiply+0x148>
 800d674:	6106      	str	r6, [r0, #16]
 800d676:	b005      	add	sp, #20
 800d678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d67c:	f843 2b04 	str.w	r2, [r3], #4
 800d680:	e7d8      	b.n	800d634 <__multiply+0x50>
 800d682:	f8b3 a000 	ldrh.w	sl, [r3]
 800d686:	f1ba 0f00 	cmp.w	sl, #0
 800d68a:	d024      	beq.n	800d6d6 <__multiply+0xf2>
 800d68c:	f104 0e14 	add.w	lr, r4, #20
 800d690:	46a9      	mov	r9, r5
 800d692:	f04f 0c00 	mov.w	ip, #0
 800d696:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d69a:	f8d9 1000 	ldr.w	r1, [r9]
 800d69e:	fa1f fb82 	uxth.w	fp, r2
 800d6a2:	b289      	uxth	r1, r1
 800d6a4:	fb0a 110b 	mla	r1, sl, fp, r1
 800d6a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d6ac:	f8d9 2000 	ldr.w	r2, [r9]
 800d6b0:	4461      	add	r1, ip
 800d6b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d6b6:	fb0a c20b 	mla	r2, sl, fp, ip
 800d6ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d6be:	b289      	uxth	r1, r1
 800d6c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d6c4:	4577      	cmp	r7, lr
 800d6c6:	f849 1b04 	str.w	r1, [r9], #4
 800d6ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d6ce:	d8e2      	bhi.n	800d696 <__multiply+0xb2>
 800d6d0:	9a01      	ldr	r2, [sp, #4]
 800d6d2:	f845 c002 	str.w	ip, [r5, r2]
 800d6d6:	9a03      	ldr	r2, [sp, #12]
 800d6d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d6dc:	3304      	adds	r3, #4
 800d6de:	f1b9 0f00 	cmp.w	r9, #0
 800d6e2:	d021      	beq.n	800d728 <__multiply+0x144>
 800d6e4:	6829      	ldr	r1, [r5, #0]
 800d6e6:	f104 0c14 	add.w	ip, r4, #20
 800d6ea:	46ae      	mov	lr, r5
 800d6ec:	f04f 0a00 	mov.w	sl, #0
 800d6f0:	f8bc b000 	ldrh.w	fp, [ip]
 800d6f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d6f8:	fb09 220b 	mla	r2, r9, fp, r2
 800d6fc:	4452      	add	r2, sl
 800d6fe:	b289      	uxth	r1, r1
 800d700:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d704:	f84e 1b04 	str.w	r1, [lr], #4
 800d708:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d70c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d710:	f8be 1000 	ldrh.w	r1, [lr]
 800d714:	fb09 110a 	mla	r1, r9, sl, r1
 800d718:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d71c:	4567      	cmp	r7, ip
 800d71e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d722:	d8e5      	bhi.n	800d6f0 <__multiply+0x10c>
 800d724:	9a01      	ldr	r2, [sp, #4]
 800d726:	50a9      	str	r1, [r5, r2]
 800d728:	3504      	adds	r5, #4
 800d72a:	e799      	b.n	800d660 <__multiply+0x7c>
 800d72c:	3e01      	subs	r6, #1
 800d72e:	e79b      	b.n	800d668 <__multiply+0x84>
 800d730:	0800ecbc 	.word	0x0800ecbc
 800d734:	0800eccd 	.word	0x0800eccd

0800d738 <__pow5mult>:
 800d738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d73c:	4615      	mov	r5, r2
 800d73e:	f012 0203 	ands.w	r2, r2, #3
 800d742:	4606      	mov	r6, r0
 800d744:	460f      	mov	r7, r1
 800d746:	d007      	beq.n	800d758 <__pow5mult+0x20>
 800d748:	4c25      	ldr	r4, [pc, #148]	; (800d7e0 <__pow5mult+0xa8>)
 800d74a:	3a01      	subs	r2, #1
 800d74c:	2300      	movs	r3, #0
 800d74e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d752:	f7ff fe9d 	bl	800d490 <__multadd>
 800d756:	4607      	mov	r7, r0
 800d758:	10ad      	asrs	r5, r5, #2
 800d75a:	d03d      	beq.n	800d7d8 <__pow5mult+0xa0>
 800d75c:	69f4      	ldr	r4, [r6, #28]
 800d75e:	b97c      	cbnz	r4, 800d780 <__pow5mult+0x48>
 800d760:	2010      	movs	r0, #16
 800d762:	f7ff fd7f 	bl	800d264 <malloc>
 800d766:	4602      	mov	r2, r0
 800d768:	61f0      	str	r0, [r6, #28]
 800d76a:	b928      	cbnz	r0, 800d778 <__pow5mult+0x40>
 800d76c:	4b1d      	ldr	r3, [pc, #116]	; (800d7e4 <__pow5mult+0xac>)
 800d76e:	481e      	ldr	r0, [pc, #120]	; (800d7e8 <__pow5mult+0xb0>)
 800d770:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d774:	f7fe fe92 	bl	800c49c <__assert_func>
 800d778:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d77c:	6004      	str	r4, [r0, #0]
 800d77e:	60c4      	str	r4, [r0, #12]
 800d780:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d784:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d788:	b94c      	cbnz	r4, 800d79e <__pow5mult+0x66>
 800d78a:	f240 2171 	movw	r1, #625	; 0x271
 800d78e:	4630      	mov	r0, r6
 800d790:	f7ff ff12 	bl	800d5b8 <__i2b>
 800d794:	2300      	movs	r3, #0
 800d796:	f8c8 0008 	str.w	r0, [r8, #8]
 800d79a:	4604      	mov	r4, r0
 800d79c:	6003      	str	r3, [r0, #0]
 800d79e:	f04f 0900 	mov.w	r9, #0
 800d7a2:	07eb      	lsls	r3, r5, #31
 800d7a4:	d50a      	bpl.n	800d7bc <__pow5mult+0x84>
 800d7a6:	4639      	mov	r1, r7
 800d7a8:	4622      	mov	r2, r4
 800d7aa:	4630      	mov	r0, r6
 800d7ac:	f7ff ff1a 	bl	800d5e4 <__multiply>
 800d7b0:	4639      	mov	r1, r7
 800d7b2:	4680      	mov	r8, r0
 800d7b4:	4630      	mov	r0, r6
 800d7b6:	f7ff fe49 	bl	800d44c <_Bfree>
 800d7ba:	4647      	mov	r7, r8
 800d7bc:	106d      	asrs	r5, r5, #1
 800d7be:	d00b      	beq.n	800d7d8 <__pow5mult+0xa0>
 800d7c0:	6820      	ldr	r0, [r4, #0]
 800d7c2:	b938      	cbnz	r0, 800d7d4 <__pow5mult+0x9c>
 800d7c4:	4622      	mov	r2, r4
 800d7c6:	4621      	mov	r1, r4
 800d7c8:	4630      	mov	r0, r6
 800d7ca:	f7ff ff0b 	bl	800d5e4 <__multiply>
 800d7ce:	6020      	str	r0, [r4, #0]
 800d7d0:	f8c0 9000 	str.w	r9, [r0]
 800d7d4:	4604      	mov	r4, r0
 800d7d6:	e7e4      	b.n	800d7a2 <__pow5mult+0x6a>
 800d7d8:	4638      	mov	r0, r7
 800d7da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7de:	bf00      	nop
 800d7e0:	0800ee18 	.word	0x0800ee18
 800d7e4:	0800eb78 	.word	0x0800eb78
 800d7e8:	0800eccd 	.word	0x0800eccd

0800d7ec <__lshift>:
 800d7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7f0:	460c      	mov	r4, r1
 800d7f2:	6849      	ldr	r1, [r1, #4]
 800d7f4:	6923      	ldr	r3, [r4, #16]
 800d7f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d7fa:	68a3      	ldr	r3, [r4, #8]
 800d7fc:	4607      	mov	r7, r0
 800d7fe:	4691      	mov	r9, r2
 800d800:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d804:	f108 0601 	add.w	r6, r8, #1
 800d808:	42b3      	cmp	r3, r6
 800d80a:	db0b      	blt.n	800d824 <__lshift+0x38>
 800d80c:	4638      	mov	r0, r7
 800d80e:	f7ff fddd 	bl	800d3cc <_Balloc>
 800d812:	4605      	mov	r5, r0
 800d814:	b948      	cbnz	r0, 800d82a <__lshift+0x3e>
 800d816:	4602      	mov	r2, r0
 800d818:	4b28      	ldr	r3, [pc, #160]	; (800d8bc <__lshift+0xd0>)
 800d81a:	4829      	ldr	r0, [pc, #164]	; (800d8c0 <__lshift+0xd4>)
 800d81c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d820:	f7fe fe3c 	bl	800c49c <__assert_func>
 800d824:	3101      	adds	r1, #1
 800d826:	005b      	lsls	r3, r3, #1
 800d828:	e7ee      	b.n	800d808 <__lshift+0x1c>
 800d82a:	2300      	movs	r3, #0
 800d82c:	f100 0114 	add.w	r1, r0, #20
 800d830:	f100 0210 	add.w	r2, r0, #16
 800d834:	4618      	mov	r0, r3
 800d836:	4553      	cmp	r3, sl
 800d838:	db33      	blt.n	800d8a2 <__lshift+0xb6>
 800d83a:	6920      	ldr	r0, [r4, #16]
 800d83c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d840:	f104 0314 	add.w	r3, r4, #20
 800d844:	f019 091f 	ands.w	r9, r9, #31
 800d848:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d84c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d850:	d02b      	beq.n	800d8aa <__lshift+0xbe>
 800d852:	f1c9 0e20 	rsb	lr, r9, #32
 800d856:	468a      	mov	sl, r1
 800d858:	2200      	movs	r2, #0
 800d85a:	6818      	ldr	r0, [r3, #0]
 800d85c:	fa00 f009 	lsl.w	r0, r0, r9
 800d860:	4310      	orrs	r0, r2
 800d862:	f84a 0b04 	str.w	r0, [sl], #4
 800d866:	f853 2b04 	ldr.w	r2, [r3], #4
 800d86a:	459c      	cmp	ip, r3
 800d86c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d870:	d8f3      	bhi.n	800d85a <__lshift+0x6e>
 800d872:	ebac 0304 	sub.w	r3, ip, r4
 800d876:	3b15      	subs	r3, #21
 800d878:	f023 0303 	bic.w	r3, r3, #3
 800d87c:	3304      	adds	r3, #4
 800d87e:	f104 0015 	add.w	r0, r4, #21
 800d882:	4584      	cmp	ip, r0
 800d884:	bf38      	it	cc
 800d886:	2304      	movcc	r3, #4
 800d888:	50ca      	str	r2, [r1, r3]
 800d88a:	b10a      	cbz	r2, 800d890 <__lshift+0xa4>
 800d88c:	f108 0602 	add.w	r6, r8, #2
 800d890:	3e01      	subs	r6, #1
 800d892:	4638      	mov	r0, r7
 800d894:	612e      	str	r6, [r5, #16]
 800d896:	4621      	mov	r1, r4
 800d898:	f7ff fdd8 	bl	800d44c <_Bfree>
 800d89c:	4628      	mov	r0, r5
 800d89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	e7c5      	b.n	800d836 <__lshift+0x4a>
 800d8aa:	3904      	subs	r1, #4
 800d8ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d8b4:	459c      	cmp	ip, r3
 800d8b6:	d8f9      	bhi.n	800d8ac <__lshift+0xc0>
 800d8b8:	e7ea      	b.n	800d890 <__lshift+0xa4>
 800d8ba:	bf00      	nop
 800d8bc:	0800ecbc 	.word	0x0800ecbc
 800d8c0:	0800eccd 	.word	0x0800eccd

0800d8c4 <__mcmp>:
 800d8c4:	b530      	push	{r4, r5, lr}
 800d8c6:	6902      	ldr	r2, [r0, #16]
 800d8c8:	690c      	ldr	r4, [r1, #16]
 800d8ca:	1b12      	subs	r2, r2, r4
 800d8cc:	d10e      	bne.n	800d8ec <__mcmp+0x28>
 800d8ce:	f100 0314 	add.w	r3, r0, #20
 800d8d2:	3114      	adds	r1, #20
 800d8d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d8d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d8dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d8e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d8e4:	42a5      	cmp	r5, r4
 800d8e6:	d003      	beq.n	800d8f0 <__mcmp+0x2c>
 800d8e8:	d305      	bcc.n	800d8f6 <__mcmp+0x32>
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	4610      	mov	r0, r2
 800d8ee:	bd30      	pop	{r4, r5, pc}
 800d8f0:	4283      	cmp	r3, r0
 800d8f2:	d3f3      	bcc.n	800d8dc <__mcmp+0x18>
 800d8f4:	e7fa      	b.n	800d8ec <__mcmp+0x28>
 800d8f6:	f04f 32ff 	mov.w	r2, #4294967295
 800d8fa:	e7f7      	b.n	800d8ec <__mcmp+0x28>

0800d8fc <__mdiff>:
 800d8fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d900:	460c      	mov	r4, r1
 800d902:	4606      	mov	r6, r0
 800d904:	4611      	mov	r1, r2
 800d906:	4620      	mov	r0, r4
 800d908:	4690      	mov	r8, r2
 800d90a:	f7ff ffdb 	bl	800d8c4 <__mcmp>
 800d90e:	1e05      	subs	r5, r0, #0
 800d910:	d110      	bne.n	800d934 <__mdiff+0x38>
 800d912:	4629      	mov	r1, r5
 800d914:	4630      	mov	r0, r6
 800d916:	f7ff fd59 	bl	800d3cc <_Balloc>
 800d91a:	b930      	cbnz	r0, 800d92a <__mdiff+0x2e>
 800d91c:	4b3a      	ldr	r3, [pc, #232]	; (800da08 <__mdiff+0x10c>)
 800d91e:	4602      	mov	r2, r0
 800d920:	f240 2137 	movw	r1, #567	; 0x237
 800d924:	4839      	ldr	r0, [pc, #228]	; (800da0c <__mdiff+0x110>)
 800d926:	f7fe fdb9 	bl	800c49c <__assert_func>
 800d92a:	2301      	movs	r3, #1
 800d92c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d930:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d934:	bfa4      	itt	ge
 800d936:	4643      	movge	r3, r8
 800d938:	46a0      	movge	r8, r4
 800d93a:	4630      	mov	r0, r6
 800d93c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d940:	bfa6      	itte	ge
 800d942:	461c      	movge	r4, r3
 800d944:	2500      	movge	r5, #0
 800d946:	2501      	movlt	r5, #1
 800d948:	f7ff fd40 	bl	800d3cc <_Balloc>
 800d94c:	b920      	cbnz	r0, 800d958 <__mdiff+0x5c>
 800d94e:	4b2e      	ldr	r3, [pc, #184]	; (800da08 <__mdiff+0x10c>)
 800d950:	4602      	mov	r2, r0
 800d952:	f240 2145 	movw	r1, #581	; 0x245
 800d956:	e7e5      	b.n	800d924 <__mdiff+0x28>
 800d958:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d95c:	6926      	ldr	r6, [r4, #16]
 800d95e:	60c5      	str	r5, [r0, #12]
 800d960:	f104 0914 	add.w	r9, r4, #20
 800d964:	f108 0514 	add.w	r5, r8, #20
 800d968:	f100 0e14 	add.w	lr, r0, #20
 800d96c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d970:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d974:	f108 0210 	add.w	r2, r8, #16
 800d978:	46f2      	mov	sl, lr
 800d97a:	2100      	movs	r1, #0
 800d97c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d980:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d984:	fa11 f88b 	uxtah	r8, r1, fp
 800d988:	b299      	uxth	r1, r3
 800d98a:	0c1b      	lsrs	r3, r3, #16
 800d98c:	eba8 0801 	sub.w	r8, r8, r1
 800d990:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d994:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d998:	fa1f f888 	uxth.w	r8, r8
 800d99c:	1419      	asrs	r1, r3, #16
 800d99e:	454e      	cmp	r6, r9
 800d9a0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d9a4:	f84a 3b04 	str.w	r3, [sl], #4
 800d9a8:	d8e8      	bhi.n	800d97c <__mdiff+0x80>
 800d9aa:	1b33      	subs	r3, r6, r4
 800d9ac:	3b15      	subs	r3, #21
 800d9ae:	f023 0303 	bic.w	r3, r3, #3
 800d9b2:	3304      	adds	r3, #4
 800d9b4:	3415      	adds	r4, #21
 800d9b6:	42a6      	cmp	r6, r4
 800d9b8:	bf38      	it	cc
 800d9ba:	2304      	movcc	r3, #4
 800d9bc:	441d      	add	r5, r3
 800d9be:	4473      	add	r3, lr
 800d9c0:	469e      	mov	lr, r3
 800d9c2:	462e      	mov	r6, r5
 800d9c4:	4566      	cmp	r6, ip
 800d9c6:	d30e      	bcc.n	800d9e6 <__mdiff+0xea>
 800d9c8:	f10c 0203 	add.w	r2, ip, #3
 800d9cc:	1b52      	subs	r2, r2, r5
 800d9ce:	f022 0203 	bic.w	r2, r2, #3
 800d9d2:	3d03      	subs	r5, #3
 800d9d4:	45ac      	cmp	ip, r5
 800d9d6:	bf38      	it	cc
 800d9d8:	2200      	movcc	r2, #0
 800d9da:	4413      	add	r3, r2
 800d9dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d9e0:	b17a      	cbz	r2, 800da02 <__mdiff+0x106>
 800d9e2:	6107      	str	r7, [r0, #16]
 800d9e4:	e7a4      	b.n	800d930 <__mdiff+0x34>
 800d9e6:	f856 8b04 	ldr.w	r8, [r6], #4
 800d9ea:	fa11 f288 	uxtah	r2, r1, r8
 800d9ee:	1414      	asrs	r4, r2, #16
 800d9f0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d9f4:	b292      	uxth	r2, r2
 800d9f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d9fa:	f84e 2b04 	str.w	r2, [lr], #4
 800d9fe:	1421      	asrs	r1, r4, #16
 800da00:	e7e0      	b.n	800d9c4 <__mdiff+0xc8>
 800da02:	3f01      	subs	r7, #1
 800da04:	e7ea      	b.n	800d9dc <__mdiff+0xe0>
 800da06:	bf00      	nop
 800da08:	0800ecbc 	.word	0x0800ecbc
 800da0c:	0800eccd 	.word	0x0800eccd

0800da10 <__d2b>:
 800da10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800da14:	460f      	mov	r7, r1
 800da16:	2101      	movs	r1, #1
 800da18:	ec59 8b10 	vmov	r8, r9, d0
 800da1c:	4616      	mov	r6, r2
 800da1e:	f7ff fcd5 	bl	800d3cc <_Balloc>
 800da22:	4604      	mov	r4, r0
 800da24:	b930      	cbnz	r0, 800da34 <__d2b+0x24>
 800da26:	4602      	mov	r2, r0
 800da28:	4b24      	ldr	r3, [pc, #144]	; (800dabc <__d2b+0xac>)
 800da2a:	4825      	ldr	r0, [pc, #148]	; (800dac0 <__d2b+0xb0>)
 800da2c:	f240 310f 	movw	r1, #783	; 0x30f
 800da30:	f7fe fd34 	bl	800c49c <__assert_func>
 800da34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800da38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800da3c:	bb2d      	cbnz	r5, 800da8a <__d2b+0x7a>
 800da3e:	9301      	str	r3, [sp, #4]
 800da40:	f1b8 0300 	subs.w	r3, r8, #0
 800da44:	d026      	beq.n	800da94 <__d2b+0x84>
 800da46:	4668      	mov	r0, sp
 800da48:	9300      	str	r3, [sp, #0]
 800da4a:	f7ff fd87 	bl	800d55c <__lo0bits>
 800da4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800da52:	b1e8      	cbz	r0, 800da90 <__d2b+0x80>
 800da54:	f1c0 0320 	rsb	r3, r0, #32
 800da58:	fa02 f303 	lsl.w	r3, r2, r3
 800da5c:	430b      	orrs	r3, r1
 800da5e:	40c2      	lsrs	r2, r0
 800da60:	6163      	str	r3, [r4, #20]
 800da62:	9201      	str	r2, [sp, #4]
 800da64:	9b01      	ldr	r3, [sp, #4]
 800da66:	61a3      	str	r3, [r4, #24]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	bf14      	ite	ne
 800da6c:	2202      	movne	r2, #2
 800da6e:	2201      	moveq	r2, #1
 800da70:	6122      	str	r2, [r4, #16]
 800da72:	b1bd      	cbz	r5, 800daa4 <__d2b+0x94>
 800da74:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800da78:	4405      	add	r5, r0
 800da7a:	603d      	str	r5, [r7, #0]
 800da7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800da80:	6030      	str	r0, [r6, #0]
 800da82:	4620      	mov	r0, r4
 800da84:	b003      	add	sp, #12
 800da86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da8e:	e7d6      	b.n	800da3e <__d2b+0x2e>
 800da90:	6161      	str	r1, [r4, #20]
 800da92:	e7e7      	b.n	800da64 <__d2b+0x54>
 800da94:	a801      	add	r0, sp, #4
 800da96:	f7ff fd61 	bl	800d55c <__lo0bits>
 800da9a:	9b01      	ldr	r3, [sp, #4]
 800da9c:	6163      	str	r3, [r4, #20]
 800da9e:	3020      	adds	r0, #32
 800daa0:	2201      	movs	r2, #1
 800daa2:	e7e5      	b.n	800da70 <__d2b+0x60>
 800daa4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800daa8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800daac:	6038      	str	r0, [r7, #0]
 800daae:	6918      	ldr	r0, [r3, #16]
 800dab0:	f7ff fd34 	bl	800d51c <__hi0bits>
 800dab4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dab8:	e7e2      	b.n	800da80 <__d2b+0x70>
 800daba:	bf00      	nop
 800dabc:	0800ecbc 	.word	0x0800ecbc
 800dac0:	0800eccd 	.word	0x0800eccd

0800dac4 <__ssputs_r>:
 800dac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dac8:	688e      	ldr	r6, [r1, #8]
 800daca:	461f      	mov	r7, r3
 800dacc:	42be      	cmp	r6, r7
 800dace:	680b      	ldr	r3, [r1, #0]
 800dad0:	4682      	mov	sl, r0
 800dad2:	460c      	mov	r4, r1
 800dad4:	4690      	mov	r8, r2
 800dad6:	d82c      	bhi.n	800db32 <__ssputs_r+0x6e>
 800dad8:	898a      	ldrh	r2, [r1, #12]
 800dada:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dade:	d026      	beq.n	800db2e <__ssputs_r+0x6a>
 800dae0:	6965      	ldr	r5, [r4, #20]
 800dae2:	6909      	ldr	r1, [r1, #16]
 800dae4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dae8:	eba3 0901 	sub.w	r9, r3, r1
 800daec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800daf0:	1c7b      	adds	r3, r7, #1
 800daf2:	444b      	add	r3, r9
 800daf4:	106d      	asrs	r5, r5, #1
 800daf6:	429d      	cmp	r5, r3
 800daf8:	bf38      	it	cc
 800dafa:	461d      	movcc	r5, r3
 800dafc:	0553      	lsls	r3, r2, #21
 800dafe:	d527      	bpl.n	800db50 <__ssputs_r+0x8c>
 800db00:	4629      	mov	r1, r5
 800db02:	f7ff fbd7 	bl	800d2b4 <_malloc_r>
 800db06:	4606      	mov	r6, r0
 800db08:	b360      	cbz	r0, 800db64 <__ssputs_r+0xa0>
 800db0a:	6921      	ldr	r1, [r4, #16]
 800db0c:	464a      	mov	r2, r9
 800db0e:	f7fe fcb6 	bl	800c47e <memcpy>
 800db12:	89a3      	ldrh	r3, [r4, #12]
 800db14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db1c:	81a3      	strh	r3, [r4, #12]
 800db1e:	6126      	str	r6, [r4, #16]
 800db20:	6165      	str	r5, [r4, #20]
 800db22:	444e      	add	r6, r9
 800db24:	eba5 0509 	sub.w	r5, r5, r9
 800db28:	6026      	str	r6, [r4, #0]
 800db2a:	60a5      	str	r5, [r4, #8]
 800db2c:	463e      	mov	r6, r7
 800db2e:	42be      	cmp	r6, r7
 800db30:	d900      	bls.n	800db34 <__ssputs_r+0x70>
 800db32:	463e      	mov	r6, r7
 800db34:	6820      	ldr	r0, [r4, #0]
 800db36:	4632      	mov	r2, r6
 800db38:	4641      	mov	r1, r8
 800db3a:	f000 fb81 	bl	800e240 <memmove>
 800db3e:	68a3      	ldr	r3, [r4, #8]
 800db40:	1b9b      	subs	r3, r3, r6
 800db42:	60a3      	str	r3, [r4, #8]
 800db44:	6823      	ldr	r3, [r4, #0]
 800db46:	4433      	add	r3, r6
 800db48:	6023      	str	r3, [r4, #0]
 800db4a:	2000      	movs	r0, #0
 800db4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db50:	462a      	mov	r2, r5
 800db52:	f000 fbf0 	bl	800e336 <_realloc_r>
 800db56:	4606      	mov	r6, r0
 800db58:	2800      	cmp	r0, #0
 800db5a:	d1e0      	bne.n	800db1e <__ssputs_r+0x5a>
 800db5c:	6921      	ldr	r1, [r4, #16]
 800db5e:	4650      	mov	r0, sl
 800db60:	f7ff fb34 	bl	800d1cc <_free_r>
 800db64:	230c      	movs	r3, #12
 800db66:	f8ca 3000 	str.w	r3, [sl]
 800db6a:	89a3      	ldrh	r3, [r4, #12]
 800db6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db70:	81a3      	strh	r3, [r4, #12]
 800db72:	f04f 30ff 	mov.w	r0, #4294967295
 800db76:	e7e9      	b.n	800db4c <__ssputs_r+0x88>

0800db78 <_svfiprintf_r>:
 800db78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db7c:	4698      	mov	r8, r3
 800db7e:	898b      	ldrh	r3, [r1, #12]
 800db80:	061b      	lsls	r3, r3, #24
 800db82:	b09d      	sub	sp, #116	; 0x74
 800db84:	4607      	mov	r7, r0
 800db86:	460d      	mov	r5, r1
 800db88:	4614      	mov	r4, r2
 800db8a:	d50e      	bpl.n	800dbaa <_svfiprintf_r+0x32>
 800db8c:	690b      	ldr	r3, [r1, #16]
 800db8e:	b963      	cbnz	r3, 800dbaa <_svfiprintf_r+0x32>
 800db90:	2140      	movs	r1, #64	; 0x40
 800db92:	f7ff fb8f 	bl	800d2b4 <_malloc_r>
 800db96:	6028      	str	r0, [r5, #0]
 800db98:	6128      	str	r0, [r5, #16]
 800db9a:	b920      	cbnz	r0, 800dba6 <_svfiprintf_r+0x2e>
 800db9c:	230c      	movs	r3, #12
 800db9e:	603b      	str	r3, [r7, #0]
 800dba0:	f04f 30ff 	mov.w	r0, #4294967295
 800dba4:	e0d0      	b.n	800dd48 <_svfiprintf_r+0x1d0>
 800dba6:	2340      	movs	r3, #64	; 0x40
 800dba8:	616b      	str	r3, [r5, #20]
 800dbaa:	2300      	movs	r3, #0
 800dbac:	9309      	str	r3, [sp, #36]	; 0x24
 800dbae:	2320      	movs	r3, #32
 800dbb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbb8:	2330      	movs	r3, #48	; 0x30
 800dbba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dd60 <_svfiprintf_r+0x1e8>
 800dbbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbc2:	f04f 0901 	mov.w	r9, #1
 800dbc6:	4623      	mov	r3, r4
 800dbc8:	469a      	mov	sl, r3
 800dbca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbce:	b10a      	cbz	r2, 800dbd4 <_svfiprintf_r+0x5c>
 800dbd0:	2a25      	cmp	r2, #37	; 0x25
 800dbd2:	d1f9      	bne.n	800dbc8 <_svfiprintf_r+0x50>
 800dbd4:	ebba 0b04 	subs.w	fp, sl, r4
 800dbd8:	d00b      	beq.n	800dbf2 <_svfiprintf_r+0x7a>
 800dbda:	465b      	mov	r3, fp
 800dbdc:	4622      	mov	r2, r4
 800dbde:	4629      	mov	r1, r5
 800dbe0:	4638      	mov	r0, r7
 800dbe2:	f7ff ff6f 	bl	800dac4 <__ssputs_r>
 800dbe6:	3001      	adds	r0, #1
 800dbe8:	f000 80a9 	beq.w	800dd3e <_svfiprintf_r+0x1c6>
 800dbec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbee:	445a      	add	r2, fp
 800dbf0:	9209      	str	r2, [sp, #36]	; 0x24
 800dbf2:	f89a 3000 	ldrb.w	r3, [sl]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f000 80a1 	beq.w	800dd3e <_svfiprintf_r+0x1c6>
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	f04f 32ff 	mov.w	r2, #4294967295
 800dc02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc06:	f10a 0a01 	add.w	sl, sl, #1
 800dc0a:	9304      	str	r3, [sp, #16]
 800dc0c:	9307      	str	r3, [sp, #28]
 800dc0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc12:	931a      	str	r3, [sp, #104]	; 0x68
 800dc14:	4654      	mov	r4, sl
 800dc16:	2205      	movs	r2, #5
 800dc18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc1c:	4850      	ldr	r0, [pc, #320]	; (800dd60 <_svfiprintf_r+0x1e8>)
 800dc1e:	f7f2 fad7 	bl	80001d0 <memchr>
 800dc22:	9a04      	ldr	r2, [sp, #16]
 800dc24:	b9d8      	cbnz	r0, 800dc5e <_svfiprintf_r+0xe6>
 800dc26:	06d0      	lsls	r0, r2, #27
 800dc28:	bf44      	itt	mi
 800dc2a:	2320      	movmi	r3, #32
 800dc2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc30:	0711      	lsls	r1, r2, #28
 800dc32:	bf44      	itt	mi
 800dc34:	232b      	movmi	r3, #43	; 0x2b
 800dc36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc3a:	f89a 3000 	ldrb.w	r3, [sl]
 800dc3e:	2b2a      	cmp	r3, #42	; 0x2a
 800dc40:	d015      	beq.n	800dc6e <_svfiprintf_r+0xf6>
 800dc42:	9a07      	ldr	r2, [sp, #28]
 800dc44:	4654      	mov	r4, sl
 800dc46:	2000      	movs	r0, #0
 800dc48:	f04f 0c0a 	mov.w	ip, #10
 800dc4c:	4621      	mov	r1, r4
 800dc4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc52:	3b30      	subs	r3, #48	; 0x30
 800dc54:	2b09      	cmp	r3, #9
 800dc56:	d94d      	bls.n	800dcf4 <_svfiprintf_r+0x17c>
 800dc58:	b1b0      	cbz	r0, 800dc88 <_svfiprintf_r+0x110>
 800dc5a:	9207      	str	r2, [sp, #28]
 800dc5c:	e014      	b.n	800dc88 <_svfiprintf_r+0x110>
 800dc5e:	eba0 0308 	sub.w	r3, r0, r8
 800dc62:	fa09 f303 	lsl.w	r3, r9, r3
 800dc66:	4313      	orrs	r3, r2
 800dc68:	9304      	str	r3, [sp, #16]
 800dc6a:	46a2      	mov	sl, r4
 800dc6c:	e7d2      	b.n	800dc14 <_svfiprintf_r+0x9c>
 800dc6e:	9b03      	ldr	r3, [sp, #12]
 800dc70:	1d19      	adds	r1, r3, #4
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	9103      	str	r1, [sp, #12]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	bfbb      	ittet	lt
 800dc7a:	425b      	neglt	r3, r3
 800dc7c:	f042 0202 	orrlt.w	r2, r2, #2
 800dc80:	9307      	strge	r3, [sp, #28]
 800dc82:	9307      	strlt	r3, [sp, #28]
 800dc84:	bfb8      	it	lt
 800dc86:	9204      	strlt	r2, [sp, #16]
 800dc88:	7823      	ldrb	r3, [r4, #0]
 800dc8a:	2b2e      	cmp	r3, #46	; 0x2e
 800dc8c:	d10c      	bne.n	800dca8 <_svfiprintf_r+0x130>
 800dc8e:	7863      	ldrb	r3, [r4, #1]
 800dc90:	2b2a      	cmp	r3, #42	; 0x2a
 800dc92:	d134      	bne.n	800dcfe <_svfiprintf_r+0x186>
 800dc94:	9b03      	ldr	r3, [sp, #12]
 800dc96:	1d1a      	adds	r2, r3, #4
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	9203      	str	r2, [sp, #12]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	bfb8      	it	lt
 800dca0:	f04f 33ff 	movlt.w	r3, #4294967295
 800dca4:	3402      	adds	r4, #2
 800dca6:	9305      	str	r3, [sp, #20]
 800dca8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800dd70 <_svfiprintf_r+0x1f8>
 800dcac:	7821      	ldrb	r1, [r4, #0]
 800dcae:	2203      	movs	r2, #3
 800dcb0:	4650      	mov	r0, sl
 800dcb2:	f7f2 fa8d 	bl	80001d0 <memchr>
 800dcb6:	b138      	cbz	r0, 800dcc8 <_svfiprintf_r+0x150>
 800dcb8:	9b04      	ldr	r3, [sp, #16]
 800dcba:	eba0 000a 	sub.w	r0, r0, sl
 800dcbe:	2240      	movs	r2, #64	; 0x40
 800dcc0:	4082      	lsls	r2, r0
 800dcc2:	4313      	orrs	r3, r2
 800dcc4:	3401      	adds	r4, #1
 800dcc6:	9304      	str	r3, [sp, #16]
 800dcc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dccc:	4825      	ldr	r0, [pc, #148]	; (800dd64 <_svfiprintf_r+0x1ec>)
 800dcce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dcd2:	2206      	movs	r2, #6
 800dcd4:	f7f2 fa7c 	bl	80001d0 <memchr>
 800dcd8:	2800      	cmp	r0, #0
 800dcda:	d038      	beq.n	800dd4e <_svfiprintf_r+0x1d6>
 800dcdc:	4b22      	ldr	r3, [pc, #136]	; (800dd68 <_svfiprintf_r+0x1f0>)
 800dcde:	bb1b      	cbnz	r3, 800dd28 <_svfiprintf_r+0x1b0>
 800dce0:	9b03      	ldr	r3, [sp, #12]
 800dce2:	3307      	adds	r3, #7
 800dce4:	f023 0307 	bic.w	r3, r3, #7
 800dce8:	3308      	adds	r3, #8
 800dcea:	9303      	str	r3, [sp, #12]
 800dcec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcee:	4433      	add	r3, r6
 800dcf0:	9309      	str	r3, [sp, #36]	; 0x24
 800dcf2:	e768      	b.n	800dbc6 <_svfiprintf_r+0x4e>
 800dcf4:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcf8:	460c      	mov	r4, r1
 800dcfa:	2001      	movs	r0, #1
 800dcfc:	e7a6      	b.n	800dc4c <_svfiprintf_r+0xd4>
 800dcfe:	2300      	movs	r3, #0
 800dd00:	3401      	adds	r4, #1
 800dd02:	9305      	str	r3, [sp, #20]
 800dd04:	4619      	mov	r1, r3
 800dd06:	f04f 0c0a 	mov.w	ip, #10
 800dd0a:	4620      	mov	r0, r4
 800dd0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd10:	3a30      	subs	r2, #48	; 0x30
 800dd12:	2a09      	cmp	r2, #9
 800dd14:	d903      	bls.n	800dd1e <_svfiprintf_r+0x1a6>
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d0c6      	beq.n	800dca8 <_svfiprintf_r+0x130>
 800dd1a:	9105      	str	r1, [sp, #20]
 800dd1c:	e7c4      	b.n	800dca8 <_svfiprintf_r+0x130>
 800dd1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd22:	4604      	mov	r4, r0
 800dd24:	2301      	movs	r3, #1
 800dd26:	e7f0      	b.n	800dd0a <_svfiprintf_r+0x192>
 800dd28:	ab03      	add	r3, sp, #12
 800dd2a:	9300      	str	r3, [sp, #0]
 800dd2c:	462a      	mov	r2, r5
 800dd2e:	4b0f      	ldr	r3, [pc, #60]	; (800dd6c <_svfiprintf_r+0x1f4>)
 800dd30:	a904      	add	r1, sp, #16
 800dd32:	4638      	mov	r0, r7
 800dd34:	f7fd fd36 	bl	800b7a4 <_printf_float>
 800dd38:	1c42      	adds	r2, r0, #1
 800dd3a:	4606      	mov	r6, r0
 800dd3c:	d1d6      	bne.n	800dcec <_svfiprintf_r+0x174>
 800dd3e:	89ab      	ldrh	r3, [r5, #12]
 800dd40:	065b      	lsls	r3, r3, #25
 800dd42:	f53f af2d 	bmi.w	800dba0 <_svfiprintf_r+0x28>
 800dd46:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd48:	b01d      	add	sp, #116	; 0x74
 800dd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd4e:	ab03      	add	r3, sp, #12
 800dd50:	9300      	str	r3, [sp, #0]
 800dd52:	462a      	mov	r2, r5
 800dd54:	4b05      	ldr	r3, [pc, #20]	; (800dd6c <_svfiprintf_r+0x1f4>)
 800dd56:	a904      	add	r1, sp, #16
 800dd58:	4638      	mov	r0, r7
 800dd5a:	f7fd ffc7 	bl	800bcec <_printf_i>
 800dd5e:	e7eb      	b.n	800dd38 <_svfiprintf_r+0x1c0>
 800dd60:	0800ee24 	.word	0x0800ee24
 800dd64:	0800ee2e 	.word	0x0800ee2e
 800dd68:	0800b7a5 	.word	0x0800b7a5
 800dd6c:	0800dac5 	.word	0x0800dac5
 800dd70:	0800ee2a 	.word	0x0800ee2a

0800dd74 <__sfputc_r>:
 800dd74:	6893      	ldr	r3, [r2, #8]
 800dd76:	3b01      	subs	r3, #1
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	b410      	push	{r4}
 800dd7c:	6093      	str	r3, [r2, #8]
 800dd7e:	da08      	bge.n	800dd92 <__sfputc_r+0x1e>
 800dd80:	6994      	ldr	r4, [r2, #24]
 800dd82:	42a3      	cmp	r3, r4
 800dd84:	db01      	blt.n	800dd8a <__sfputc_r+0x16>
 800dd86:	290a      	cmp	r1, #10
 800dd88:	d103      	bne.n	800dd92 <__sfputc_r+0x1e>
 800dd8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd8e:	f7fe ba62 	b.w	800c256 <__swbuf_r>
 800dd92:	6813      	ldr	r3, [r2, #0]
 800dd94:	1c58      	adds	r0, r3, #1
 800dd96:	6010      	str	r0, [r2, #0]
 800dd98:	7019      	strb	r1, [r3, #0]
 800dd9a:	4608      	mov	r0, r1
 800dd9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dda0:	4770      	bx	lr

0800dda2 <__sfputs_r>:
 800dda2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dda4:	4606      	mov	r6, r0
 800dda6:	460f      	mov	r7, r1
 800dda8:	4614      	mov	r4, r2
 800ddaa:	18d5      	adds	r5, r2, r3
 800ddac:	42ac      	cmp	r4, r5
 800ddae:	d101      	bne.n	800ddb4 <__sfputs_r+0x12>
 800ddb0:	2000      	movs	r0, #0
 800ddb2:	e007      	b.n	800ddc4 <__sfputs_r+0x22>
 800ddb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddb8:	463a      	mov	r2, r7
 800ddba:	4630      	mov	r0, r6
 800ddbc:	f7ff ffda 	bl	800dd74 <__sfputc_r>
 800ddc0:	1c43      	adds	r3, r0, #1
 800ddc2:	d1f3      	bne.n	800ddac <__sfputs_r+0xa>
 800ddc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ddc8 <_vfiprintf_r>:
 800ddc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddcc:	460d      	mov	r5, r1
 800ddce:	b09d      	sub	sp, #116	; 0x74
 800ddd0:	4614      	mov	r4, r2
 800ddd2:	4698      	mov	r8, r3
 800ddd4:	4606      	mov	r6, r0
 800ddd6:	b118      	cbz	r0, 800dde0 <_vfiprintf_r+0x18>
 800ddd8:	6a03      	ldr	r3, [r0, #32]
 800ddda:	b90b      	cbnz	r3, 800dde0 <_vfiprintf_r+0x18>
 800dddc:	f7fe f934 	bl	800c048 <__sinit>
 800dde0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dde2:	07d9      	lsls	r1, r3, #31
 800dde4:	d405      	bmi.n	800ddf2 <_vfiprintf_r+0x2a>
 800dde6:	89ab      	ldrh	r3, [r5, #12]
 800dde8:	059a      	lsls	r2, r3, #22
 800ddea:	d402      	bmi.n	800ddf2 <_vfiprintf_r+0x2a>
 800ddec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddee:	f7fe fb44 	bl	800c47a <__retarget_lock_acquire_recursive>
 800ddf2:	89ab      	ldrh	r3, [r5, #12]
 800ddf4:	071b      	lsls	r3, r3, #28
 800ddf6:	d501      	bpl.n	800ddfc <_vfiprintf_r+0x34>
 800ddf8:	692b      	ldr	r3, [r5, #16]
 800ddfa:	b99b      	cbnz	r3, 800de24 <_vfiprintf_r+0x5c>
 800ddfc:	4629      	mov	r1, r5
 800ddfe:	4630      	mov	r0, r6
 800de00:	f7fe fa66 	bl	800c2d0 <__swsetup_r>
 800de04:	b170      	cbz	r0, 800de24 <_vfiprintf_r+0x5c>
 800de06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de08:	07dc      	lsls	r4, r3, #31
 800de0a:	d504      	bpl.n	800de16 <_vfiprintf_r+0x4e>
 800de0c:	f04f 30ff 	mov.w	r0, #4294967295
 800de10:	b01d      	add	sp, #116	; 0x74
 800de12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de16:	89ab      	ldrh	r3, [r5, #12]
 800de18:	0598      	lsls	r0, r3, #22
 800de1a:	d4f7      	bmi.n	800de0c <_vfiprintf_r+0x44>
 800de1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de1e:	f7fe fb2d 	bl	800c47c <__retarget_lock_release_recursive>
 800de22:	e7f3      	b.n	800de0c <_vfiprintf_r+0x44>
 800de24:	2300      	movs	r3, #0
 800de26:	9309      	str	r3, [sp, #36]	; 0x24
 800de28:	2320      	movs	r3, #32
 800de2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800de32:	2330      	movs	r3, #48	; 0x30
 800de34:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800dfe8 <_vfiprintf_r+0x220>
 800de38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de3c:	f04f 0901 	mov.w	r9, #1
 800de40:	4623      	mov	r3, r4
 800de42:	469a      	mov	sl, r3
 800de44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de48:	b10a      	cbz	r2, 800de4e <_vfiprintf_r+0x86>
 800de4a:	2a25      	cmp	r2, #37	; 0x25
 800de4c:	d1f9      	bne.n	800de42 <_vfiprintf_r+0x7a>
 800de4e:	ebba 0b04 	subs.w	fp, sl, r4
 800de52:	d00b      	beq.n	800de6c <_vfiprintf_r+0xa4>
 800de54:	465b      	mov	r3, fp
 800de56:	4622      	mov	r2, r4
 800de58:	4629      	mov	r1, r5
 800de5a:	4630      	mov	r0, r6
 800de5c:	f7ff ffa1 	bl	800dda2 <__sfputs_r>
 800de60:	3001      	adds	r0, #1
 800de62:	f000 80a9 	beq.w	800dfb8 <_vfiprintf_r+0x1f0>
 800de66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de68:	445a      	add	r2, fp
 800de6a:	9209      	str	r2, [sp, #36]	; 0x24
 800de6c:	f89a 3000 	ldrb.w	r3, [sl]
 800de70:	2b00      	cmp	r3, #0
 800de72:	f000 80a1 	beq.w	800dfb8 <_vfiprintf_r+0x1f0>
 800de76:	2300      	movs	r3, #0
 800de78:	f04f 32ff 	mov.w	r2, #4294967295
 800de7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de80:	f10a 0a01 	add.w	sl, sl, #1
 800de84:	9304      	str	r3, [sp, #16]
 800de86:	9307      	str	r3, [sp, #28]
 800de88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de8c:	931a      	str	r3, [sp, #104]	; 0x68
 800de8e:	4654      	mov	r4, sl
 800de90:	2205      	movs	r2, #5
 800de92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de96:	4854      	ldr	r0, [pc, #336]	; (800dfe8 <_vfiprintf_r+0x220>)
 800de98:	f7f2 f99a 	bl	80001d0 <memchr>
 800de9c:	9a04      	ldr	r2, [sp, #16]
 800de9e:	b9d8      	cbnz	r0, 800ded8 <_vfiprintf_r+0x110>
 800dea0:	06d1      	lsls	r1, r2, #27
 800dea2:	bf44      	itt	mi
 800dea4:	2320      	movmi	r3, #32
 800dea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800deaa:	0713      	lsls	r3, r2, #28
 800deac:	bf44      	itt	mi
 800deae:	232b      	movmi	r3, #43	; 0x2b
 800deb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800deb4:	f89a 3000 	ldrb.w	r3, [sl]
 800deb8:	2b2a      	cmp	r3, #42	; 0x2a
 800deba:	d015      	beq.n	800dee8 <_vfiprintf_r+0x120>
 800debc:	9a07      	ldr	r2, [sp, #28]
 800debe:	4654      	mov	r4, sl
 800dec0:	2000      	movs	r0, #0
 800dec2:	f04f 0c0a 	mov.w	ip, #10
 800dec6:	4621      	mov	r1, r4
 800dec8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800decc:	3b30      	subs	r3, #48	; 0x30
 800dece:	2b09      	cmp	r3, #9
 800ded0:	d94d      	bls.n	800df6e <_vfiprintf_r+0x1a6>
 800ded2:	b1b0      	cbz	r0, 800df02 <_vfiprintf_r+0x13a>
 800ded4:	9207      	str	r2, [sp, #28]
 800ded6:	e014      	b.n	800df02 <_vfiprintf_r+0x13a>
 800ded8:	eba0 0308 	sub.w	r3, r0, r8
 800dedc:	fa09 f303 	lsl.w	r3, r9, r3
 800dee0:	4313      	orrs	r3, r2
 800dee2:	9304      	str	r3, [sp, #16]
 800dee4:	46a2      	mov	sl, r4
 800dee6:	e7d2      	b.n	800de8e <_vfiprintf_r+0xc6>
 800dee8:	9b03      	ldr	r3, [sp, #12]
 800deea:	1d19      	adds	r1, r3, #4
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	9103      	str	r1, [sp, #12]
 800def0:	2b00      	cmp	r3, #0
 800def2:	bfbb      	ittet	lt
 800def4:	425b      	neglt	r3, r3
 800def6:	f042 0202 	orrlt.w	r2, r2, #2
 800defa:	9307      	strge	r3, [sp, #28]
 800defc:	9307      	strlt	r3, [sp, #28]
 800defe:	bfb8      	it	lt
 800df00:	9204      	strlt	r2, [sp, #16]
 800df02:	7823      	ldrb	r3, [r4, #0]
 800df04:	2b2e      	cmp	r3, #46	; 0x2e
 800df06:	d10c      	bne.n	800df22 <_vfiprintf_r+0x15a>
 800df08:	7863      	ldrb	r3, [r4, #1]
 800df0a:	2b2a      	cmp	r3, #42	; 0x2a
 800df0c:	d134      	bne.n	800df78 <_vfiprintf_r+0x1b0>
 800df0e:	9b03      	ldr	r3, [sp, #12]
 800df10:	1d1a      	adds	r2, r3, #4
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	9203      	str	r2, [sp, #12]
 800df16:	2b00      	cmp	r3, #0
 800df18:	bfb8      	it	lt
 800df1a:	f04f 33ff 	movlt.w	r3, #4294967295
 800df1e:	3402      	adds	r4, #2
 800df20:	9305      	str	r3, [sp, #20]
 800df22:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800dff8 <_vfiprintf_r+0x230>
 800df26:	7821      	ldrb	r1, [r4, #0]
 800df28:	2203      	movs	r2, #3
 800df2a:	4650      	mov	r0, sl
 800df2c:	f7f2 f950 	bl	80001d0 <memchr>
 800df30:	b138      	cbz	r0, 800df42 <_vfiprintf_r+0x17a>
 800df32:	9b04      	ldr	r3, [sp, #16]
 800df34:	eba0 000a 	sub.w	r0, r0, sl
 800df38:	2240      	movs	r2, #64	; 0x40
 800df3a:	4082      	lsls	r2, r0
 800df3c:	4313      	orrs	r3, r2
 800df3e:	3401      	adds	r4, #1
 800df40:	9304      	str	r3, [sp, #16]
 800df42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df46:	4829      	ldr	r0, [pc, #164]	; (800dfec <_vfiprintf_r+0x224>)
 800df48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df4c:	2206      	movs	r2, #6
 800df4e:	f7f2 f93f 	bl	80001d0 <memchr>
 800df52:	2800      	cmp	r0, #0
 800df54:	d03f      	beq.n	800dfd6 <_vfiprintf_r+0x20e>
 800df56:	4b26      	ldr	r3, [pc, #152]	; (800dff0 <_vfiprintf_r+0x228>)
 800df58:	bb1b      	cbnz	r3, 800dfa2 <_vfiprintf_r+0x1da>
 800df5a:	9b03      	ldr	r3, [sp, #12]
 800df5c:	3307      	adds	r3, #7
 800df5e:	f023 0307 	bic.w	r3, r3, #7
 800df62:	3308      	adds	r3, #8
 800df64:	9303      	str	r3, [sp, #12]
 800df66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df68:	443b      	add	r3, r7
 800df6a:	9309      	str	r3, [sp, #36]	; 0x24
 800df6c:	e768      	b.n	800de40 <_vfiprintf_r+0x78>
 800df6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800df72:	460c      	mov	r4, r1
 800df74:	2001      	movs	r0, #1
 800df76:	e7a6      	b.n	800dec6 <_vfiprintf_r+0xfe>
 800df78:	2300      	movs	r3, #0
 800df7a:	3401      	adds	r4, #1
 800df7c:	9305      	str	r3, [sp, #20]
 800df7e:	4619      	mov	r1, r3
 800df80:	f04f 0c0a 	mov.w	ip, #10
 800df84:	4620      	mov	r0, r4
 800df86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df8a:	3a30      	subs	r2, #48	; 0x30
 800df8c:	2a09      	cmp	r2, #9
 800df8e:	d903      	bls.n	800df98 <_vfiprintf_r+0x1d0>
 800df90:	2b00      	cmp	r3, #0
 800df92:	d0c6      	beq.n	800df22 <_vfiprintf_r+0x15a>
 800df94:	9105      	str	r1, [sp, #20]
 800df96:	e7c4      	b.n	800df22 <_vfiprintf_r+0x15a>
 800df98:	fb0c 2101 	mla	r1, ip, r1, r2
 800df9c:	4604      	mov	r4, r0
 800df9e:	2301      	movs	r3, #1
 800dfa0:	e7f0      	b.n	800df84 <_vfiprintf_r+0x1bc>
 800dfa2:	ab03      	add	r3, sp, #12
 800dfa4:	9300      	str	r3, [sp, #0]
 800dfa6:	462a      	mov	r2, r5
 800dfa8:	4b12      	ldr	r3, [pc, #72]	; (800dff4 <_vfiprintf_r+0x22c>)
 800dfaa:	a904      	add	r1, sp, #16
 800dfac:	4630      	mov	r0, r6
 800dfae:	f7fd fbf9 	bl	800b7a4 <_printf_float>
 800dfb2:	4607      	mov	r7, r0
 800dfb4:	1c78      	adds	r0, r7, #1
 800dfb6:	d1d6      	bne.n	800df66 <_vfiprintf_r+0x19e>
 800dfb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfba:	07d9      	lsls	r1, r3, #31
 800dfbc:	d405      	bmi.n	800dfca <_vfiprintf_r+0x202>
 800dfbe:	89ab      	ldrh	r3, [r5, #12]
 800dfc0:	059a      	lsls	r2, r3, #22
 800dfc2:	d402      	bmi.n	800dfca <_vfiprintf_r+0x202>
 800dfc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfc6:	f7fe fa59 	bl	800c47c <__retarget_lock_release_recursive>
 800dfca:	89ab      	ldrh	r3, [r5, #12]
 800dfcc:	065b      	lsls	r3, r3, #25
 800dfce:	f53f af1d 	bmi.w	800de0c <_vfiprintf_r+0x44>
 800dfd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfd4:	e71c      	b.n	800de10 <_vfiprintf_r+0x48>
 800dfd6:	ab03      	add	r3, sp, #12
 800dfd8:	9300      	str	r3, [sp, #0]
 800dfda:	462a      	mov	r2, r5
 800dfdc:	4b05      	ldr	r3, [pc, #20]	; (800dff4 <_vfiprintf_r+0x22c>)
 800dfde:	a904      	add	r1, sp, #16
 800dfe0:	4630      	mov	r0, r6
 800dfe2:	f7fd fe83 	bl	800bcec <_printf_i>
 800dfe6:	e7e4      	b.n	800dfb2 <_vfiprintf_r+0x1ea>
 800dfe8:	0800ee24 	.word	0x0800ee24
 800dfec:	0800ee2e 	.word	0x0800ee2e
 800dff0:	0800b7a5 	.word	0x0800b7a5
 800dff4:	0800dda3 	.word	0x0800dda3
 800dff8:	0800ee2a 	.word	0x0800ee2a

0800dffc <__sflush_r>:
 800dffc:	898a      	ldrh	r2, [r1, #12]
 800dffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e002:	4605      	mov	r5, r0
 800e004:	0710      	lsls	r0, r2, #28
 800e006:	460c      	mov	r4, r1
 800e008:	d458      	bmi.n	800e0bc <__sflush_r+0xc0>
 800e00a:	684b      	ldr	r3, [r1, #4]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	dc05      	bgt.n	800e01c <__sflush_r+0x20>
 800e010:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e012:	2b00      	cmp	r3, #0
 800e014:	dc02      	bgt.n	800e01c <__sflush_r+0x20>
 800e016:	2000      	movs	r0, #0
 800e018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e01c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e01e:	2e00      	cmp	r6, #0
 800e020:	d0f9      	beq.n	800e016 <__sflush_r+0x1a>
 800e022:	2300      	movs	r3, #0
 800e024:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e028:	682f      	ldr	r7, [r5, #0]
 800e02a:	6a21      	ldr	r1, [r4, #32]
 800e02c:	602b      	str	r3, [r5, #0]
 800e02e:	d032      	beq.n	800e096 <__sflush_r+0x9a>
 800e030:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e032:	89a3      	ldrh	r3, [r4, #12]
 800e034:	075a      	lsls	r2, r3, #29
 800e036:	d505      	bpl.n	800e044 <__sflush_r+0x48>
 800e038:	6863      	ldr	r3, [r4, #4]
 800e03a:	1ac0      	subs	r0, r0, r3
 800e03c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e03e:	b10b      	cbz	r3, 800e044 <__sflush_r+0x48>
 800e040:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e042:	1ac0      	subs	r0, r0, r3
 800e044:	2300      	movs	r3, #0
 800e046:	4602      	mov	r2, r0
 800e048:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e04a:	6a21      	ldr	r1, [r4, #32]
 800e04c:	4628      	mov	r0, r5
 800e04e:	47b0      	blx	r6
 800e050:	1c43      	adds	r3, r0, #1
 800e052:	89a3      	ldrh	r3, [r4, #12]
 800e054:	d106      	bne.n	800e064 <__sflush_r+0x68>
 800e056:	6829      	ldr	r1, [r5, #0]
 800e058:	291d      	cmp	r1, #29
 800e05a:	d82b      	bhi.n	800e0b4 <__sflush_r+0xb8>
 800e05c:	4a29      	ldr	r2, [pc, #164]	; (800e104 <__sflush_r+0x108>)
 800e05e:	410a      	asrs	r2, r1
 800e060:	07d6      	lsls	r6, r2, #31
 800e062:	d427      	bmi.n	800e0b4 <__sflush_r+0xb8>
 800e064:	2200      	movs	r2, #0
 800e066:	6062      	str	r2, [r4, #4]
 800e068:	04d9      	lsls	r1, r3, #19
 800e06a:	6922      	ldr	r2, [r4, #16]
 800e06c:	6022      	str	r2, [r4, #0]
 800e06e:	d504      	bpl.n	800e07a <__sflush_r+0x7e>
 800e070:	1c42      	adds	r2, r0, #1
 800e072:	d101      	bne.n	800e078 <__sflush_r+0x7c>
 800e074:	682b      	ldr	r3, [r5, #0]
 800e076:	b903      	cbnz	r3, 800e07a <__sflush_r+0x7e>
 800e078:	6560      	str	r0, [r4, #84]	; 0x54
 800e07a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e07c:	602f      	str	r7, [r5, #0]
 800e07e:	2900      	cmp	r1, #0
 800e080:	d0c9      	beq.n	800e016 <__sflush_r+0x1a>
 800e082:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e086:	4299      	cmp	r1, r3
 800e088:	d002      	beq.n	800e090 <__sflush_r+0x94>
 800e08a:	4628      	mov	r0, r5
 800e08c:	f7ff f89e 	bl	800d1cc <_free_r>
 800e090:	2000      	movs	r0, #0
 800e092:	6360      	str	r0, [r4, #52]	; 0x34
 800e094:	e7c0      	b.n	800e018 <__sflush_r+0x1c>
 800e096:	2301      	movs	r3, #1
 800e098:	4628      	mov	r0, r5
 800e09a:	47b0      	blx	r6
 800e09c:	1c41      	adds	r1, r0, #1
 800e09e:	d1c8      	bne.n	800e032 <__sflush_r+0x36>
 800e0a0:	682b      	ldr	r3, [r5, #0]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d0c5      	beq.n	800e032 <__sflush_r+0x36>
 800e0a6:	2b1d      	cmp	r3, #29
 800e0a8:	d001      	beq.n	800e0ae <__sflush_r+0xb2>
 800e0aa:	2b16      	cmp	r3, #22
 800e0ac:	d101      	bne.n	800e0b2 <__sflush_r+0xb6>
 800e0ae:	602f      	str	r7, [r5, #0]
 800e0b0:	e7b1      	b.n	800e016 <__sflush_r+0x1a>
 800e0b2:	89a3      	ldrh	r3, [r4, #12]
 800e0b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0b8:	81a3      	strh	r3, [r4, #12]
 800e0ba:	e7ad      	b.n	800e018 <__sflush_r+0x1c>
 800e0bc:	690f      	ldr	r7, [r1, #16]
 800e0be:	2f00      	cmp	r7, #0
 800e0c0:	d0a9      	beq.n	800e016 <__sflush_r+0x1a>
 800e0c2:	0793      	lsls	r3, r2, #30
 800e0c4:	680e      	ldr	r6, [r1, #0]
 800e0c6:	bf08      	it	eq
 800e0c8:	694b      	ldreq	r3, [r1, #20]
 800e0ca:	600f      	str	r7, [r1, #0]
 800e0cc:	bf18      	it	ne
 800e0ce:	2300      	movne	r3, #0
 800e0d0:	eba6 0807 	sub.w	r8, r6, r7
 800e0d4:	608b      	str	r3, [r1, #8]
 800e0d6:	f1b8 0f00 	cmp.w	r8, #0
 800e0da:	dd9c      	ble.n	800e016 <__sflush_r+0x1a>
 800e0dc:	6a21      	ldr	r1, [r4, #32]
 800e0de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e0e0:	4643      	mov	r3, r8
 800e0e2:	463a      	mov	r2, r7
 800e0e4:	4628      	mov	r0, r5
 800e0e6:	47b0      	blx	r6
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	dc06      	bgt.n	800e0fa <__sflush_r+0xfe>
 800e0ec:	89a3      	ldrh	r3, [r4, #12]
 800e0ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0f2:	81a3      	strh	r3, [r4, #12]
 800e0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0f8:	e78e      	b.n	800e018 <__sflush_r+0x1c>
 800e0fa:	4407      	add	r7, r0
 800e0fc:	eba8 0800 	sub.w	r8, r8, r0
 800e100:	e7e9      	b.n	800e0d6 <__sflush_r+0xda>
 800e102:	bf00      	nop
 800e104:	dfbffffe 	.word	0xdfbffffe

0800e108 <_fflush_r>:
 800e108:	b538      	push	{r3, r4, r5, lr}
 800e10a:	690b      	ldr	r3, [r1, #16]
 800e10c:	4605      	mov	r5, r0
 800e10e:	460c      	mov	r4, r1
 800e110:	b913      	cbnz	r3, 800e118 <_fflush_r+0x10>
 800e112:	2500      	movs	r5, #0
 800e114:	4628      	mov	r0, r5
 800e116:	bd38      	pop	{r3, r4, r5, pc}
 800e118:	b118      	cbz	r0, 800e122 <_fflush_r+0x1a>
 800e11a:	6a03      	ldr	r3, [r0, #32]
 800e11c:	b90b      	cbnz	r3, 800e122 <_fflush_r+0x1a>
 800e11e:	f7fd ff93 	bl	800c048 <__sinit>
 800e122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d0f3      	beq.n	800e112 <_fflush_r+0xa>
 800e12a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e12c:	07d0      	lsls	r0, r2, #31
 800e12e:	d404      	bmi.n	800e13a <_fflush_r+0x32>
 800e130:	0599      	lsls	r1, r3, #22
 800e132:	d402      	bmi.n	800e13a <_fflush_r+0x32>
 800e134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e136:	f7fe f9a0 	bl	800c47a <__retarget_lock_acquire_recursive>
 800e13a:	4628      	mov	r0, r5
 800e13c:	4621      	mov	r1, r4
 800e13e:	f7ff ff5d 	bl	800dffc <__sflush_r>
 800e142:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e144:	07da      	lsls	r2, r3, #31
 800e146:	4605      	mov	r5, r0
 800e148:	d4e4      	bmi.n	800e114 <_fflush_r+0xc>
 800e14a:	89a3      	ldrh	r3, [r4, #12]
 800e14c:	059b      	lsls	r3, r3, #22
 800e14e:	d4e1      	bmi.n	800e114 <_fflush_r+0xc>
 800e150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e152:	f7fe f993 	bl	800c47c <__retarget_lock_release_recursive>
 800e156:	e7dd      	b.n	800e114 <_fflush_r+0xc>

0800e158 <fiprintf>:
 800e158:	b40e      	push	{r1, r2, r3}
 800e15a:	b503      	push	{r0, r1, lr}
 800e15c:	4601      	mov	r1, r0
 800e15e:	ab03      	add	r3, sp, #12
 800e160:	4805      	ldr	r0, [pc, #20]	; (800e178 <fiprintf+0x20>)
 800e162:	f853 2b04 	ldr.w	r2, [r3], #4
 800e166:	6800      	ldr	r0, [r0, #0]
 800e168:	9301      	str	r3, [sp, #4]
 800e16a:	f7ff fe2d 	bl	800ddc8 <_vfiprintf_r>
 800e16e:	b002      	add	sp, #8
 800e170:	f85d eb04 	ldr.w	lr, [sp], #4
 800e174:	b003      	add	sp, #12
 800e176:	4770      	bx	lr
 800e178:	2000007c 	.word	0x2000007c

0800e17c <__swhatbuf_r>:
 800e17c:	b570      	push	{r4, r5, r6, lr}
 800e17e:	460c      	mov	r4, r1
 800e180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e184:	2900      	cmp	r1, #0
 800e186:	b096      	sub	sp, #88	; 0x58
 800e188:	4615      	mov	r5, r2
 800e18a:	461e      	mov	r6, r3
 800e18c:	da0d      	bge.n	800e1aa <__swhatbuf_r+0x2e>
 800e18e:	89a3      	ldrh	r3, [r4, #12]
 800e190:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e194:	f04f 0100 	mov.w	r1, #0
 800e198:	bf0c      	ite	eq
 800e19a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e19e:	2340      	movne	r3, #64	; 0x40
 800e1a0:	2000      	movs	r0, #0
 800e1a2:	6031      	str	r1, [r6, #0]
 800e1a4:	602b      	str	r3, [r5, #0]
 800e1a6:	b016      	add	sp, #88	; 0x58
 800e1a8:	bd70      	pop	{r4, r5, r6, pc}
 800e1aa:	466a      	mov	r2, sp
 800e1ac:	f000 f862 	bl	800e274 <_fstat_r>
 800e1b0:	2800      	cmp	r0, #0
 800e1b2:	dbec      	blt.n	800e18e <__swhatbuf_r+0x12>
 800e1b4:	9901      	ldr	r1, [sp, #4]
 800e1b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e1ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e1be:	4259      	negs	r1, r3
 800e1c0:	4159      	adcs	r1, r3
 800e1c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1c6:	e7eb      	b.n	800e1a0 <__swhatbuf_r+0x24>

0800e1c8 <__smakebuf_r>:
 800e1c8:	898b      	ldrh	r3, [r1, #12]
 800e1ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e1cc:	079d      	lsls	r5, r3, #30
 800e1ce:	4606      	mov	r6, r0
 800e1d0:	460c      	mov	r4, r1
 800e1d2:	d507      	bpl.n	800e1e4 <__smakebuf_r+0x1c>
 800e1d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e1d8:	6023      	str	r3, [r4, #0]
 800e1da:	6123      	str	r3, [r4, #16]
 800e1dc:	2301      	movs	r3, #1
 800e1de:	6163      	str	r3, [r4, #20]
 800e1e0:	b002      	add	sp, #8
 800e1e2:	bd70      	pop	{r4, r5, r6, pc}
 800e1e4:	ab01      	add	r3, sp, #4
 800e1e6:	466a      	mov	r2, sp
 800e1e8:	f7ff ffc8 	bl	800e17c <__swhatbuf_r>
 800e1ec:	9900      	ldr	r1, [sp, #0]
 800e1ee:	4605      	mov	r5, r0
 800e1f0:	4630      	mov	r0, r6
 800e1f2:	f7ff f85f 	bl	800d2b4 <_malloc_r>
 800e1f6:	b948      	cbnz	r0, 800e20c <__smakebuf_r+0x44>
 800e1f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1fc:	059a      	lsls	r2, r3, #22
 800e1fe:	d4ef      	bmi.n	800e1e0 <__smakebuf_r+0x18>
 800e200:	f023 0303 	bic.w	r3, r3, #3
 800e204:	f043 0302 	orr.w	r3, r3, #2
 800e208:	81a3      	strh	r3, [r4, #12]
 800e20a:	e7e3      	b.n	800e1d4 <__smakebuf_r+0xc>
 800e20c:	89a3      	ldrh	r3, [r4, #12]
 800e20e:	6020      	str	r0, [r4, #0]
 800e210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e214:	81a3      	strh	r3, [r4, #12]
 800e216:	9b00      	ldr	r3, [sp, #0]
 800e218:	6163      	str	r3, [r4, #20]
 800e21a:	9b01      	ldr	r3, [sp, #4]
 800e21c:	6120      	str	r0, [r4, #16]
 800e21e:	b15b      	cbz	r3, 800e238 <__smakebuf_r+0x70>
 800e220:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e224:	4630      	mov	r0, r6
 800e226:	f000 f837 	bl	800e298 <_isatty_r>
 800e22a:	b128      	cbz	r0, 800e238 <__smakebuf_r+0x70>
 800e22c:	89a3      	ldrh	r3, [r4, #12]
 800e22e:	f023 0303 	bic.w	r3, r3, #3
 800e232:	f043 0301 	orr.w	r3, r3, #1
 800e236:	81a3      	strh	r3, [r4, #12]
 800e238:	89a3      	ldrh	r3, [r4, #12]
 800e23a:	431d      	orrs	r5, r3
 800e23c:	81a5      	strh	r5, [r4, #12]
 800e23e:	e7cf      	b.n	800e1e0 <__smakebuf_r+0x18>

0800e240 <memmove>:
 800e240:	4288      	cmp	r0, r1
 800e242:	b510      	push	{r4, lr}
 800e244:	eb01 0402 	add.w	r4, r1, r2
 800e248:	d902      	bls.n	800e250 <memmove+0x10>
 800e24a:	4284      	cmp	r4, r0
 800e24c:	4623      	mov	r3, r4
 800e24e:	d807      	bhi.n	800e260 <memmove+0x20>
 800e250:	1e43      	subs	r3, r0, #1
 800e252:	42a1      	cmp	r1, r4
 800e254:	d008      	beq.n	800e268 <memmove+0x28>
 800e256:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e25a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e25e:	e7f8      	b.n	800e252 <memmove+0x12>
 800e260:	4402      	add	r2, r0
 800e262:	4601      	mov	r1, r0
 800e264:	428a      	cmp	r2, r1
 800e266:	d100      	bne.n	800e26a <memmove+0x2a>
 800e268:	bd10      	pop	{r4, pc}
 800e26a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e26e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e272:	e7f7      	b.n	800e264 <memmove+0x24>

0800e274 <_fstat_r>:
 800e274:	b538      	push	{r3, r4, r5, lr}
 800e276:	4d07      	ldr	r5, [pc, #28]	; (800e294 <_fstat_r+0x20>)
 800e278:	2300      	movs	r3, #0
 800e27a:	4604      	mov	r4, r0
 800e27c:	4608      	mov	r0, r1
 800e27e:	4611      	mov	r1, r2
 800e280:	602b      	str	r3, [r5, #0]
 800e282:	f7f5 fd62 	bl	8003d4a <_fstat>
 800e286:	1c43      	adds	r3, r0, #1
 800e288:	d102      	bne.n	800e290 <_fstat_r+0x1c>
 800e28a:	682b      	ldr	r3, [r5, #0]
 800e28c:	b103      	cbz	r3, 800e290 <_fstat_r+0x1c>
 800e28e:	6023      	str	r3, [r4, #0]
 800e290:	bd38      	pop	{r3, r4, r5, pc}
 800e292:	bf00      	nop
 800e294:	20000ff4 	.word	0x20000ff4

0800e298 <_isatty_r>:
 800e298:	b538      	push	{r3, r4, r5, lr}
 800e29a:	4d06      	ldr	r5, [pc, #24]	; (800e2b4 <_isatty_r+0x1c>)
 800e29c:	2300      	movs	r3, #0
 800e29e:	4604      	mov	r4, r0
 800e2a0:	4608      	mov	r0, r1
 800e2a2:	602b      	str	r3, [r5, #0]
 800e2a4:	f7f5 fd61 	bl	8003d6a <_isatty>
 800e2a8:	1c43      	adds	r3, r0, #1
 800e2aa:	d102      	bne.n	800e2b2 <_isatty_r+0x1a>
 800e2ac:	682b      	ldr	r3, [r5, #0]
 800e2ae:	b103      	cbz	r3, 800e2b2 <_isatty_r+0x1a>
 800e2b0:	6023      	str	r3, [r4, #0]
 800e2b2:	bd38      	pop	{r3, r4, r5, pc}
 800e2b4:	20000ff4 	.word	0x20000ff4

0800e2b8 <_sbrk_r>:
 800e2b8:	b538      	push	{r3, r4, r5, lr}
 800e2ba:	4d06      	ldr	r5, [pc, #24]	; (800e2d4 <_sbrk_r+0x1c>)
 800e2bc:	2300      	movs	r3, #0
 800e2be:	4604      	mov	r4, r0
 800e2c0:	4608      	mov	r0, r1
 800e2c2:	602b      	str	r3, [r5, #0]
 800e2c4:	f7f5 fd6a 	bl	8003d9c <_sbrk>
 800e2c8:	1c43      	adds	r3, r0, #1
 800e2ca:	d102      	bne.n	800e2d2 <_sbrk_r+0x1a>
 800e2cc:	682b      	ldr	r3, [r5, #0]
 800e2ce:	b103      	cbz	r3, 800e2d2 <_sbrk_r+0x1a>
 800e2d0:	6023      	str	r3, [r4, #0]
 800e2d2:	bd38      	pop	{r3, r4, r5, pc}
 800e2d4:	20000ff4 	.word	0x20000ff4

0800e2d8 <abort>:
 800e2d8:	b508      	push	{r3, lr}
 800e2da:	2006      	movs	r0, #6
 800e2dc:	f000 f890 	bl	800e400 <raise>
 800e2e0:	2001      	movs	r0, #1
 800e2e2:	f7f5 fce3 	bl	8003cac <_exit>

0800e2e6 <_calloc_r>:
 800e2e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e2e8:	fba1 2402 	umull	r2, r4, r1, r2
 800e2ec:	b94c      	cbnz	r4, 800e302 <_calloc_r+0x1c>
 800e2ee:	4611      	mov	r1, r2
 800e2f0:	9201      	str	r2, [sp, #4]
 800e2f2:	f7fe ffdf 	bl	800d2b4 <_malloc_r>
 800e2f6:	9a01      	ldr	r2, [sp, #4]
 800e2f8:	4605      	mov	r5, r0
 800e2fa:	b930      	cbnz	r0, 800e30a <_calloc_r+0x24>
 800e2fc:	4628      	mov	r0, r5
 800e2fe:	b003      	add	sp, #12
 800e300:	bd30      	pop	{r4, r5, pc}
 800e302:	220c      	movs	r2, #12
 800e304:	6002      	str	r2, [r0, #0]
 800e306:	2500      	movs	r5, #0
 800e308:	e7f8      	b.n	800e2fc <_calloc_r+0x16>
 800e30a:	4621      	mov	r1, r4
 800e30c:	f7fe f838 	bl	800c380 <memset>
 800e310:	e7f4      	b.n	800e2fc <_calloc_r+0x16>

0800e312 <__ascii_mbtowc>:
 800e312:	b082      	sub	sp, #8
 800e314:	b901      	cbnz	r1, 800e318 <__ascii_mbtowc+0x6>
 800e316:	a901      	add	r1, sp, #4
 800e318:	b142      	cbz	r2, 800e32c <__ascii_mbtowc+0x1a>
 800e31a:	b14b      	cbz	r3, 800e330 <__ascii_mbtowc+0x1e>
 800e31c:	7813      	ldrb	r3, [r2, #0]
 800e31e:	600b      	str	r3, [r1, #0]
 800e320:	7812      	ldrb	r2, [r2, #0]
 800e322:	1e10      	subs	r0, r2, #0
 800e324:	bf18      	it	ne
 800e326:	2001      	movne	r0, #1
 800e328:	b002      	add	sp, #8
 800e32a:	4770      	bx	lr
 800e32c:	4610      	mov	r0, r2
 800e32e:	e7fb      	b.n	800e328 <__ascii_mbtowc+0x16>
 800e330:	f06f 0001 	mvn.w	r0, #1
 800e334:	e7f8      	b.n	800e328 <__ascii_mbtowc+0x16>

0800e336 <_realloc_r>:
 800e336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e33a:	4680      	mov	r8, r0
 800e33c:	4614      	mov	r4, r2
 800e33e:	460e      	mov	r6, r1
 800e340:	b921      	cbnz	r1, 800e34c <_realloc_r+0x16>
 800e342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e346:	4611      	mov	r1, r2
 800e348:	f7fe bfb4 	b.w	800d2b4 <_malloc_r>
 800e34c:	b92a      	cbnz	r2, 800e35a <_realloc_r+0x24>
 800e34e:	f7fe ff3d 	bl	800d1cc <_free_r>
 800e352:	4625      	mov	r5, r4
 800e354:	4628      	mov	r0, r5
 800e356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e35a:	f000 f86d 	bl	800e438 <_malloc_usable_size_r>
 800e35e:	4284      	cmp	r4, r0
 800e360:	4607      	mov	r7, r0
 800e362:	d802      	bhi.n	800e36a <_realloc_r+0x34>
 800e364:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e368:	d812      	bhi.n	800e390 <_realloc_r+0x5a>
 800e36a:	4621      	mov	r1, r4
 800e36c:	4640      	mov	r0, r8
 800e36e:	f7fe ffa1 	bl	800d2b4 <_malloc_r>
 800e372:	4605      	mov	r5, r0
 800e374:	2800      	cmp	r0, #0
 800e376:	d0ed      	beq.n	800e354 <_realloc_r+0x1e>
 800e378:	42bc      	cmp	r4, r7
 800e37a:	4622      	mov	r2, r4
 800e37c:	4631      	mov	r1, r6
 800e37e:	bf28      	it	cs
 800e380:	463a      	movcs	r2, r7
 800e382:	f7fe f87c 	bl	800c47e <memcpy>
 800e386:	4631      	mov	r1, r6
 800e388:	4640      	mov	r0, r8
 800e38a:	f7fe ff1f 	bl	800d1cc <_free_r>
 800e38e:	e7e1      	b.n	800e354 <_realloc_r+0x1e>
 800e390:	4635      	mov	r5, r6
 800e392:	e7df      	b.n	800e354 <_realloc_r+0x1e>

0800e394 <__ascii_wctomb>:
 800e394:	b149      	cbz	r1, 800e3aa <__ascii_wctomb+0x16>
 800e396:	2aff      	cmp	r2, #255	; 0xff
 800e398:	bf85      	ittet	hi
 800e39a:	238a      	movhi	r3, #138	; 0x8a
 800e39c:	6003      	strhi	r3, [r0, #0]
 800e39e:	700a      	strbls	r2, [r1, #0]
 800e3a0:	f04f 30ff 	movhi.w	r0, #4294967295
 800e3a4:	bf98      	it	ls
 800e3a6:	2001      	movls	r0, #1
 800e3a8:	4770      	bx	lr
 800e3aa:	4608      	mov	r0, r1
 800e3ac:	4770      	bx	lr

0800e3ae <_raise_r>:
 800e3ae:	291f      	cmp	r1, #31
 800e3b0:	b538      	push	{r3, r4, r5, lr}
 800e3b2:	4604      	mov	r4, r0
 800e3b4:	460d      	mov	r5, r1
 800e3b6:	d904      	bls.n	800e3c2 <_raise_r+0x14>
 800e3b8:	2316      	movs	r3, #22
 800e3ba:	6003      	str	r3, [r0, #0]
 800e3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e3c0:	bd38      	pop	{r3, r4, r5, pc}
 800e3c2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e3c4:	b112      	cbz	r2, 800e3cc <_raise_r+0x1e>
 800e3c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e3ca:	b94b      	cbnz	r3, 800e3e0 <_raise_r+0x32>
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	f000 f831 	bl	800e434 <_getpid_r>
 800e3d2:	462a      	mov	r2, r5
 800e3d4:	4601      	mov	r1, r0
 800e3d6:	4620      	mov	r0, r4
 800e3d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e3dc:	f000 b818 	b.w	800e410 <_kill_r>
 800e3e0:	2b01      	cmp	r3, #1
 800e3e2:	d00a      	beq.n	800e3fa <_raise_r+0x4c>
 800e3e4:	1c59      	adds	r1, r3, #1
 800e3e6:	d103      	bne.n	800e3f0 <_raise_r+0x42>
 800e3e8:	2316      	movs	r3, #22
 800e3ea:	6003      	str	r3, [r0, #0]
 800e3ec:	2001      	movs	r0, #1
 800e3ee:	e7e7      	b.n	800e3c0 <_raise_r+0x12>
 800e3f0:	2400      	movs	r4, #0
 800e3f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e3f6:	4628      	mov	r0, r5
 800e3f8:	4798      	blx	r3
 800e3fa:	2000      	movs	r0, #0
 800e3fc:	e7e0      	b.n	800e3c0 <_raise_r+0x12>
	...

0800e400 <raise>:
 800e400:	4b02      	ldr	r3, [pc, #8]	; (800e40c <raise+0xc>)
 800e402:	4601      	mov	r1, r0
 800e404:	6818      	ldr	r0, [r3, #0]
 800e406:	f7ff bfd2 	b.w	800e3ae <_raise_r>
 800e40a:	bf00      	nop
 800e40c:	2000007c 	.word	0x2000007c

0800e410 <_kill_r>:
 800e410:	b538      	push	{r3, r4, r5, lr}
 800e412:	4d07      	ldr	r5, [pc, #28]	; (800e430 <_kill_r+0x20>)
 800e414:	2300      	movs	r3, #0
 800e416:	4604      	mov	r4, r0
 800e418:	4608      	mov	r0, r1
 800e41a:	4611      	mov	r1, r2
 800e41c:	602b      	str	r3, [r5, #0]
 800e41e:	f7f5 fc35 	bl	8003c8c <_kill>
 800e422:	1c43      	adds	r3, r0, #1
 800e424:	d102      	bne.n	800e42c <_kill_r+0x1c>
 800e426:	682b      	ldr	r3, [r5, #0]
 800e428:	b103      	cbz	r3, 800e42c <_kill_r+0x1c>
 800e42a:	6023      	str	r3, [r4, #0]
 800e42c:	bd38      	pop	{r3, r4, r5, pc}
 800e42e:	bf00      	nop
 800e430:	20000ff4 	.word	0x20000ff4

0800e434 <_getpid_r>:
 800e434:	f7f5 bc22 	b.w	8003c7c <_getpid>

0800e438 <_malloc_usable_size_r>:
 800e438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e43c:	1f18      	subs	r0, r3, #4
 800e43e:	2b00      	cmp	r3, #0
 800e440:	bfbc      	itt	lt
 800e442:	580b      	ldrlt	r3, [r1, r0]
 800e444:	18c0      	addlt	r0, r0, r3
 800e446:	4770      	bx	lr

0800e448 <_init>:
 800e448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e44a:	bf00      	nop
 800e44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e44e:	bc08      	pop	{r3}
 800e450:	469e      	mov	lr, r3
 800e452:	4770      	bx	lr

0800e454 <_fini>:
 800e454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e456:	bf00      	nop
 800e458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e45a:	bc08      	pop	{r3}
 800e45c:	469e      	mov	lr, r3
 800e45e:	4770      	bx	lr
