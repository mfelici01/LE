
BLINK_L476RG_2024_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ac4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003c4c  08003c4c  00013c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cc0  08003cc0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003cc0  08003cc0  00013cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cc8  08003cc8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cc8  08003cc8  00013cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ccc  08003ccc  00013ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000068  08003d38  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08003d38  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b00b  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c2b  00000000  00000000  0002b0e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a8  00000000  00000000  0002cd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000074d  00000000  00000000  0002d6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000269cc  00000000  00000000  0002de0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c477  00000000  00000000  000547d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e931e  00000000  00000000  00060c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002bf8  00000000  00000000  00149f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0014cb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003c34 	.word	0x08003c34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08003c34 	.word	0x08003c34

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004da:	4b23      	ldr	r3, [pc, #140]	; (8000568 <MX_GPIO_Init+0xa4>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	4a22      	ldr	r2, [pc, #136]	; (8000568 <MX_GPIO_Init+0xa4>)
 80004e0:	f043 0304 	orr.w	r3, r3, #4
 80004e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e6:	4b20      	ldr	r3, [pc, #128]	; (8000568 <MX_GPIO_Init+0xa4>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	f003 0304 	and.w	r3, r3, #4
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <MX_GPIO_Init+0xa4>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	4a1c      	ldr	r2, [pc, #112]	; (8000568 <MX_GPIO_Init+0xa4>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fe:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <MX_GPIO_Init+0xa4>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	2120      	movs	r1, #32
 800050e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000512:	f000 fded 	bl	80010f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_PB_Pin;
 8000516:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800051a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800051c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000520:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_PB_GPIO_Port, &GPIO_InitStruct);
 8000526:	f107 030c 	add.w	r3, r7, #12
 800052a:	4619      	mov	r1, r3
 800052c:	480f      	ldr	r0, [pc, #60]	; (800056c <MX_GPIO_Init+0xa8>)
 800052e:	f000 fc35 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000532:	2320      	movs	r3, #32
 8000534:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000536:	2301      	movs	r3, #1
 8000538:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053e:	2300      	movs	r3, #0
 8000540:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000542:	f107 030c 	add.w	r3, r7, #12
 8000546:	4619      	mov	r1, r3
 8000548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054c:	f000 fc26 	bl	8000d9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000550:	2200      	movs	r2, #0
 8000552:	2100      	movs	r1, #0
 8000554:	2028      	movs	r0, #40	; 0x28
 8000556:	f000 fbea 	bl	8000d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800055a:	2028      	movs	r0, #40	; 0x28
 800055c:	f000 fc03 	bl	8000d66 <HAL_NVIC_EnableIRQ>

}
 8000560:	bf00      	nop
 8000562:	3720      	adds	r7, #32
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40021000 	.word	0x40021000
 800056c:	48000800 	.word	0x48000800

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fa84 	bl	8000a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f830 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f7ff ffa2 	bl	80004c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000580:	f000 f9c8 	bl	8000914 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (np_press==1){
 8000584:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <main+0x58>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d1fb      	bne.n	8000584 <main+0x14>
		  printf("button pressed\r;\n");
 800058c:	480f      	ldr	r0, [pc, #60]	; (80005cc <main+0x5c>)
 800058e:	f002 ffbb 	bl	8003508 <puts>

	  if(ledOn){
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <main+0x60>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d009      	beq.n	80005ae <main+0x3e>
	 	  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800059a:	2201      	movs	r2, #1
 800059c:	2120      	movs	r1, #32
 800059e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a2:	f000 fda5 	bl	80010f0 <HAL_GPIO_WritePin>
	 	  		  printf("LED is ON\r\n");
 80005a6:	480b      	ldr	r0, [pc, #44]	; (80005d4 <main+0x64>)
 80005a8:	f002 ffae 	bl	8003508 <puts>
 80005ac:	e008      	b.n	80005c0 <main+0x50>

	  }else{
	 	  		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2120      	movs	r1, #32
 80005b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b6:	f000 fd9b 	bl	80010f0 <HAL_GPIO_WritePin>
	 	  		 printf("LED is OFF\r\n");
 80005ba:	4807      	ldr	r0, [pc, #28]	; (80005d8 <main+0x68>)
 80005bc:	f002 ffa4 	bl	8003508 <puts>

	 	  		}
	  np_press=0;
 80005c0:	4b01      	ldr	r3, [pc, #4]	; (80005c8 <main+0x58>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
	  if (np_press==1){
 80005c6:	e7dd      	b.n	8000584 <main+0x14>
 80005c8:	20000088 	.word	0x20000088
 80005cc:	08003c4c 	.word	0x08003c4c
 80005d0:	20000084 	.word	0x20000084
 80005d4:	08003c60 	.word	0x08003c60
 80005d8:	08003c6c 	.word	0x08003c6c

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b096      	sub	sp, #88	; 0x58
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2244      	movs	r2, #68	; 0x44
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 f86c 	bl	80036c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000602:	f000 fdb3 	bl	800116c <HAL_PWREx_ControlVoltageScaling>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800060c:	f000 f870 	bl	80006f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000610:	2302      	movs	r3, #2
 8000612:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000618:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061a:	2310      	movs	r3, #16
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000622:	2302      	movs	r3, #2
 8000624:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000626:	2301      	movs	r3, #1
 8000628:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 800062a:	2308      	movs	r3, #8
 800062c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800062e:	2307      	movs	r3, #7
 8000630:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000632:	2302      	movs	r3, #2
 8000634:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4618      	mov	r0, r3
 8000640:	f000 fdea 	bl	8001218 <HAL_RCC_OscConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800064a:	f000 f851 	bl	80006f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064e:	230f      	movs	r3, #15
 8000650:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000652:	2303      	movs	r3, #3
 8000654:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8000656:	23a0      	movs	r3, #160	; 0xa0
 8000658:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f001 f9b2 	bl	80019d0 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000672:	f000 f83d 	bl	80006f0 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3758      	adds	r7, #88	; 0x58
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_PB_Pin){
 800068a:	88fb      	ldrh	r3, [r7, #6]
 800068c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000690:	d111      	bne.n	80006b6 <HAL_GPIO_EXTI_Callback+0x36>
		ledOn = !ledOn;
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	bf14      	ite	ne
 800069a:	2301      	movne	r3, #1
 800069c:	2300      	moveq	r3, #0
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	f083 0301 	eor.w	r3, r3, #1
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <HAL_GPIO_EXTI_Callback+0x44>)
 80006ae:	701a      	strb	r2, [r3, #0]
		np_press = 1;
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HAL_GPIO_EXTI_Callback+0x48>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	601a      	str	r2, [r3, #0]
	}
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	20000084 	.word	0x20000084
 80006c8:	20000088 	.word	0x20000088

080006cc <__io_putchar>:
PUTCHAR_PROTOTYPE
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);
 80006d4:	1d39      	adds	r1, r7, #4
 80006d6:	2364      	movs	r3, #100	; 0x64
 80006d8:	2201      	movs	r2, #1
 80006da:	4804      	ldr	r0, [pc, #16]	; (80006ec <__io_putchar+0x20>)
 80006dc:	f002 f8a6 	bl	800282c <HAL_UART_Transmit>
    return ch;
 80006e0:	687b      	ldr	r3, [r7, #4]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000090 	.word	0x20000090

080006f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f4:	b672      	cpsid	i
}
 80006f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <Error_Handler+0x8>
	...

080006fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <HAL_MspInit+0x44>)
 8000704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000706:	4a0e      	ldr	r2, [pc, #56]	; (8000740 <HAL_MspInit+0x44>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6613      	str	r3, [r2, #96]	; 0x60
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <HAL_MspInit+0x44>)
 8000710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <HAL_MspInit+0x44>)
 800071c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800071e:	4a08      	ldr	r2, [pc, #32]	; (8000740 <HAL_MspInit+0x44>)
 8000720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000724:	6593      	str	r3, [r2, #88]	; 0x58
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_MspInit+0x44>)
 8000728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800072a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40021000 	.word	0x40021000

08000744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000748:	e7fe      	b.n	8000748 <NMI_Handler+0x4>

0800074a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <HardFault_Handler+0x4>

08000750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <MemManage_Handler+0x4>

08000756 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <BusFault_Handler+0x4>

0800075c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <UsageFault_Handler+0x4>

08000762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000790:	f000 f9d2 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_PB_Pin);
 800079c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80007a0:	f000 fcbe 	bl	8001120 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	e00a      	b.n	80007d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007ba:	f3af 8000 	nop.w
 80007be:	4601      	mov	r1, r0
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	1c5a      	adds	r2, r3, #1
 80007c4:	60ba      	str	r2, [r7, #8]
 80007c6:	b2ca      	uxtb	r2, r1
 80007c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	3301      	adds	r3, #1
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	697a      	ldr	r2, [r7, #20]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	dbf0      	blt.n	80007ba <_read+0x12>
  }

  return len;
 80007d8:	687b      	ldr	r3, [r7, #4]
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b086      	sub	sp, #24
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	60f8      	str	r0, [r7, #12]
 80007ea:	60b9      	str	r1, [r7, #8]
 80007ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	e009      	b.n	8000808 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	1c5a      	adds	r2, r3, #1
 80007f8:	60ba      	str	r2, [r7, #8]
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff65 	bl	80006cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	3301      	adds	r3, #1
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697a      	ldr	r2, [r7, #20]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	429a      	cmp	r2, r3
 800080e:	dbf1      	blt.n	80007f4 <_write+0x12>
  }
  return len;
 8000810:	687b      	ldr	r3, [r7, #4]
}
 8000812:	4618      	mov	r0, r3
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <_close>:

int _close(int file)
{
 800081a:	b480      	push	{r7}
 800081c:	b083      	sub	sp, #12
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000826:	4618      	mov	r0, r3
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000832:	b480      	push	{r7}
 8000834:	b083      	sub	sp, #12
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
 800083a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000842:	605a      	str	r2, [r3, #4]
  return 0;
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <_isatty>:

int _isatty(int file)
{
 8000852:	b480      	push	{r7}
 8000854:	b083      	sub	sp, #12
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800085a:	2301      	movs	r3, #1
}
 800085c:	4618      	mov	r0, r3
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
	...

08000884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800088c:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <_sbrk+0x5c>)
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <_sbrk+0x60>)
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <_sbrk+0x64>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <_sbrk+0x64>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <_sbrk+0x68>)
 80008a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <_sbrk+0x64>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4413      	add	r3, r2
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d207      	bcs.n	80008c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b4:	f002 ff56 	bl	8003764 <__errno>
 80008b8:	4603      	mov	r3, r0
 80008ba:	220c      	movs	r2, #12
 80008bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008be:	f04f 33ff 	mov.w	r3, #4294967295
 80008c2:	e009      	b.n	80008d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <_sbrk+0x64>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ca:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <_sbrk+0x64>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4413      	add	r3, r2
 80008d2:	4a05      	ldr	r2, [pc, #20]	; (80008e8 <_sbrk+0x64>)
 80008d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008d6:	68fb      	ldr	r3, [r7, #12]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20018000 	.word	0x20018000
 80008e4:	00000400 	.word	0x00000400
 80008e8:	2000008c 	.word	0x2000008c
 80008ec:	20000268 	.word	0x20000268

080008f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <SystemInit+0x20>)
 80008f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008fa:	4a05      	ldr	r2, [pc, #20]	; (8000910 <SystemInit+0x20>)
 80008fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_USART2_UART_Init+0x58>)
 800091a:	4a15      	ldr	r2, [pc, #84]	; (8000970 <MX_USART2_UART_Init+0x5c>)
 800091c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000924:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_USART2_UART_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_USART2_UART_Init+0x58>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_USART2_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000958:	f001 ff1a 	bl	8002790 <HAL_UART_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000962:	f7ff fec5 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000090 	.word	0x20000090
 8000970:	40004400 	.word	0x40004400

08000974 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b0ac      	sub	sp, #176	; 0xb0
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2288      	movs	r2, #136	; 0x88
 8000992:	2100      	movs	r1, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f002 fe97 	bl	80036c8 <memset>
  if(uartHandle->Instance==USART2)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a21      	ldr	r2, [pc, #132]	; (8000a24 <HAL_UART_MspInit+0xb0>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d13b      	bne.n	8000a1c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009a4:	2302      	movs	r3, #2
 80009a6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 fa31 	bl	8001e18 <HAL_RCCEx_PeriphCLKConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009bc:	f7ff fe98 	bl	80006f0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c0:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <HAL_UART_MspInit+0xb4>)
 80009c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c4:	4a18      	ldr	r2, [pc, #96]	; (8000a28 <HAL_UART_MspInit+0xb4>)
 80009c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ca:	6593      	str	r3, [r2, #88]	; 0x58
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <HAL_UART_MspInit+0xb4>)
 80009ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <HAL_UART_MspInit+0xb4>)
 80009da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009dc:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <HAL_UART_MspInit+0xb4>)
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e4:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <HAL_UART_MspInit+0xb4>)
 80009e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009f0:	230c      	movs	r3, #12
 80009f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a08:	2307      	movs	r3, #7
 8000a0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a12:	4619      	mov	r1, r3
 8000a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a18:	f000 f9c0 	bl	8000d9c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	37b0      	adds	r7, #176	; 0xb0
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40004400 	.word	0x40004400
 8000a28:	40021000 	.word	0x40021000

08000a2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a30:	f7ff ff5e 	bl	80008f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a34:	480c      	ldr	r0, [pc, #48]	; (8000a68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a36:	490d      	ldr	r1, [pc, #52]	; (8000a6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a38:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <LoopForever+0xe>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a4c:	4c0a      	ldr	r4, [pc, #40]	; (8000a78 <LoopForever+0x16>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f002 fe89 	bl	8003770 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a5e:	f7ff fd87 	bl	8000570 <main>

08000a62 <LoopForever>:

LoopForever:
    b LoopForever
 8000a62:	e7fe      	b.n	8000a62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a70:	08003cd0 	.word	0x08003cd0
  ldr r2, =_sbss
 8000a74:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a78:	20000268 	.word	0x20000268

08000a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC1_2_IRQHandler>
	...

08000a80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a86:	2300      	movs	r3, #0
 8000a88:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_Init+0x3c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <HAL_Init+0x3c>)
 8000a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a94:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a96:	2003      	movs	r0, #3
 8000a98:	f000 f93e 	bl	8000d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f000 f80f 	bl	8000ac0 <HAL_InitTick>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	71fb      	strb	r3, [r7, #7]
 8000aac:	e001      	b.n	8000ab2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aae:	f7ff fe25 	bl	80006fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40022000 	.word	0x40022000

08000ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <HAL_InitTick+0x6c>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d023      	beq.n	8000b1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <HAL_InitTick+0x70>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <HAL_InitTick+0x6c>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4619      	mov	r1, r3
 8000ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f949 	bl	8000d82 <HAL_SYSTICK_Config>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d10f      	bne.n	8000b16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b0f      	cmp	r3, #15
 8000afa:	d809      	bhi.n	8000b10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afc:	2200      	movs	r2, #0
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f000 f913 	bl	8000d2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b08:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <HAL_InitTick+0x74>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	e007      	b.n	8000b20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	73fb      	strb	r3, [r7, #15]
 8000b14:	e004      	b.n	8000b20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	73fb      	strb	r3, [r7, #15]
 8000b1a:	e001      	b.n	8000b20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000004 	.word	0x20000004

08000b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_IncTick+0x20>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x24>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <HAL_IncTick+0x24>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000118 	.word	0x20000118

08000b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <HAL_GetTick+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000118 	.word	0x20000118

08000b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db0b      	blt.n	8000c06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 021f 	and.w	r2, r3, #31
 8000bf4:	4907      	ldr	r1, [pc, #28]	; (8000c14 <__NVIC_EnableIRQ+0x38>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	; (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	; 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce4:	d301      	bcc.n	8000cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00f      	b.n	8000d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <SysTick_Config+0x40>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f7ff ff8e 	bl	8000c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <SysTick_Config+0x40>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SysTick_Config+0x40>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	e000e010 	.word	0xe000e010

08000d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff29 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d40:	f7ff ff3e 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000d44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	6978      	ldr	r0, [r7, #20]
 8000d4c:	f7ff ff8e 	bl	8000c6c <NVIC_EncodePriority>
 8000d50:	4602      	mov	r2, r0
 8000d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff5d 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff31 	bl	8000bdc <__NVIC_EnableIRQ>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ffa2 	bl	8000cd4 <SysTick_Config>
 8000d90:	4603      	mov	r3, r0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b087      	sub	sp, #28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000daa:	e17f      	b.n	80010ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	2101      	movs	r1, #1
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	fa01 f303 	lsl.w	r3, r1, r3
 8000db8:	4013      	ands	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f000 8171 	beq.w	80010a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d005      	beq.n	8000ddc <HAL_GPIO_Init+0x40>
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d130      	bne.n	8000e3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e12:	2201      	movs	r2, #1
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	091b      	lsrs	r3, r3, #4
 8000e28:	f003 0201 	and.w	r2, r3, #1
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d118      	bne.n	8000e7c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e50:	2201      	movs	r2, #1
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	08db      	lsrs	r3, r3, #3
 8000e66:	f003 0201 	and.w	r2, r3, #1
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0303 	and.w	r3, r3, #3
 8000e84:	2b03      	cmp	r3, #3
 8000e86:	d017      	beq.n	8000eb8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	2203      	movs	r2, #3
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d123      	bne.n	8000f0c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	08da      	lsrs	r2, r3, #3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3208      	adds	r2, #8
 8000ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	f003 0307 	and.w	r3, r3, #7
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	220f      	movs	r2, #15
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	691a      	ldr	r2, [r3, #16]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	08da      	lsrs	r2, r3, #3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3208      	adds	r2, #8
 8000f06:	6939      	ldr	r1, [r7, #16]
 8000f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	2203      	movs	r2, #3
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0203 	and.w	r2, r3, #3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f000 80ac 	beq.w	80010a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	4b5f      	ldr	r3, [pc, #380]	; (80010cc <HAL_GPIO_Init+0x330>)
 8000f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f52:	4a5e      	ldr	r2, [pc, #376]	; (80010cc <HAL_GPIO_Init+0x330>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6613      	str	r3, [r2, #96]	; 0x60
 8000f5a:	4b5c      	ldr	r3, [pc, #368]	; (80010cc <HAL_GPIO_Init+0x330>)
 8000f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f66:	4a5a      	ldr	r2, [pc, #360]	; (80010d0 <HAL_GPIO_Init+0x334>)
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	089b      	lsrs	r3, r3, #2
 8000f6c:	3302      	adds	r3, #2
 8000f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f72:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	220f      	movs	r2, #15
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f90:	d025      	beq.n	8000fde <HAL_GPIO_Init+0x242>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4f      	ldr	r2, [pc, #316]	; (80010d4 <HAL_GPIO_Init+0x338>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d01f      	beq.n	8000fda <HAL_GPIO_Init+0x23e>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4e      	ldr	r2, [pc, #312]	; (80010d8 <HAL_GPIO_Init+0x33c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d019      	beq.n	8000fd6 <HAL_GPIO_Init+0x23a>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4d      	ldr	r2, [pc, #308]	; (80010dc <HAL_GPIO_Init+0x340>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d013      	beq.n	8000fd2 <HAL_GPIO_Init+0x236>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4c      	ldr	r2, [pc, #304]	; (80010e0 <HAL_GPIO_Init+0x344>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d00d      	beq.n	8000fce <HAL_GPIO_Init+0x232>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4b      	ldr	r2, [pc, #300]	; (80010e4 <HAL_GPIO_Init+0x348>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d007      	beq.n	8000fca <HAL_GPIO_Init+0x22e>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4a      	ldr	r2, [pc, #296]	; (80010e8 <HAL_GPIO_Init+0x34c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d101      	bne.n	8000fc6 <HAL_GPIO_Init+0x22a>
 8000fc2:	2306      	movs	r3, #6
 8000fc4:	e00c      	b.n	8000fe0 <HAL_GPIO_Init+0x244>
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	e00a      	b.n	8000fe0 <HAL_GPIO_Init+0x244>
 8000fca:	2305      	movs	r3, #5
 8000fcc:	e008      	b.n	8000fe0 <HAL_GPIO_Init+0x244>
 8000fce:	2304      	movs	r3, #4
 8000fd0:	e006      	b.n	8000fe0 <HAL_GPIO_Init+0x244>
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e004      	b.n	8000fe0 <HAL_GPIO_Init+0x244>
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	e002      	b.n	8000fe0 <HAL_GPIO_Init+0x244>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <HAL_GPIO_Init+0x244>
 8000fde:	2300      	movs	r3, #0
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	f002 0203 	and.w	r2, r2, #3
 8000fe6:	0092      	lsls	r2, r2, #2
 8000fe8:	4093      	lsls	r3, r2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ff0:	4937      	ldr	r1, [pc, #220]	; (80010d0 <HAL_GPIO_Init+0x334>)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ffe:	4b3b      	ldr	r3, [pc, #236]	; (80010ec <HAL_GPIO_Init+0x350>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	43db      	mvns	r3, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001022:	4a32      	ldr	r2, [pc, #200]	; (80010ec <HAL_GPIO_Init+0x350>)
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001028:	4b30      	ldr	r3, [pc, #192]	; (80010ec <HAL_GPIO_Init+0x350>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	43db      	mvns	r3, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800104c:	4a27      	ldr	r2, [pc, #156]	; (80010ec <HAL_GPIO_Init+0x350>)
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001052:	4b26      	ldr	r3, [pc, #152]	; (80010ec <HAL_GPIO_Init+0x350>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001076:	4a1d      	ldr	r2, [pc, #116]	; (80010ec <HAL_GPIO_Init+0x350>)
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <HAL_GPIO_Init+0x350>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010a0:	4a12      	ldr	r2, [pc, #72]	; (80010ec <HAL_GPIO_Init+0x350>)
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3301      	adds	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa22 f303 	lsr.w	r3, r2, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f47f ae78 	bne.w	8000dac <HAL_GPIO_Init+0x10>
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	371c      	adds	r7, #28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40010000 	.word	0x40010000
 80010d4:	48000400 	.word	0x48000400
 80010d8:	48000800 	.word	0x48000800
 80010dc:	48000c00 	.word	0x48000c00
 80010e0:	48001000 	.word	0x48001000
 80010e4:	48001400 	.word	0x48001400
 80010e8:	48001800 	.word	0x48001800
 80010ec:	40010400 	.word	0x40010400

080010f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]
 80010fc:	4613      	mov	r3, r2
 80010fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001100:	787b      	ldrb	r3, [r7, #1]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800110c:	e002      	b.n	8001114 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800110e:	887a      	ldrh	r2, [r7, #2]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800112c:	695a      	ldr	r2, [r3, #20]
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	4013      	ands	r3, r2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d006      	beq.n	8001144 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fa9e 	bl	8000680 <HAL_GPIO_EXTI_Callback>
  }
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40010400 	.word	0x40010400

08001150 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <HAL_PWREx_GetVoltageRange+0x18>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40007000 	.word	0x40007000

0800116c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800117a:	d130      	bne.n	80011de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800117c:	4b23      	ldr	r3, [pc, #140]	; (800120c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001188:	d038      	beq.n	80011fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001192:	4a1e      	ldr	r2, [pc, #120]	; (800120c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001194:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001198:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2232      	movs	r2, #50	; 0x32
 80011a0:	fb02 f303 	mul.w	r3, r2, r3
 80011a4:	4a1b      	ldr	r2, [pc, #108]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011a6:	fba2 2303 	umull	r2, r3, r2, r3
 80011aa:	0c9b      	lsrs	r3, r3, #18
 80011ac:	3301      	adds	r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011b0:	e002      	b.n	80011b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011c4:	d102      	bne.n	80011cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1f2      	bne.n	80011b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011d8:	d110      	bne.n	80011fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e00f      	b.n	80011fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ea:	d007      	beq.n	80011fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011ec:	4b07      	ldr	r3, [pc, #28]	; (800120c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011f4:	4a05      	ldr	r2, [pc, #20]	; (800120c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40007000 	.word	0x40007000
 8001210:	20000000 	.word	0x20000000
 8001214:	431bde83 	.word	0x431bde83

08001218 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e3ca      	b.n	80019c0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800122a:	4b97      	ldr	r3, [pc, #604]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
 8001232:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001234:	4b94      	ldr	r3, [pc, #592]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0310 	and.w	r3, r3, #16
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 80e4 	beq.w	8001414 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d007      	beq.n	8001262 <HAL_RCC_OscConfig+0x4a>
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	2b0c      	cmp	r3, #12
 8001256:	f040 808b 	bne.w	8001370 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	2b01      	cmp	r3, #1
 800125e:	f040 8087 	bne.w	8001370 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001262:	4b89      	ldr	r3, [pc, #548]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d005      	beq.n	800127a <HAL_RCC_OscConfig+0x62>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e3a2      	b.n	80019c0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a1a      	ldr	r2, [r3, #32]
 800127e:	4b82      	ldr	r3, [pc, #520]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	2b00      	cmp	r3, #0
 8001288:	d004      	beq.n	8001294 <HAL_RCC_OscConfig+0x7c>
 800128a:	4b7f      	ldr	r3, [pc, #508]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001292:	e005      	b.n	80012a0 <HAL_RCC_OscConfig+0x88>
 8001294:	4b7c      	ldr	r3, [pc, #496]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 8001296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800129a:	091b      	lsrs	r3, r3, #4
 800129c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d223      	bcs.n	80012ec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 fd55 	bl	8001d58 <RCC_SetFlashLatencyFromMSIRange>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e383      	b.n	80019c0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012b8:	4b73      	ldr	r3, [pc, #460]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a72      	ldr	r2, [pc, #456]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 80012be:	f043 0308 	orr.w	r3, r3, #8
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4b70      	ldr	r3, [pc, #448]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	496d      	ldr	r1, [pc, #436]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012d6:	4b6c      	ldr	r3, [pc, #432]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	4968      	ldr	r1, [pc, #416]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	604b      	str	r3, [r1, #4]
 80012ea:	e025      	b.n	8001338 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ec:	4b66      	ldr	r3, [pc, #408]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a65      	ldr	r2, [pc, #404]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 80012f2:	f043 0308 	orr.w	r3, r3, #8
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4b63      	ldr	r3, [pc, #396]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	4960      	ldr	r1, [pc, #384]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 8001306:	4313      	orrs	r3, r2
 8001308:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800130a:	4b5f      	ldr	r3, [pc, #380]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	495b      	ldr	r1, [pc, #364]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 800131a:	4313      	orrs	r3, r2
 800131c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d109      	bne.n	8001338 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fd15 	bl	8001d58 <RCC_SetFlashLatencyFromMSIRange>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e343      	b.n	80019c0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001338:	f000 fc4a 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 800133c:	4602      	mov	r2, r0
 800133e:	4b52      	ldr	r3, [pc, #328]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	091b      	lsrs	r3, r3, #4
 8001344:	f003 030f 	and.w	r3, r3, #15
 8001348:	4950      	ldr	r1, [pc, #320]	; (800148c <HAL_RCC_OscConfig+0x274>)
 800134a:	5ccb      	ldrb	r3, [r1, r3]
 800134c:	f003 031f 	and.w	r3, r3, #31
 8001350:	fa22 f303 	lsr.w	r3, r2, r3
 8001354:	4a4e      	ldr	r2, [pc, #312]	; (8001490 <HAL_RCC_OscConfig+0x278>)
 8001356:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001358:	4b4e      	ldr	r3, [pc, #312]	; (8001494 <HAL_RCC_OscConfig+0x27c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fbaf 	bl	8000ac0 <HAL_InitTick>
 8001362:	4603      	mov	r3, r0
 8001364:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d052      	beq.n	8001412 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	e327      	b.n	80019c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d032      	beq.n	80013de <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001378:	4b43      	ldr	r3, [pc, #268]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a42      	ldr	r2, [pc, #264]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001384:	f7ff fbec 	bl	8000b60 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800138c:	f7ff fbe8 	bl	8000b60 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e310      	b.n	80019c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800139e:	4b3a      	ldr	r3, [pc, #232]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f0      	beq.n	800138c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013aa:	4b37      	ldr	r3, [pc, #220]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a36      	ldr	r2, [pc, #216]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 80013b0:	f043 0308 	orr.w	r3, r3, #8
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	4b34      	ldr	r3, [pc, #208]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	4931      	ldr	r1, [pc, #196]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013c8:	4b2f      	ldr	r3, [pc, #188]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69db      	ldr	r3, [r3, #28]
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	492c      	ldr	r1, [pc, #176]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	604b      	str	r3, [r1, #4]
 80013dc:	e01a      	b.n	8001414 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013de:	4b2a      	ldr	r3, [pc, #168]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a29      	ldr	r2, [pc, #164]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 80013e4:	f023 0301 	bic.w	r3, r3, #1
 80013e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013ea:	f7ff fbb9 	bl	8000b60 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013f2:	f7ff fbb5 	bl	8000b60 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e2dd      	b.n	80019c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001404:	4b20      	ldr	r3, [pc, #128]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1f0      	bne.n	80013f2 <HAL_RCC_OscConfig+0x1da>
 8001410:	e000      	b.n	8001414 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001412:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d074      	beq.n	800150a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	2b08      	cmp	r3, #8
 8001424:	d005      	beq.n	8001432 <HAL_RCC_OscConfig+0x21a>
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	2b0c      	cmp	r3, #12
 800142a:	d10e      	bne.n	800144a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d10b      	bne.n	800144a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d064      	beq.n	8001508 <HAL_RCC_OscConfig+0x2f0>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d160      	bne.n	8001508 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e2ba      	b.n	80019c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001452:	d106      	bne.n	8001462 <HAL_RCC_OscConfig+0x24a>
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a0b      	ldr	r2, [pc, #44]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 800145a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	e026      	b.n	80014b0 <HAL_RCC_OscConfig+0x298>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800146a:	d115      	bne.n	8001498 <HAL_RCC_OscConfig+0x280>
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a05      	ldr	r2, [pc, #20]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 8001472:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	4b03      	ldr	r3, [pc, #12]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a02      	ldr	r2, [pc, #8]	; (8001488 <HAL_RCC_OscConfig+0x270>)
 800147e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	e014      	b.n	80014b0 <HAL_RCC_OscConfig+0x298>
 8001486:	bf00      	nop
 8001488:	40021000 	.word	0x40021000
 800148c:	08003c78 	.word	0x08003c78
 8001490:	20000000 	.word	0x20000000
 8001494:	20000004 	.word	0x20000004
 8001498:	4ba0      	ldr	r3, [pc, #640]	; (800171c <HAL_RCC_OscConfig+0x504>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a9f      	ldr	r2, [pc, #636]	; (800171c <HAL_RCC_OscConfig+0x504>)
 800149e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	4b9d      	ldr	r3, [pc, #628]	; (800171c <HAL_RCC_OscConfig+0x504>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a9c      	ldr	r2, [pc, #624]	; (800171c <HAL_RCC_OscConfig+0x504>)
 80014aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d013      	beq.n	80014e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b8:	f7ff fb52 	bl	8000b60 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c0:	f7ff fb4e 	bl	8000b60 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b64      	cmp	r3, #100	; 0x64
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e276      	b.n	80019c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014d2:	4b92      	ldr	r3, [pc, #584]	; (800171c <HAL_RCC_OscConfig+0x504>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0x2a8>
 80014de:	e014      	b.n	800150a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fb3e 	bl	8000b60 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e8:	f7ff fb3a 	bl	8000b60 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b64      	cmp	r3, #100	; 0x64
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e262      	b.n	80019c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014fa:	4b88      	ldr	r3, [pc, #544]	; (800171c <HAL_RCC_OscConfig+0x504>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x2d0>
 8001506:	e000      	b.n	800150a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d060      	beq.n	80015d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	2b04      	cmp	r3, #4
 800151a:	d005      	beq.n	8001528 <HAL_RCC_OscConfig+0x310>
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	2b0c      	cmp	r3, #12
 8001520:	d119      	bne.n	8001556 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d116      	bne.n	8001556 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001528:	4b7c      	ldr	r3, [pc, #496]	; (800171c <HAL_RCC_OscConfig+0x504>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001530:	2b00      	cmp	r3, #0
 8001532:	d005      	beq.n	8001540 <HAL_RCC_OscConfig+0x328>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e23f      	b.n	80019c0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001540:	4b76      	ldr	r3, [pc, #472]	; (800171c <HAL_RCC_OscConfig+0x504>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	061b      	lsls	r3, r3, #24
 800154e:	4973      	ldr	r1, [pc, #460]	; (800171c <HAL_RCC_OscConfig+0x504>)
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001554:	e040      	b.n	80015d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d023      	beq.n	80015a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800155e:	4b6f      	ldr	r3, [pc, #444]	; (800171c <HAL_RCC_OscConfig+0x504>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a6e      	ldr	r2, [pc, #440]	; (800171c <HAL_RCC_OscConfig+0x504>)
 8001564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156a:	f7ff faf9 	bl	8000b60 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001572:	f7ff faf5 	bl	8000b60 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e21d      	b.n	80019c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001584:	4b65      	ldr	r3, [pc, #404]	; (800171c <HAL_RCC_OscConfig+0x504>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0f0      	beq.n	8001572 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001590:	4b62      	ldr	r3, [pc, #392]	; (800171c <HAL_RCC_OscConfig+0x504>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	061b      	lsls	r3, r3, #24
 800159e:	495f      	ldr	r1, [pc, #380]	; (800171c <HAL_RCC_OscConfig+0x504>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]
 80015a4:	e018      	b.n	80015d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015a6:	4b5d      	ldr	r3, [pc, #372]	; (800171c <HAL_RCC_OscConfig+0x504>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a5c      	ldr	r2, [pc, #368]	; (800171c <HAL_RCC_OscConfig+0x504>)
 80015ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b2:	f7ff fad5 	bl	8000b60 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ba:	f7ff fad1 	bl	8000b60 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e1f9      	b.n	80019c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015cc:	4b53      	ldr	r3, [pc, #332]	; (800171c <HAL_RCC_OscConfig+0x504>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f0      	bne.n	80015ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d03c      	beq.n	800165e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d01c      	beq.n	8001626 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ec:	4b4b      	ldr	r3, [pc, #300]	; (800171c <HAL_RCC_OscConfig+0x504>)
 80015ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015f2:	4a4a      	ldr	r2, [pc, #296]	; (800171c <HAL_RCC_OscConfig+0x504>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fc:	f7ff fab0 	bl	8000b60 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001604:	f7ff faac 	bl	8000b60 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e1d4      	b.n	80019c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001616:	4b41      	ldr	r3, [pc, #260]	; (800171c <HAL_RCC_OscConfig+0x504>)
 8001618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0ef      	beq.n	8001604 <HAL_RCC_OscConfig+0x3ec>
 8001624:	e01b      	b.n	800165e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001626:	4b3d      	ldr	r3, [pc, #244]	; (800171c <HAL_RCC_OscConfig+0x504>)
 8001628:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800162c:	4a3b      	ldr	r2, [pc, #236]	; (800171c <HAL_RCC_OscConfig+0x504>)
 800162e:	f023 0301 	bic.w	r3, r3, #1
 8001632:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001636:	f7ff fa93 	bl	8000b60 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800163e:	f7ff fa8f 	bl	8000b60 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e1b7      	b.n	80019c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001650:	4b32      	ldr	r3, [pc, #200]	; (800171c <HAL_RCC_OscConfig+0x504>)
 8001652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1ef      	bne.n	800163e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 80a6 	beq.w	80017b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800166c:	2300      	movs	r3, #0
 800166e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001670:	4b2a      	ldr	r3, [pc, #168]	; (800171c <HAL_RCC_OscConfig+0x504>)
 8001672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d10d      	bne.n	8001698 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800167c:	4b27      	ldr	r3, [pc, #156]	; (800171c <HAL_RCC_OscConfig+0x504>)
 800167e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001680:	4a26      	ldr	r2, [pc, #152]	; (800171c <HAL_RCC_OscConfig+0x504>)
 8001682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001686:	6593      	str	r3, [r2, #88]	; 0x58
 8001688:	4b24      	ldr	r3, [pc, #144]	; (800171c <HAL_RCC_OscConfig+0x504>)
 800168a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001694:	2301      	movs	r3, #1
 8001696:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001698:	4b21      	ldr	r3, [pc, #132]	; (8001720 <HAL_RCC_OscConfig+0x508>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d118      	bne.n	80016d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016a4:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <HAL_RCC_OscConfig+0x508>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a1d      	ldr	r2, [pc, #116]	; (8001720 <HAL_RCC_OscConfig+0x508>)
 80016aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b0:	f7ff fa56 	bl	8000b60 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b8:	f7ff fa52 	bl	8000b60 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e17a      	b.n	80019c0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <HAL_RCC_OscConfig+0x508>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d108      	bne.n	80016f0 <HAL_RCC_OscConfig+0x4d8>
 80016de:	4b0f      	ldr	r3, [pc, #60]	; (800171c <HAL_RCC_OscConfig+0x504>)
 80016e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e4:	4a0d      	ldr	r2, [pc, #52]	; (800171c <HAL_RCC_OscConfig+0x504>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016ee:	e029      	b.n	8001744 <HAL_RCC_OscConfig+0x52c>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b05      	cmp	r3, #5
 80016f6:	d115      	bne.n	8001724 <HAL_RCC_OscConfig+0x50c>
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <HAL_RCC_OscConfig+0x504>)
 80016fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fe:	4a07      	ldr	r2, [pc, #28]	; (800171c <HAL_RCC_OscConfig+0x504>)
 8001700:	f043 0304 	orr.w	r3, r3, #4
 8001704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <HAL_RCC_OscConfig+0x504>)
 800170a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800170e:	4a03      	ldr	r2, [pc, #12]	; (800171c <HAL_RCC_OscConfig+0x504>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001718:	e014      	b.n	8001744 <HAL_RCC_OscConfig+0x52c>
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000
 8001720:	40007000 	.word	0x40007000
 8001724:	4b9c      	ldr	r3, [pc, #624]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 8001726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172a:	4a9b      	ldr	r2, [pc, #620]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 800172c:	f023 0301 	bic.w	r3, r3, #1
 8001730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001734:	4b98      	ldr	r3, [pc, #608]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 8001736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173a:	4a97      	ldr	r2, [pc, #604]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 800173c:	f023 0304 	bic.w	r3, r3, #4
 8001740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d016      	beq.n	800177a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174c:	f7ff fa08 	bl	8000b60 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001752:	e00a      	b.n	800176a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001754:	f7ff fa04 	bl	8000b60 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001762:	4293      	cmp	r3, r2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e12a      	b.n	80019c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800176a:	4b8b      	ldr	r3, [pc, #556]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 800176c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0ed      	beq.n	8001754 <HAL_RCC_OscConfig+0x53c>
 8001778:	e015      	b.n	80017a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177a:	f7ff f9f1 	bl	8000b60 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001780:	e00a      	b.n	8001798 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001782:	f7ff f9ed 	bl	8000b60 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001790:	4293      	cmp	r3, r2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e113      	b.n	80019c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001798:	4b7f      	ldr	r3, [pc, #508]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 800179a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1ed      	bne.n	8001782 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017a6:	7ffb      	ldrb	r3, [r7, #31]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d105      	bne.n	80017b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ac:	4b7a      	ldr	r3, [pc, #488]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 80017ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b0:	4a79      	ldr	r2, [pc, #484]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 80017b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017b6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 80fe 	beq.w	80019be <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	f040 80d0 	bne.w	800196c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017cc:	4b72      	ldr	r3, [pc, #456]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f003 0203 	and.w	r2, r3, #3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017dc:	429a      	cmp	r2, r3
 80017de:	d130      	bne.n	8001842 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	3b01      	subs	r3, #1
 80017ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d127      	bne.n	8001842 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017fe:	429a      	cmp	r2, r3
 8001800:	d11f      	bne.n	8001842 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800180c:	2a07      	cmp	r2, #7
 800180e:	bf14      	ite	ne
 8001810:	2201      	movne	r2, #1
 8001812:	2200      	moveq	r2, #0
 8001814:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001816:	4293      	cmp	r3, r2
 8001818:	d113      	bne.n	8001842 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001824:	085b      	lsrs	r3, r3, #1
 8001826:	3b01      	subs	r3, #1
 8001828:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800182a:	429a      	cmp	r2, r3
 800182c:	d109      	bne.n	8001842 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	085b      	lsrs	r3, r3, #1
 800183a:	3b01      	subs	r3, #1
 800183c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800183e:	429a      	cmp	r2, r3
 8001840:	d06e      	beq.n	8001920 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	2b0c      	cmp	r3, #12
 8001846:	d069      	beq.n	800191c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001848:	4b53      	ldr	r3, [pc, #332]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d105      	bne.n	8001860 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001854:	4b50      	ldr	r3, [pc, #320]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0ad      	b.n	80019c0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001864:	4b4c      	ldr	r3, [pc, #304]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a4b      	ldr	r2, [pc, #300]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 800186a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800186e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001870:	f7ff f976 	bl	8000b60 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff f972 	bl	8000b60 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e09a      	b.n	80019c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800188a:	4b43      	ldr	r3, [pc, #268]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001896:	4b40      	ldr	r3, [pc, #256]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	4b40      	ldr	r3, [pc, #256]	; (800199c <HAL_RCC_OscConfig+0x784>)
 800189c:	4013      	ands	r3, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018a6:	3a01      	subs	r2, #1
 80018a8:	0112      	lsls	r2, r2, #4
 80018aa:	4311      	orrs	r1, r2
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018b0:	0212      	lsls	r2, r2, #8
 80018b2:	4311      	orrs	r1, r2
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018b8:	0852      	lsrs	r2, r2, #1
 80018ba:	3a01      	subs	r2, #1
 80018bc:	0552      	lsls	r2, r2, #21
 80018be:	4311      	orrs	r1, r2
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018c4:	0852      	lsrs	r2, r2, #1
 80018c6:	3a01      	subs	r2, #1
 80018c8:	0652      	lsls	r2, r2, #25
 80018ca:	4311      	orrs	r1, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018d0:	0912      	lsrs	r2, r2, #4
 80018d2:	0452      	lsls	r2, r2, #17
 80018d4:	430a      	orrs	r2, r1
 80018d6:	4930      	ldr	r1, [pc, #192]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018dc:	4b2e      	ldr	r3, [pc, #184]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a2d      	ldr	r2, [pc, #180]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 80018e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018e8:	4b2b      	ldr	r3, [pc, #172]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4a2a      	ldr	r2, [pc, #168]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 80018ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018f4:	f7ff f934 	bl	8000b60 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fc:	f7ff f930 	bl	8000b60 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e058      	b.n	80019c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800190e:	4b22      	ldr	r3, [pc, #136]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800191a:	e050      	b.n	80019be <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e04f      	b.n	80019c0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001920:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d148      	bne.n	80019be <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800192c:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a19      	ldr	r2, [pc, #100]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 8001932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001936:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001938:	4b17      	ldr	r3, [pc, #92]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	4a16      	ldr	r2, [pc, #88]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 800193e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001942:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001944:	f7ff f90c 	bl	8000b60 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194c:	f7ff f908 	bl	8000b60 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e030      	b.n	80019c0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x734>
 800196a:	e028      	b.n	80019be <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	2b0c      	cmp	r3, #12
 8001970:	d023      	beq.n	80019ba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a08      	ldr	r2, [pc, #32]	; (8001998 <HAL_RCC_OscConfig+0x780>)
 8001978:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800197c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197e:	f7ff f8ef 	bl	8000b60 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001984:	e00c      	b.n	80019a0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001986:	f7ff f8eb 	bl	8000b60 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d905      	bls.n	80019a0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e013      	b.n	80019c0 <HAL_RCC_OscConfig+0x7a8>
 8001998:	40021000 	.word	0x40021000
 800199c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_RCC_OscConfig+0x7b0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1ec      	bne.n	8001986 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_RCC_OscConfig+0x7b0>)
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	4905      	ldr	r1, [pc, #20]	; (80019c8 <HAL_RCC_OscConfig+0x7b0>)
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_RCC_OscConfig+0x7b4>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	60cb      	str	r3, [r1, #12]
 80019b8:	e001      	b.n	80019be <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3720      	adds	r7, #32
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000
 80019cc:	feeefffc 	.word	0xfeeefffc

080019d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0e7      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e4:	4b75      	ldr	r3, [pc, #468]	; (8001bbc <HAL_RCC_ClockConfig+0x1ec>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d910      	bls.n	8001a14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4b72      	ldr	r3, [pc, #456]	; (8001bbc <HAL_RCC_ClockConfig+0x1ec>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 0207 	bic.w	r2, r3, #7
 80019fa:	4970      	ldr	r1, [pc, #448]	; (8001bbc <HAL_RCC_ClockConfig+0x1ec>)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a02:	4b6e      	ldr	r3, [pc, #440]	; (8001bbc <HAL_RCC_ClockConfig+0x1ec>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e0cf      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d010      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	4b66      	ldr	r3, [pc, #408]	; (8001bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d908      	bls.n	8001a42 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a30:	4b63      	ldr	r3, [pc, #396]	; (8001bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	4960      	ldr	r1, [pc, #384]	; (8001bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d04c      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a56:	4b5a      	ldr	r3, [pc, #360]	; (8001bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d121      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e0a6      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a6e:	4b54      	ldr	r3, [pc, #336]	; (8001bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d115      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e09a      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a86:	4b4e      	ldr	r3, [pc, #312]	; (8001bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d109      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e08e      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a96:	4b4a      	ldr	r3, [pc, #296]	; (8001bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e086      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001aa6:	4b46      	ldr	r3, [pc, #280]	; (8001bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f023 0203 	bic.w	r2, r3, #3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4943      	ldr	r1, [pc, #268]	; (8001bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ab8:	f7ff f852 	bl	8000b60 <HAL_GetTick>
 8001abc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	e00a      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac0:	f7ff f84e 	bl	8000b60 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e06e      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad6:	4b3a      	ldr	r3, [pc, #232]	; (8001bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 020c 	and.w	r2, r3, #12
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d1eb      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d010      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d208      	bcs.n	8001b16 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b04:	4b2e      	ldr	r3, [pc, #184]	; (8001bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	492b      	ldr	r1, [pc, #172]	; (8001bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b16:	4b29      	ldr	r3, [pc, #164]	; (8001bbc <HAL_RCC_ClockConfig+0x1ec>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d210      	bcs.n	8001b46 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b24:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <HAL_RCC_ClockConfig+0x1ec>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f023 0207 	bic.w	r2, r3, #7
 8001b2c:	4923      	ldr	r1, [pc, #140]	; (8001bbc <HAL_RCC_ClockConfig+0x1ec>)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b34:	4b21      	ldr	r3, [pc, #132]	; (8001bbc <HAL_RCC_ClockConfig+0x1ec>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d001      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e036      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d008      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b52:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	4918      	ldr	r1, [pc, #96]	; (8001bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d009      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b70:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4910      	ldr	r1, [pc, #64]	; (8001bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b84:	f000 f824 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	091b      	lsrs	r3, r3, #4
 8001b90:	f003 030f 	and.w	r3, r3, #15
 8001b94:	490b      	ldr	r1, [pc, #44]	; (8001bc4 <HAL_RCC_ClockConfig+0x1f4>)
 8001b96:	5ccb      	ldrb	r3, [r1, r3]
 8001b98:	f003 031f 	and.w	r3, r3, #31
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba0:	4a09      	ldr	r2, [pc, #36]	; (8001bc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ba2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_RCC_ClockConfig+0x1fc>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe ff89 	bl	8000ac0 <HAL_InitTick>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bb2:	7afb      	ldrb	r3, [r7, #11]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40022000 	.word	0x40022000
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	08003c78 	.word	0x08003c78
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	20000004 	.word	0x20000004

08001bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b089      	sub	sp, #36	; 0x24
 8001bd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bde:	4b3e      	ldr	r3, [pc, #248]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001be8:	4b3b      	ldr	r3, [pc, #236]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_GetSysClockFreq+0x34>
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	2b0c      	cmp	r3, #12
 8001bfc:	d121      	bne.n	8001c42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d11e      	bne.n	8001c42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c04:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d107      	bne.n	8001c20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c10:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c16:	0a1b      	lsrs	r3, r3, #8
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	61fb      	str	r3, [r7, #28]
 8001c1e:	e005      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c20:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	091b      	lsrs	r3, r3, #4
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c2c:	4a2b      	ldr	r2, [pc, #172]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10d      	bne.n	8001c58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c40:	e00a      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d102      	bne.n	8001c4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c48:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c4a:	61bb      	str	r3, [r7, #24]
 8001c4c:	e004      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d101      	bne.n	8001c58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c54:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	2b0c      	cmp	r3, #12
 8001c5c:	d134      	bne.n	8001cc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c5e:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d003      	beq.n	8001c76 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d003      	beq.n	8001c7c <HAL_RCC_GetSysClockFreq+0xac>
 8001c74:	e005      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c76:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c78:	617b      	str	r3, [r7, #20]
      break;
 8001c7a:	e005      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c7e:	617b      	str	r3, [r7, #20]
      break;
 8001c80:	e002      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	617b      	str	r3, [r7, #20]
      break;
 8001c86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	3301      	adds	r3, #1
 8001c94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	0a1b      	lsrs	r3, r3, #8
 8001c9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	fb03 f202 	mul.w	r2, r3, r2
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	0e5b      	lsrs	r3, r3, #25
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	3301      	adds	r3, #1
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cc8:	69bb      	ldr	r3, [r7, #24]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3724      	adds	r7, #36	; 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	08003c90 	.word	0x08003c90
 8001ce0:	00f42400 	.word	0x00f42400
 8001ce4:	007a1200 	.word	0x007a1200

08001ce8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	20000000 	.word	0x20000000

08001d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d04:	f7ff fff0 	bl	8001ce8 <HAL_RCC_GetHCLKFreq>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	0a1b      	lsrs	r3, r3, #8
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	4904      	ldr	r1, [pc, #16]	; (8001d28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d16:	5ccb      	ldrb	r3, [r1, r3]
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40021000 	.word	0x40021000
 8001d28:	08003c88 	.word	0x08003c88

08001d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d30:	f7ff ffda 	bl	8001ce8 <HAL_RCC_GetHCLKFreq>
 8001d34:	4602      	mov	r2, r0
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	0adb      	lsrs	r3, r3, #11
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	4904      	ldr	r1, [pc, #16]	; (8001d54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d42:	5ccb      	ldrb	r3, [r1, r3]
 8001d44:	f003 031f 	and.w	r3, r3, #31
 8001d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	08003c88 	.word	0x08003c88

08001d58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d64:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d70:	f7ff f9ee 	bl	8001150 <HAL_PWREx_GetVoltageRange>
 8001d74:	6178      	str	r0, [r7, #20]
 8001d76:	e014      	b.n	8001da2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d78:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	4a24      	ldr	r2, [pc, #144]	; (8001e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d82:	6593      	str	r3, [r2, #88]	; 0x58
 8001d84:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d90:	f7ff f9de 	bl	8001150 <HAL_PWREx_GetVoltageRange>
 8001d94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d96:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9a:	4a1d      	ldr	r2, [pc, #116]	; (8001e10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001da0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da8:	d10b      	bne.n	8001dc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b80      	cmp	r3, #128	; 0x80
 8001dae:	d919      	bls.n	8001de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2ba0      	cmp	r3, #160	; 0xa0
 8001db4:	d902      	bls.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001db6:	2302      	movs	r3, #2
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	e013      	b.n	8001de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	e010      	b.n	8001de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b80      	cmp	r3, #128	; 0x80
 8001dc6:	d902      	bls.n	8001dce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001dc8:	2303      	movs	r3, #3
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	e00a      	b.n	8001de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b80      	cmp	r3, #128	; 0x80
 8001dd2:	d102      	bne.n	8001dda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	e004      	b.n	8001de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b70      	cmp	r3, #112	; 0x70
 8001dde:	d101      	bne.n	8001de4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001de0:	2301      	movs	r3, #1
 8001de2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f023 0207 	bic.w	r2, r3, #7
 8001dec:	4909      	ldr	r1, [pc, #36]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001df4:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d001      	beq.n	8001e06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40022000 	.word	0x40022000

08001e18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e20:	2300      	movs	r3, #0
 8001e22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e24:	2300      	movs	r3, #0
 8001e26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d041      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e3c:	d02a      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e3e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e42:	d824      	bhi.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e48:	d008      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e4e:	d81e      	bhi.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00a      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e58:	d010      	beq.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e5a:	e018      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e5c:	4b86      	ldr	r3, [pc, #536]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4a85      	ldr	r2, [pc, #532]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e66:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e68:	e015      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 fabb 	bl	80023ec <RCCEx_PLLSAI1_Config>
 8001e76:	4603      	mov	r3, r0
 8001e78:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e7a:	e00c      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3320      	adds	r3, #32
 8001e80:	2100      	movs	r1, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 fba6 	bl	80025d4 <RCCEx_PLLSAI2_Config>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e8c:	e003      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	74fb      	strb	r3, [r7, #19]
      break;
 8001e92:	e000      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e96:	7cfb      	ldrb	r3, [r7, #19]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10b      	bne.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e9c:	4b76      	ldr	r3, [pc, #472]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001eaa:	4973      	ldr	r1, [pc, #460]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001eb2:	e001      	b.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001eb4:	7cfb      	ldrb	r3, [r7, #19]
 8001eb6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d041      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ec8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ecc:	d02a      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001ece:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ed2:	d824      	bhi.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ed4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ed8:	d008      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001eda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ede:	d81e      	bhi.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00a      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee8:	d010      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001eea:	e018      	b.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001eec:	4b62      	ldr	r3, [pc, #392]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4a61      	ldr	r2, [pc, #388]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ef8:	e015      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3304      	adds	r3, #4
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 fa73 	bl	80023ec <RCCEx_PLLSAI1_Config>
 8001f06:	4603      	mov	r3, r0
 8001f08:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f0a:	e00c      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3320      	adds	r3, #32
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 fb5e 	bl	80025d4 <RCCEx_PLLSAI2_Config>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f1c:	e003      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	74fb      	strb	r3, [r7, #19]
      break;
 8001f22:	e000      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f26:	7cfb      	ldrb	r3, [r7, #19]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10b      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f2c:	4b52      	ldr	r3, [pc, #328]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f32:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f3a:	494f      	ldr	r1, [pc, #316]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f42:	e001      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f44:	7cfb      	ldrb	r3, [r7, #19]
 8001f46:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80a0 	beq.w	8002096 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f5a:	4b47      	ldr	r3, [pc, #284]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00d      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f70:	4b41      	ldr	r3, [pc, #260]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f74:	4a40      	ldr	r2, [pc, #256]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7c:	4b3e      	ldr	r3, [pc, #248]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f8c:	4b3b      	ldr	r3, [pc, #236]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a3a      	ldr	r2, [pc, #232]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f98:	f7fe fde2 	bl	8000b60 <HAL_GetTick>
 8001f9c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f9e:	e009      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa0:	f7fe fdde 	bl	8000b60 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d902      	bls.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	74fb      	strb	r3, [r7, #19]
        break;
 8001fb2:	e005      	b.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fb4:	4b31      	ldr	r3, [pc, #196]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0ef      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001fc0:	7cfb      	ldrb	r3, [r7, #19]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d15c      	bne.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fc6:	4b2c      	ldr	r3, [pc, #176]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fd0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d01f      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d019      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fe4:	4b24      	ldr	r3, [pc, #144]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ff0:	4b21      	ldr	r3, [pc, #132]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff6:	4a20      	ldr	r2, [pc, #128]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002000:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002006:	4a1c      	ldr	r2, [pc, #112]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002010:	4a19      	ldr	r2, [pc, #100]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d016      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002022:	f7fe fd9d 	bl	8000b60 <HAL_GetTick>
 8002026:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002028:	e00b      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f7fe fd99 	bl	8000b60 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f241 3288 	movw	r2, #5000	; 0x1388
 8002038:	4293      	cmp	r3, r2
 800203a:	d902      	bls.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	74fb      	strb	r3, [r7, #19]
            break;
 8002040:	e006      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002042:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0ec      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002050:	7cfb      	ldrb	r3, [r7, #19]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10c      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002066:	4904      	ldr	r1, [pc, #16]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002068:	4313      	orrs	r3, r2
 800206a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800206e:	e009      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002070:	7cfb      	ldrb	r3, [r7, #19]
 8002072:	74bb      	strb	r3, [r7, #18]
 8002074:	e006      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000
 800207c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002084:	7c7b      	ldrb	r3, [r7, #17]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d105      	bne.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800208a:	4b9e      	ldr	r3, [pc, #632]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208e:	4a9d      	ldr	r2, [pc, #628]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002094:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00a      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020a2:	4b98      	ldr	r3, [pc, #608]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a8:	f023 0203 	bic.w	r2, r3, #3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b0:	4994      	ldr	r1, [pc, #592]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00a      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020c4:	4b8f      	ldr	r3, [pc, #572]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ca:	f023 020c 	bic.w	r2, r3, #12
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d2:	498c      	ldr	r1, [pc, #560]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00a      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020e6:	4b87      	ldr	r3, [pc, #540]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	4983      	ldr	r1, [pc, #524]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00a      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002108:	4b7e      	ldr	r3, [pc, #504]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	497b      	ldr	r1, [pc, #492]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00a      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800212a:	4b76      	ldr	r3, [pc, #472]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002138:	4972      	ldr	r1, [pc, #456]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213a:	4313      	orrs	r3, r2
 800213c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0320 	and.w	r3, r3, #32
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00a      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800214c:	4b6d      	ldr	r3, [pc, #436]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002152:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215a:	496a      	ldr	r1, [pc, #424]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215c:	4313      	orrs	r3, r2
 800215e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00a      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800216e:	4b65      	ldr	r3, [pc, #404]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002174:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217c:	4961      	ldr	r1, [pc, #388]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00a      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002190:	4b5c      	ldr	r3, [pc, #368]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002196:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219e:	4959      	ldr	r1, [pc, #356]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00a      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021b2:	4b54      	ldr	r3, [pc, #336]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c0:	4950      	ldr	r1, [pc, #320]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00a      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021d4:	4b4b      	ldr	r3, [pc, #300]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e2:	4948      	ldr	r1, [pc, #288]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00a      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021f6:	4b43      	ldr	r3, [pc, #268]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002204:	493f      	ldr	r1, [pc, #252]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002206:	4313      	orrs	r3, r2
 8002208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d028      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002218:	4b3a      	ldr	r3, [pc, #232]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002226:	4937      	ldr	r1, [pc, #220]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002232:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002236:	d106      	bne.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002238:	4b32      	ldr	r3, [pc, #200]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4a31      	ldr	r2, [pc, #196]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002242:	60d3      	str	r3, [r2, #12]
 8002244:	e011      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800224a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800224e:	d10c      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3304      	adds	r3, #4
 8002254:	2101      	movs	r1, #1
 8002256:	4618      	mov	r0, r3
 8002258:	f000 f8c8 	bl	80023ec <RCCEx_PLLSAI1_Config>
 800225c:	4603      	mov	r3, r0
 800225e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002260:	7cfb      	ldrb	r3, [r7, #19]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002266:	7cfb      	ldrb	r3, [r7, #19]
 8002268:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d028      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002276:	4b23      	ldr	r3, [pc, #140]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002284:	491f      	ldr	r1, [pc, #124]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002290:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002294:	d106      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002296:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	4a1a      	ldr	r2, [pc, #104]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022a0:	60d3      	str	r3, [r2, #12]
 80022a2:	e011      	b.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3304      	adds	r3, #4
 80022b2:	2101      	movs	r1, #1
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 f899 	bl	80023ec <RCCEx_PLLSAI1_Config>
 80022ba:	4603      	mov	r3, r0
 80022bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022be:	7cfb      	ldrb	r3, [r7, #19]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80022c4:	7cfb      	ldrb	r3, [r7, #19]
 80022c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d02b      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e2:	4908      	ldr	r1, [pc, #32]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022f2:	d109      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f4:	4b03      	ldr	r3, [pc, #12]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4a02      	ldr	r2, [pc, #8]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022fe:	60d3      	str	r3, [r2, #12]
 8002300:	e014      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800230c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002310:	d10c      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3304      	adds	r3, #4
 8002316:	2101      	movs	r1, #1
 8002318:	4618      	mov	r0, r3
 800231a:	f000 f867 	bl	80023ec <RCCEx_PLLSAI1_Config>
 800231e:	4603      	mov	r3, r0
 8002320:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002322:	7cfb      	ldrb	r3, [r7, #19]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002328:	7cfb      	ldrb	r3, [r7, #19]
 800232a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d02f      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002338:	4b2b      	ldr	r3, [pc, #172]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002346:	4928      	ldr	r1, [pc, #160]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002352:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002356:	d10d      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3304      	adds	r3, #4
 800235c:	2102      	movs	r1, #2
 800235e:	4618      	mov	r0, r3
 8002360:	f000 f844 	bl	80023ec <RCCEx_PLLSAI1_Config>
 8002364:	4603      	mov	r3, r0
 8002366:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002368:	7cfb      	ldrb	r3, [r7, #19]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d014      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800236e:	7cfb      	ldrb	r3, [r7, #19]
 8002370:	74bb      	strb	r3, [r7, #18]
 8002372:	e011      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800237c:	d10c      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3320      	adds	r3, #32
 8002382:	2102      	movs	r1, #2
 8002384:	4618      	mov	r0, r3
 8002386:	f000 f925 	bl	80025d4 <RCCEx_PLLSAI2_Config>
 800238a:	4603      	mov	r3, r0
 800238c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800238e:	7cfb      	ldrb	r3, [r7, #19]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002394:	7cfb      	ldrb	r3, [r7, #19]
 8002396:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023a4:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023b2:	490d      	ldr	r1, [pc, #52]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00b      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023d6:	4904      	ldr	r1, [pc, #16]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023de:	7cbb      	ldrb	r3, [r7, #18]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000

080023ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023fa:	4b75      	ldr	r3, [pc, #468]	; (80025d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d018      	beq.n	8002438 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002406:	4b72      	ldr	r3, [pc, #456]	; (80025d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f003 0203 	and.w	r2, r3, #3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d10d      	bne.n	8002432 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
       ||
 800241a:	2b00      	cmp	r3, #0
 800241c:	d009      	beq.n	8002432 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800241e:	4b6c      	ldr	r3, [pc, #432]	; (80025d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
       ||
 800242e:	429a      	cmp	r2, r3
 8002430:	d047      	beq.n	80024c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	73fb      	strb	r3, [r7, #15]
 8002436:	e044      	b.n	80024c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b03      	cmp	r3, #3
 800243e:	d018      	beq.n	8002472 <RCCEx_PLLSAI1_Config+0x86>
 8002440:	2b03      	cmp	r3, #3
 8002442:	d825      	bhi.n	8002490 <RCCEx_PLLSAI1_Config+0xa4>
 8002444:	2b01      	cmp	r3, #1
 8002446:	d002      	beq.n	800244e <RCCEx_PLLSAI1_Config+0x62>
 8002448:	2b02      	cmp	r3, #2
 800244a:	d009      	beq.n	8002460 <RCCEx_PLLSAI1_Config+0x74>
 800244c:	e020      	b.n	8002490 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800244e:	4b60      	ldr	r3, [pc, #384]	; (80025d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d11d      	bne.n	8002496 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800245e:	e01a      	b.n	8002496 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002460:	4b5b      	ldr	r3, [pc, #364]	; (80025d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002468:	2b00      	cmp	r3, #0
 800246a:	d116      	bne.n	800249a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002470:	e013      	b.n	800249a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002472:	4b57      	ldr	r3, [pc, #348]	; (80025d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10f      	bne.n	800249e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800247e:	4b54      	ldr	r3, [pc, #336]	; (80025d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800248e:	e006      	b.n	800249e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
      break;
 8002494:	e004      	b.n	80024a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002496:	bf00      	nop
 8002498:	e002      	b.n	80024a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800249a:	bf00      	nop
 800249c:	e000      	b.n	80024a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800249e:	bf00      	nop
    }

    if(status == HAL_OK)
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10d      	bne.n	80024c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024a6:	4b4a      	ldr	r3, [pc, #296]	; (80025d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6819      	ldr	r1, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	430b      	orrs	r3, r1
 80024bc:	4944      	ldr	r1, [pc, #272]	; (80025d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d17d      	bne.n	80025c4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024c8:	4b41      	ldr	r3, [pc, #260]	; (80025d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a40      	ldr	r2, [pc, #256]	; (80025d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d4:	f7fe fb44 	bl	8000b60 <HAL_GetTick>
 80024d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024da:	e009      	b.n	80024f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024dc:	f7fe fb40 	bl	8000b60 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d902      	bls.n	80024f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	73fb      	strb	r3, [r7, #15]
        break;
 80024ee:	e005      	b.n	80024fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024f0:	4b37      	ldr	r3, [pc, #220]	; (80025d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1ef      	bne.n	80024dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d160      	bne.n	80025c4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d111      	bne.n	800252c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002508:	4b31      	ldr	r3, [pc, #196]	; (80025d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6892      	ldr	r2, [r2, #8]
 8002518:	0211      	lsls	r1, r2, #8
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68d2      	ldr	r2, [r2, #12]
 800251e:	0912      	lsrs	r2, r2, #4
 8002520:	0452      	lsls	r2, r2, #17
 8002522:	430a      	orrs	r2, r1
 8002524:	492a      	ldr	r1, [pc, #168]	; (80025d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	610b      	str	r3, [r1, #16]
 800252a:	e027      	b.n	800257c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d112      	bne.n	8002558 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002532:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800253a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6892      	ldr	r2, [r2, #8]
 8002542:	0211      	lsls	r1, r2, #8
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6912      	ldr	r2, [r2, #16]
 8002548:	0852      	lsrs	r2, r2, #1
 800254a:	3a01      	subs	r2, #1
 800254c:	0552      	lsls	r2, r2, #21
 800254e:	430a      	orrs	r2, r1
 8002550:	491f      	ldr	r1, [pc, #124]	; (80025d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002552:	4313      	orrs	r3, r2
 8002554:	610b      	str	r3, [r1, #16]
 8002556:	e011      	b.n	800257c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002558:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002560:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6892      	ldr	r2, [r2, #8]
 8002568:	0211      	lsls	r1, r2, #8
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6952      	ldr	r2, [r2, #20]
 800256e:	0852      	lsrs	r2, r2, #1
 8002570:	3a01      	subs	r2, #1
 8002572:	0652      	lsls	r2, r2, #25
 8002574:	430a      	orrs	r2, r1
 8002576:	4916      	ldr	r1, [pc, #88]	; (80025d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002578:	4313      	orrs	r3, r2
 800257a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800257c:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a13      	ldr	r2, [pc, #76]	; (80025d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002582:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002586:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002588:	f7fe faea 	bl	8000b60 <HAL_GetTick>
 800258c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800258e:	e009      	b.n	80025a4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002590:	f7fe fae6 	bl	8000b60 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d902      	bls.n	80025a4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	73fb      	strb	r3, [r7, #15]
          break;
 80025a2:	e005      	b.n	80025b0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025a4:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0ef      	beq.n	8002590 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	4904      	ldr	r1, [pc, #16]	; (80025d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000

080025d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025e2:	4b6a      	ldr	r3, [pc, #424]	; (800278c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d018      	beq.n	8002620 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025ee:	4b67      	ldr	r3, [pc, #412]	; (800278c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f003 0203 	and.w	r2, r3, #3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d10d      	bne.n	800261a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
       ||
 8002602:	2b00      	cmp	r3, #0
 8002604:	d009      	beq.n	800261a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002606:	4b61      	ldr	r3, [pc, #388]	; (800278c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	091b      	lsrs	r3, r3, #4
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
       ||
 8002616:	429a      	cmp	r2, r3
 8002618:	d047      	beq.n	80026aa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	73fb      	strb	r3, [r7, #15]
 800261e:	e044      	b.n	80026aa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b03      	cmp	r3, #3
 8002626:	d018      	beq.n	800265a <RCCEx_PLLSAI2_Config+0x86>
 8002628:	2b03      	cmp	r3, #3
 800262a:	d825      	bhi.n	8002678 <RCCEx_PLLSAI2_Config+0xa4>
 800262c:	2b01      	cmp	r3, #1
 800262e:	d002      	beq.n	8002636 <RCCEx_PLLSAI2_Config+0x62>
 8002630:	2b02      	cmp	r3, #2
 8002632:	d009      	beq.n	8002648 <RCCEx_PLLSAI2_Config+0x74>
 8002634:	e020      	b.n	8002678 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002636:	4b55      	ldr	r3, [pc, #340]	; (800278c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d11d      	bne.n	800267e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002646:	e01a      	b.n	800267e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002648:	4b50      	ldr	r3, [pc, #320]	; (800278c <RCCEx_PLLSAI2_Config+0x1b8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002650:	2b00      	cmp	r3, #0
 8002652:	d116      	bne.n	8002682 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002658:	e013      	b.n	8002682 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800265a:	4b4c      	ldr	r3, [pc, #304]	; (800278c <RCCEx_PLLSAI2_Config+0x1b8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10f      	bne.n	8002686 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002666:	4b49      	ldr	r3, [pc, #292]	; (800278c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d109      	bne.n	8002686 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002676:	e006      	b.n	8002686 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	73fb      	strb	r3, [r7, #15]
      break;
 800267c:	e004      	b.n	8002688 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800267e:	bf00      	nop
 8002680:	e002      	b.n	8002688 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002682:	bf00      	nop
 8002684:	e000      	b.n	8002688 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002686:	bf00      	nop
    }

    if(status == HAL_OK)
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10d      	bne.n	80026aa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800268e:	4b3f      	ldr	r3, [pc, #252]	; (800278c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6819      	ldr	r1, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	430b      	orrs	r3, r1
 80026a4:	4939      	ldr	r1, [pc, #228]	; (800278c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d167      	bne.n	8002780 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026b0:	4b36      	ldr	r3, [pc, #216]	; (800278c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a35      	ldr	r2, [pc, #212]	; (800278c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026bc:	f7fe fa50 	bl	8000b60 <HAL_GetTick>
 80026c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026c2:	e009      	b.n	80026d8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026c4:	f7fe fa4c 	bl	8000b60 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d902      	bls.n	80026d8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	73fb      	strb	r3, [r7, #15]
        break;
 80026d6:	e005      	b.n	80026e4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026d8:	4b2c      	ldr	r3, [pc, #176]	; (800278c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1ef      	bne.n	80026c4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d14a      	bne.n	8002780 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d111      	bne.n	8002714 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026f0:	4b26      	ldr	r3, [pc, #152]	; (800278c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80026f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6892      	ldr	r2, [r2, #8]
 8002700:	0211      	lsls	r1, r2, #8
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68d2      	ldr	r2, [r2, #12]
 8002706:	0912      	lsrs	r2, r2, #4
 8002708:	0452      	lsls	r2, r2, #17
 800270a:	430a      	orrs	r2, r1
 800270c:	491f      	ldr	r1, [pc, #124]	; (800278c <RCCEx_PLLSAI2_Config+0x1b8>)
 800270e:	4313      	orrs	r3, r2
 8002710:	614b      	str	r3, [r1, #20]
 8002712:	e011      	b.n	8002738 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002714:	4b1d      	ldr	r3, [pc, #116]	; (800278c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800271c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6892      	ldr	r2, [r2, #8]
 8002724:	0211      	lsls	r1, r2, #8
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6912      	ldr	r2, [r2, #16]
 800272a:	0852      	lsrs	r2, r2, #1
 800272c:	3a01      	subs	r2, #1
 800272e:	0652      	lsls	r2, r2, #25
 8002730:	430a      	orrs	r2, r1
 8002732:	4916      	ldr	r1, [pc, #88]	; (800278c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002734:	4313      	orrs	r3, r2
 8002736:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002738:	4b14      	ldr	r3, [pc, #80]	; (800278c <RCCEx_PLLSAI2_Config+0x1b8>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a13      	ldr	r2, [pc, #76]	; (800278c <RCCEx_PLLSAI2_Config+0x1b8>)
 800273e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002742:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002744:	f7fe fa0c 	bl	8000b60 <HAL_GetTick>
 8002748:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800274a:	e009      	b.n	8002760 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800274c:	f7fe fa08 	bl	8000b60 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d902      	bls.n	8002760 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	73fb      	strb	r3, [r7, #15]
          break;
 800275e:	e005      	b.n	800276c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002760:	4b0a      	ldr	r3, [pc, #40]	; (800278c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0ef      	beq.n	800274c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d106      	bne.n	8002780 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	4904      	ldr	r1, [pc, #16]	; (800278c <RCCEx_PLLSAI2_Config+0x1b8>)
 800277c:	4313      	orrs	r3, r2
 800277e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002780:	7bfb      	ldrb	r3, [r7, #15]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000

08002790 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e040      	b.n	8002824 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7fe f8de 	bl	8000974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2224      	movs	r2, #36	; 0x24
 80027bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0201 	bic.w	r2, r2, #1
 80027cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 fb6a 	bl	8002eb0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f8af 	bl	8002940 <UART_SetConfig>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e01b      	b.n	8002824 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800280a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0201 	orr.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 fbe9 	bl	8002ff4 <UART_CheckIdleState>
 8002822:	4603      	mov	r3, r0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	; 0x28
 8002830:	af02      	add	r7, sp, #8
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	4613      	mov	r3, r2
 800283a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002840:	2b20      	cmp	r3, #32
 8002842:	d178      	bne.n	8002936 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <HAL_UART_Transmit+0x24>
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e071      	b.n	8002938 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2221      	movs	r2, #33	; 0x21
 8002860:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002862:	f7fe f97d 	bl	8000b60 <HAL_GetTick>
 8002866:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	88fa      	ldrh	r2, [r7, #6]
 800286c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	88fa      	ldrh	r2, [r7, #6]
 8002874:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002880:	d108      	bne.n	8002894 <HAL_UART_Transmit+0x68>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d104      	bne.n	8002894 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	e003      	b.n	800289c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002898:	2300      	movs	r3, #0
 800289a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800289c:	e030      	b.n	8002900 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2200      	movs	r2, #0
 80028a6:	2180      	movs	r1, #128	; 0x80
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 fc4b 	bl	8003144 <UART_WaitOnFlagUntilTimeout>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d004      	beq.n	80028be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2220      	movs	r2, #32
 80028b8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e03c      	b.n	8002938 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10b      	bne.n	80028dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	881a      	ldrh	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028d0:	b292      	uxth	r2, r2
 80028d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	3302      	adds	r3, #2
 80028d8:	61bb      	str	r3, [r7, #24]
 80028da:	e008      	b.n	80028ee <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	781a      	ldrb	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	b292      	uxth	r2, r2
 80028e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	3301      	adds	r3, #1
 80028ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002906:	b29b      	uxth	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1c8      	bne.n	800289e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	2200      	movs	r2, #0
 8002914:	2140      	movs	r1, #64	; 0x40
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 fc14 	bl	8003144 <UART_WaitOnFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d004      	beq.n	800292c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2220      	movs	r2, #32
 8002926:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e005      	b.n	8002938 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	e000      	b.n	8002938 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002936:	2302      	movs	r3, #2
  }
}
 8002938:	4618      	mov	r0, r3
 800293a:	3720      	adds	r7, #32
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002944:	b08a      	sub	sp, #40	; 0x28
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	431a      	orrs	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	431a      	orrs	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	4313      	orrs	r3, r2
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	4ba4      	ldr	r3, [pc, #656]	; (8002c00 <UART_SetConfig+0x2c0>)
 8002970:	4013      	ands	r3, r2
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002978:	430b      	orrs	r3, r1
 800297a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a99      	ldr	r2, [pc, #612]	; (8002c04 <UART_SetConfig+0x2c4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d004      	beq.n	80029ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a8:	4313      	orrs	r3, r2
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029bc:	430a      	orrs	r2, r1
 80029be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a90      	ldr	r2, [pc, #576]	; (8002c08 <UART_SetConfig+0x2c8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d126      	bne.n	8002a18 <UART_SetConfig+0xd8>
 80029ca:	4b90      	ldr	r3, [pc, #576]	; (8002c0c <UART_SetConfig+0x2cc>)
 80029cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d81b      	bhi.n	8002a10 <UART_SetConfig+0xd0>
 80029d8:	a201      	add	r2, pc, #4	; (adr r2, 80029e0 <UART_SetConfig+0xa0>)
 80029da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029de:	bf00      	nop
 80029e0:	080029f1 	.word	0x080029f1
 80029e4:	08002a01 	.word	0x08002a01
 80029e8:	080029f9 	.word	0x080029f9
 80029ec:	08002a09 	.word	0x08002a09
 80029f0:	2301      	movs	r3, #1
 80029f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029f6:	e116      	b.n	8002c26 <UART_SetConfig+0x2e6>
 80029f8:	2302      	movs	r3, #2
 80029fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029fe:	e112      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002a00:	2304      	movs	r3, #4
 8002a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a06:	e10e      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002a08:	2308      	movs	r3, #8
 8002a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a0e:	e10a      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002a10:	2310      	movs	r3, #16
 8002a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a16:	e106      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a7c      	ldr	r2, [pc, #496]	; (8002c10 <UART_SetConfig+0x2d0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d138      	bne.n	8002a94 <UART_SetConfig+0x154>
 8002a22:	4b7a      	ldr	r3, [pc, #488]	; (8002c0c <UART_SetConfig+0x2cc>)
 8002a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a28:	f003 030c 	and.w	r3, r3, #12
 8002a2c:	2b0c      	cmp	r3, #12
 8002a2e:	d82d      	bhi.n	8002a8c <UART_SetConfig+0x14c>
 8002a30:	a201      	add	r2, pc, #4	; (adr r2, 8002a38 <UART_SetConfig+0xf8>)
 8002a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a36:	bf00      	nop
 8002a38:	08002a6d 	.word	0x08002a6d
 8002a3c:	08002a8d 	.word	0x08002a8d
 8002a40:	08002a8d 	.word	0x08002a8d
 8002a44:	08002a8d 	.word	0x08002a8d
 8002a48:	08002a7d 	.word	0x08002a7d
 8002a4c:	08002a8d 	.word	0x08002a8d
 8002a50:	08002a8d 	.word	0x08002a8d
 8002a54:	08002a8d 	.word	0x08002a8d
 8002a58:	08002a75 	.word	0x08002a75
 8002a5c:	08002a8d 	.word	0x08002a8d
 8002a60:	08002a8d 	.word	0x08002a8d
 8002a64:	08002a8d 	.word	0x08002a8d
 8002a68:	08002a85 	.word	0x08002a85
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a72:	e0d8      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002a74:	2302      	movs	r3, #2
 8002a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a7a:	e0d4      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002a7c:	2304      	movs	r3, #4
 8002a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a82:	e0d0      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002a84:	2308      	movs	r3, #8
 8002a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a8a:	e0cc      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002a8c:	2310      	movs	r3, #16
 8002a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a92:	e0c8      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a5e      	ldr	r2, [pc, #376]	; (8002c14 <UART_SetConfig+0x2d4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d125      	bne.n	8002aea <UART_SetConfig+0x1aa>
 8002a9e:	4b5b      	ldr	r3, [pc, #364]	; (8002c0c <UART_SetConfig+0x2cc>)
 8002aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002aa8:	2b30      	cmp	r3, #48	; 0x30
 8002aaa:	d016      	beq.n	8002ada <UART_SetConfig+0x19a>
 8002aac:	2b30      	cmp	r3, #48	; 0x30
 8002aae:	d818      	bhi.n	8002ae2 <UART_SetConfig+0x1a2>
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	d00a      	beq.n	8002aca <UART_SetConfig+0x18a>
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	d814      	bhi.n	8002ae2 <UART_SetConfig+0x1a2>
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <UART_SetConfig+0x182>
 8002abc:	2b10      	cmp	r3, #16
 8002abe:	d008      	beq.n	8002ad2 <UART_SetConfig+0x192>
 8002ac0:	e00f      	b.n	8002ae2 <UART_SetConfig+0x1a2>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ac8:	e0ad      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002aca:	2302      	movs	r3, #2
 8002acc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ad0:	e0a9      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002ad2:	2304      	movs	r3, #4
 8002ad4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ad8:	e0a5      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002ada:	2308      	movs	r3, #8
 8002adc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ae0:	e0a1      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002ae2:	2310      	movs	r3, #16
 8002ae4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ae8:	e09d      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a4a      	ldr	r2, [pc, #296]	; (8002c18 <UART_SetConfig+0x2d8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d125      	bne.n	8002b40 <UART_SetConfig+0x200>
 8002af4:	4b45      	ldr	r3, [pc, #276]	; (8002c0c <UART_SetConfig+0x2cc>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002afe:	2bc0      	cmp	r3, #192	; 0xc0
 8002b00:	d016      	beq.n	8002b30 <UART_SetConfig+0x1f0>
 8002b02:	2bc0      	cmp	r3, #192	; 0xc0
 8002b04:	d818      	bhi.n	8002b38 <UART_SetConfig+0x1f8>
 8002b06:	2b80      	cmp	r3, #128	; 0x80
 8002b08:	d00a      	beq.n	8002b20 <UART_SetConfig+0x1e0>
 8002b0a:	2b80      	cmp	r3, #128	; 0x80
 8002b0c:	d814      	bhi.n	8002b38 <UART_SetConfig+0x1f8>
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <UART_SetConfig+0x1d8>
 8002b12:	2b40      	cmp	r3, #64	; 0x40
 8002b14:	d008      	beq.n	8002b28 <UART_SetConfig+0x1e8>
 8002b16:	e00f      	b.n	8002b38 <UART_SetConfig+0x1f8>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b1e:	e082      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002b20:	2302      	movs	r3, #2
 8002b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b26:	e07e      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002b28:	2304      	movs	r3, #4
 8002b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b2e:	e07a      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002b30:	2308      	movs	r3, #8
 8002b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b36:	e076      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002b38:	2310      	movs	r3, #16
 8002b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b3e:	e072      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a35      	ldr	r2, [pc, #212]	; (8002c1c <UART_SetConfig+0x2dc>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d12a      	bne.n	8002ba0 <UART_SetConfig+0x260>
 8002b4a:	4b30      	ldr	r3, [pc, #192]	; (8002c0c <UART_SetConfig+0x2cc>)
 8002b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b58:	d01a      	beq.n	8002b90 <UART_SetConfig+0x250>
 8002b5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b5e:	d81b      	bhi.n	8002b98 <UART_SetConfig+0x258>
 8002b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b64:	d00c      	beq.n	8002b80 <UART_SetConfig+0x240>
 8002b66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b6a:	d815      	bhi.n	8002b98 <UART_SetConfig+0x258>
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <UART_SetConfig+0x238>
 8002b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b74:	d008      	beq.n	8002b88 <UART_SetConfig+0x248>
 8002b76:	e00f      	b.n	8002b98 <UART_SetConfig+0x258>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b7e:	e052      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002b80:	2302      	movs	r3, #2
 8002b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b86:	e04e      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002b88:	2304      	movs	r3, #4
 8002b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b8e:	e04a      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002b90:	2308      	movs	r3, #8
 8002b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b96:	e046      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002b98:	2310      	movs	r3, #16
 8002b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b9e:	e042      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a17      	ldr	r2, [pc, #92]	; (8002c04 <UART_SetConfig+0x2c4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d13a      	bne.n	8002c20 <UART_SetConfig+0x2e0>
 8002baa:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <UART_SetConfig+0x2cc>)
 8002bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bb4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002bb8:	d01a      	beq.n	8002bf0 <UART_SetConfig+0x2b0>
 8002bba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002bbe:	d81b      	bhi.n	8002bf8 <UART_SetConfig+0x2b8>
 8002bc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bc4:	d00c      	beq.n	8002be0 <UART_SetConfig+0x2a0>
 8002bc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bca:	d815      	bhi.n	8002bf8 <UART_SetConfig+0x2b8>
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <UART_SetConfig+0x298>
 8002bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd4:	d008      	beq.n	8002be8 <UART_SetConfig+0x2a8>
 8002bd6:	e00f      	b.n	8002bf8 <UART_SetConfig+0x2b8>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bde:	e022      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002be0:	2302      	movs	r3, #2
 8002be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002be6:	e01e      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002be8:	2304      	movs	r3, #4
 8002bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bee:	e01a      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002bf0:	2308      	movs	r3, #8
 8002bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bf6:	e016      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002bf8:	2310      	movs	r3, #16
 8002bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bfe:	e012      	b.n	8002c26 <UART_SetConfig+0x2e6>
 8002c00:	efff69f3 	.word	0xefff69f3
 8002c04:	40008000 	.word	0x40008000
 8002c08:	40013800 	.word	0x40013800
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40004400 	.word	0x40004400
 8002c14:	40004800 	.word	0x40004800
 8002c18:	40004c00 	.word	0x40004c00
 8002c1c:	40005000 	.word	0x40005000
 8002c20:	2310      	movs	r3, #16
 8002c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a9f      	ldr	r2, [pc, #636]	; (8002ea8 <UART_SetConfig+0x568>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d17a      	bne.n	8002d26 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d824      	bhi.n	8002c82 <UART_SetConfig+0x342>
 8002c38:	a201      	add	r2, pc, #4	; (adr r2, 8002c40 <UART_SetConfig+0x300>)
 8002c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3e:	bf00      	nop
 8002c40:	08002c65 	.word	0x08002c65
 8002c44:	08002c83 	.word	0x08002c83
 8002c48:	08002c6d 	.word	0x08002c6d
 8002c4c:	08002c83 	.word	0x08002c83
 8002c50:	08002c73 	.word	0x08002c73
 8002c54:	08002c83 	.word	0x08002c83
 8002c58:	08002c83 	.word	0x08002c83
 8002c5c:	08002c83 	.word	0x08002c83
 8002c60:	08002c7b 	.word	0x08002c7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c64:	f7ff f84c 	bl	8001d00 <HAL_RCC_GetPCLK1Freq>
 8002c68:	61f8      	str	r0, [r7, #28]
        break;
 8002c6a:	e010      	b.n	8002c8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c6c:	4b8f      	ldr	r3, [pc, #572]	; (8002eac <UART_SetConfig+0x56c>)
 8002c6e:	61fb      	str	r3, [r7, #28]
        break;
 8002c70:	e00d      	b.n	8002c8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c72:	f7fe ffad 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8002c76:	61f8      	str	r0, [r7, #28]
        break;
 8002c78:	e009      	b.n	8002c8e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c7e:	61fb      	str	r3, [r7, #28]
        break;
 8002c80:	e005      	b.n	8002c8e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002c8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 80fb 	beq.w	8002e8c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	4413      	add	r3, r2
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d305      	bcc.n	8002cb2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002cac:	69fa      	ldr	r2, [r7, #28]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d903      	bls.n	8002cba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002cb8:	e0e8      	b.n	8002e8c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	461c      	mov	r4, r3
 8002cc0:	4615      	mov	r5, r2
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	022b      	lsls	r3, r5, #8
 8002ccc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002cd0:	0222      	lsls	r2, r4, #8
 8002cd2:	68f9      	ldr	r1, [r7, #12]
 8002cd4:	6849      	ldr	r1, [r1, #4]
 8002cd6:	0849      	lsrs	r1, r1, #1
 8002cd8:	2000      	movs	r0, #0
 8002cda:	4688      	mov	r8, r1
 8002cdc:	4681      	mov	r9, r0
 8002cde:	eb12 0a08 	adds.w	sl, r2, r8
 8002ce2:	eb43 0b09 	adc.w	fp, r3, r9
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	603b      	str	r3, [r7, #0]
 8002cee:	607a      	str	r2, [r7, #4]
 8002cf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cf4:	4650      	mov	r0, sl
 8002cf6:	4659      	mov	r1, fp
 8002cf8:	f7fd fa66 	bl	80001c8 <__aeabi_uldivmod>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4613      	mov	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d0a:	d308      	bcc.n	8002d1e <UART_SetConfig+0x3de>
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d12:	d204      	bcs.n	8002d1e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	60da      	str	r2, [r3, #12]
 8002d1c:	e0b6      	b.n	8002e8c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002d24:	e0b2      	b.n	8002e8c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d2e:	d15e      	bne.n	8002dee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002d30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d828      	bhi.n	8002d8a <UART_SetConfig+0x44a>
 8002d38:	a201      	add	r2, pc, #4	; (adr r2, 8002d40 <UART_SetConfig+0x400>)
 8002d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3e:	bf00      	nop
 8002d40:	08002d65 	.word	0x08002d65
 8002d44:	08002d6d 	.word	0x08002d6d
 8002d48:	08002d75 	.word	0x08002d75
 8002d4c:	08002d8b 	.word	0x08002d8b
 8002d50:	08002d7b 	.word	0x08002d7b
 8002d54:	08002d8b 	.word	0x08002d8b
 8002d58:	08002d8b 	.word	0x08002d8b
 8002d5c:	08002d8b 	.word	0x08002d8b
 8002d60:	08002d83 	.word	0x08002d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d64:	f7fe ffcc 	bl	8001d00 <HAL_RCC_GetPCLK1Freq>
 8002d68:	61f8      	str	r0, [r7, #28]
        break;
 8002d6a:	e014      	b.n	8002d96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d6c:	f7fe ffde 	bl	8001d2c <HAL_RCC_GetPCLK2Freq>
 8002d70:	61f8      	str	r0, [r7, #28]
        break;
 8002d72:	e010      	b.n	8002d96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d74:	4b4d      	ldr	r3, [pc, #308]	; (8002eac <UART_SetConfig+0x56c>)
 8002d76:	61fb      	str	r3, [r7, #28]
        break;
 8002d78:	e00d      	b.n	8002d96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d7a:	f7fe ff29 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8002d7e:	61f8      	str	r0, [r7, #28]
        break;
 8002d80:	e009      	b.n	8002d96 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d86:	61fb      	str	r3, [r7, #28]
        break;
 8002d88:	e005      	b.n	8002d96 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002d94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d077      	beq.n	8002e8c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	005a      	lsls	r2, r3, #1
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	085b      	lsrs	r3, r3, #1
 8002da6:	441a      	add	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	2b0f      	cmp	r3, #15
 8002db6:	d916      	bls.n	8002de6 <UART_SetConfig+0x4a6>
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dbe:	d212      	bcs.n	8002de6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	f023 030f 	bic.w	r3, r3, #15
 8002dc8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	085b      	lsrs	r3, r3, #1
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	8afb      	ldrh	r3, [r7, #22]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	8afa      	ldrh	r2, [r7, #22]
 8002de2:	60da      	str	r2, [r3, #12]
 8002de4:	e052      	b.n	8002e8c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002dec:	e04e      	b.n	8002e8c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	d827      	bhi.n	8002e46 <UART_SetConfig+0x506>
 8002df6:	a201      	add	r2, pc, #4	; (adr r2, 8002dfc <UART_SetConfig+0x4bc>)
 8002df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfc:	08002e21 	.word	0x08002e21
 8002e00:	08002e29 	.word	0x08002e29
 8002e04:	08002e31 	.word	0x08002e31
 8002e08:	08002e47 	.word	0x08002e47
 8002e0c:	08002e37 	.word	0x08002e37
 8002e10:	08002e47 	.word	0x08002e47
 8002e14:	08002e47 	.word	0x08002e47
 8002e18:	08002e47 	.word	0x08002e47
 8002e1c:	08002e3f 	.word	0x08002e3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e20:	f7fe ff6e 	bl	8001d00 <HAL_RCC_GetPCLK1Freq>
 8002e24:	61f8      	str	r0, [r7, #28]
        break;
 8002e26:	e014      	b.n	8002e52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e28:	f7fe ff80 	bl	8001d2c <HAL_RCC_GetPCLK2Freq>
 8002e2c:	61f8      	str	r0, [r7, #28]
        break;
 8002e2e:	e010      	b.n	8002e52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e30:	4b1e      	ldr	r3, [pc, #120]	; (8002eac <UART_SetConfig+0x56c>)
 8002e32:	61fb      	str	r3, [r7, #28]
        break;
 8002e34:	e00d      	b.n	8002e52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e36:	f7fe fecb 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8002e3a:	61f8      	str	r0, [r7, #28]
        break;
 8002e3c:	e009      	b.n	8002e52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e42:	61fb      	str	r3, [r7, #28]
        break;
 8002e44:	e005      	b.n	8002e52 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002e50:	bf00      	nop
    }

    if (pclk != 0U)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d019      	beq.n	8002e8c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	085a      	lsrs	r2, r3, #1
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	441a      	add	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	2b0f      	cmp	r3, #15
 8002e70:	d909      	bls.n	8002e86 <UART_SetConfig+0x546>
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e78:	d205      	bcs.n	8002e86 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	60da      	str	r2, [r3, #12]
 8002e84:	e002      	b.n	8002e8c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002e98:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3728      	adds	r7, #40	; 0x28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40008000 	.word	0x40008000
 8002eac:	00f42400 	.word	0x00f42400

08002eb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00a      	beq.n	8002eda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00a      	beq.n	8002f1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	f003 0320 	and.w	r3, r3, #32
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d01a      	beq.n	8002fc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fae:	d10a      	bne.n	8002fc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00a      	beq.n	8002fe8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	605a      	str	r2, [r3, #4]
  }
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b098      	sub	sp, #96	; 0x60
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003004:	f7fd fdac 	bl	8000b60 <HAL_GetTick>
 8003008:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b08      	cmp	r3, #8
 8003016:	d12e      	bne.n	8003076 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003018:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003020:	2200      	movs	r2, #0
 8003022:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f88c 	bl	8003144 <UART_WaitOnFlagUntilTimeout>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d021      	beq.n	8003076 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303a:	e853 3f00 	ldrex	r3, [r3]
 800303e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003046:	653b      	str	r3, [r7, #80]	; 0x50
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	461a      	mov	r2, r3
 800304e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003050:	647b      	str	r3, [r7, #68]	; 0x44
 8003052:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003054:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003056:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003058:	e841 2300 	strex	r3, r2, [r1]
 800305c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800305e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1e6      	bne.n	8003032 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e062      	b.n	800313c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b04      	cmp	r3, #4
 8003082:	d149      	bne.n	8003118 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003084:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800308c:	2200      	movs	r2, #0
 800308e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f856 	bl	8003144 <UART_WaitOnFlagUntilTimeout>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d03c      	beq.n	8003118 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	e853 3f00 	ldrex	r3, [r3]
 80030aa:	623b      	str	r3, [r7, #32]
   return(result);
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	461a      	mov	r2, r3
 80030ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030bc:	633b      	str	r3, [r7, #48]	; 0x30
 80030be:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030c4:	e841 2300 	strex	r3, r2, [r1]
 80030c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e6      	bne.n	800309e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3308      	adds	r3, #8
 80030d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	e853 3f00 	ldrex	r3, [r3]
 80030de:	60fb      	str	r3, [r7, #12]
   return(result);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3308      	adds	r3, #8
 80030ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030f0:	61fa      	str	r2, [r7, #28]
 80030f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f4:	69b9      	ldr	r1, [r7, #24]
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	e841 2300 	strex	r3, r2, [r1]
 80030fc:	617b      	str	r3, [r7, #20]
   return(result);
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1e5      	bne.n	80030d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e011      	b.n	800313c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2220      	movs	r2, #32
 8003122:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3758      	adds	r7, #88	; 0x58
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	4613      	mov	r3, r2
 8003152:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003154:	e049      	b.n	80031ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315c:	d045      	beq.n	80031ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315e:	f7fd fcff 	bl	8000b60 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	429a      	cmp	r2, r3
 800316c:	d302      	bcc.n	8003174 <UART_WaitOnFlagUntilTimeout+0x30>
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e048      	b.n	800320a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b00      	cmp	r3, #0
 8003184:	d031      	beq.n	80031ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	f003 0308 	and.w	r3, r3, #8
 8003190:	2b08      	cmp	r3, #8
 8003192:	d110      	bne.n	80031b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2208      	movs	r2, #8
 800319a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f838 	bl	8003212 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2208      	movs	r2, #8
 80031a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e029      	b.n	800320a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031c4:	d111      	bne.n	80031ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f81e 	bl	8003212 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2220      	movs	r2, #32
 80031da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e00f      	b.n	800320a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69da      	ldr	r2, [r3, #28]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	4013      	ands	r3, r2
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	bf0c      	ite	eq
 80031fa:	2301      	moveq	r3, #1
 80031fc:	2300      	movne	r3, #0
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	461a      	mov	r2, r3
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	429a      	cmp	r2, r3
 8003206:	d0a6      	beq.n	8003156 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003212:	b480      	push	{r7}
 8003214:	b095      	sub	sp, #84	; 0x54
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003222:	e853 3f00 	ldrex	r3, [r3]
 8003226:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800322e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	461a      	mov	r2, r3
 8003236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003238:	643b      	str	r3, [r7, #64]	; 0x40
 800323a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800323e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003240:	e841 2300 	strex	r3, r2, [r1]
 8003244:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1e6      	bne.n	800321a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3308      	adds	r3, #8
 8003252:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	e853 3f00 	ldrex	r3, [r3]
 800325a:	61fb      	str	r3, [r7, #28]
   return(result);
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f023 0301 	bic.w	r3, r3, #1
 8003262:	64bb      	str	r3, [r7, #72]	; 0x48
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	3308      	adds	r3, #8
 800326a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800326c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800326e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003270:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003274:	e841 2300 	strex	r3, r2, [r1]
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1e5      	bne.n	800324c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003284:	2b01      	cmp	r3, #1
 8003286:	d118      	bne.n	80032ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	e853 3f00 	ldrex	r3, [r3]
 8003294:	60bb      	str	r3, [r7, #8]
   return(result);
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f023 0310 	bic.w	r3, r3, #16
 800329c:	647b      	str	r3, [r7, #68]	; 0x44
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a6:	61bb      	str	r3, [r7, #24]
 80032a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032aa:	6979      	ldr	r1, [r7, #20]
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	e841 2300 	strex	r3, r2, [r1]
 80032b2:	613b      	str	r3, [r7, #16]
   return(result);
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1e6      	bne.n	8003288 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2220      	movs	r2, #32
 80032be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80032ce:	bf00      	nop
 80032d0:	3754      	adds	r7, #84	; 0x54
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
	...

080032dc <std>:
 80032dc:	2300      	movs	r3, #0
 80032de:	b510      	push	{r4, lr}
 80032e0:	4604      	mov	r4, r0
 80032e2:	e9c0 3300 	strd	r3, r3, [r0]
 80032e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032ea:	6083      	str	r3, [r0, #8]
 80032ec:	8181      	strh	r1, [r0, #12]
 80032ee:	6643      	str	r3, [r0, #100]	; 0x64
 80032f0:	81c2      	strh	r2, [r0, #14]
 80032f2:	6183      	str	r3, [r0, #24]
 80032f4:	4619      	mov	r1, r3
 80032f6:	2208      	movs	r2, #8
 80032f8:	305c      	adds	r0, #92	; 0x5c
 80032fa:	f000 f9e5 	bl	80036c8 <memset>
 80032fe:	4b0d      	ldr	r3, [pc, #52]	; (8003334 <std+0x58>)
 8003300:	6263      	str	r3, [r4, #36]	; 0x24
 8003302:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <std+0x5c>)
 8003304:	62a3      	str	r3, [r4, #40]	; 0x28
 8003306:	4b0d      	ldr	r3, [pc, #52]	; (800333c <std+0x60>)
 8003308:	62e3      	str	r3, [r4, #44]	; 0x2c
 800330a:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <std+0x64>)
 800330c:	6323      	str	r3, [r4, #48]	; 0x30
 800330e:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <std+0x68>)
 8003310:	6224      	str	r4, [r4, #32]
 8003312:	429c      	cmp	r4, r3
 8003314:	d006      	beq.n	8003324 <std+0x48>
 8003316:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800331a:	4294      	cmp	r4, r2
 800331c:	d002      	beq.n	8003324 <std+0x48>
 800331e:	33d0      	adds	r3, #208	; 0xd0
 8003320:	429c      	cmp	r4, r3
 8003322:	d105      	bne.n	8003330 <std+0x54>
 8003324:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800332c:	f000 ba44 	b.w	80037b8 <__retarget_lock_init_recursive>
 8003330:	bd10      	pop	{r4, pc}
 8003332:	bf00      	nop
 8003334:	08003519 	.word	0x08003519
 8003338:	0800353b 	.word	0x0800353b
 800333c:	08003573 	.word	0x08003573
 8003340:	08003597 	.word	0x08003597
 8003344:	2000011c 	.word	0x2000011c

08003348 <stdio_exit_handler>:
 8003348:	4a02      	ldr	r2, [pc, #8]	; (8003354 <stdio_exit_handler+0xc>)
 800334a:	4903      	ldr	r1, [pc, #12]	; (8003358 <stdio_exit_handler+0x10>)
 800334c:	4803      	ldr	r0, [pc, #12]	; (800335c <stdio_exit_handler+0x14>)
 800334e:	f000 b869 	b.w	8003424 <_fwalk_sglue>
 8003352:	bf00      	nop
 8003354:	2000000c 	.word	0x2000000c
 8003358:	08003abd 	.word	0x08003abd
 800335c:	20000018 	.word	0x20000018

08003360 <cleanup_stdio>:
 8003360:	6841      	ldr	r1, [r0, #4]
 8003362:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <cleanup_stdio+0x34>)
 8003364:	4299      	cmp	r1, r3
 8003366:	b510      	push	{r4, lr}
 8003368:	4604      	mov	r4, r0
 800336a:	d001      	beq.n	8003370 <cleanup_stdio+0x10>
 800336c:	f000 fba6 	bl	8003abc <_fflush_r>
 8003370:	68a1      	ldr	r1, [r4, #8]
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <cleanup_stdio+0x38>)
 8003374:	4299      	cmp	r1, r3
 8003376:	d002      	beq.n	800337e <cleanup_stdio+0x1e>
 8003378:	4620      	mov	r0, r4
 800337a:	f000 fb9f 	bl	8003abc <_fflush_r>
 800337e:	68e1      	ldr	r1, [r4, #12]
 8003380:	4b06      	ldr	r3, [pc, #24]	; (800339c <cleanup_stdio+0x3c>)
 8003382:	4299      	cmp	r1, r3
 8003384:	d004      	beq.n	8003390 <cleanup_stdio+0x30>
 8003386:	4620      	mov	r0, r4
 8003388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800338c:	f000 bb96 	b.w	8003abc <_fflush_r>
 8003390:	bd10      	pop	{r4, pc}
 8003392:	bf00      	nop
 8003394:	2000011c 	.word	0x2000011c
 8003398:	20000184 	.word	0x20000184
 800339c:	200001ec 	.word	0x200001ec

080033a0 <global_stdio_init.part.0>:
 80033a0:	b510      	push	{r4, lr}
 80033a2:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <global_stdio_init.part.0+0x30>)
 80033a4:	4c0b      	ldr	r4, [pc, #44]	; (80033d4 <global_stdio_init.part.0+0x34>)
 80033a6:	4a0c      	ldr	r2, [pc, #48]	; (80033d8 <global_stdio_init.part.0+0x38>)
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	4620      	mov	r0, r4
 80033ac:	2200      	movs	r2, #0
 80033ae:	2104      	movs	r1, #4
 80033b0:	f7ff ff94 	bl	80032dc <std>
 80033b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80033b8:	2201      	movs	r2, #1
 80033ba:	2109      	movs	r1, #9
 80033bc:	f7ff ff8e 	bl	80032dc <std>
 80033c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80033c4:	2202      	movs	r2, #2
 80033c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033ca:	2112      	movs	r1, #18
 80033cc:	f7ff bf86 	b.w	80032dc <std>
 80033d0:	20000254 	.word	0x20000254
 80033d4:	2000011c 	.word	0x2000011c
 80033d8:	08003349 	.word	0x08003349

080033dc <__sfp_lock_acquire>:
 80033dc:	4801      	ldr	r0, [pc, #4]	; (80033e4 <__sfp_lock_acquire+0x8>)
 80033de:	f000 b9ec 	b.w	80037ba <__retarget_lock_acquire_recursive>
 80033e2:	bf00      	nop
 80033e4:	2000025d 	.word	0x2000025d

080033e8 <__sfp_lock_release>:
 80033e8:	4801      	ldr	r0, [pc, #4]	; (80033f0 <__sfp_lock_release+0x8>)
 80033ea:	f000 b9e7 	b.w	80037bc <__retarget_lock_release_recursive>
 80033ee:	bf00      	nop
 80033f0:	2000025d 	.word	0x2000025d

080033f4 <__sinit>:
 80033f4:	b510      	push	{r4, lr}
 80033f6:	4604      	mov	r4, r0
 80033f8:	f7ff fff0 	bl	80033dc <__sfp_lock_acquire>
 80033fc:	6a23      	ldr	r3, [r4, #32]
 80033fe:	b11b      	cbz	r3, 8003408 <__sinit+0x14>
 8003400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003404:	f7ff bff0 	b.w	80033e8 <__sfp_lock_release>
 8003408:	4b04      	ldr	r3, [pc, #16]	; (800341c <__sinit+0x28>)
 800340a:	6223      	str	r3, [r4, #32]
 800340c:	4b04      	ldr	r3, [pc, #16]	; (8003420 <__sinit+0x2c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1f5      	bne.n	8003400 <__sinit+0xc>
 8003414:	f7ff ffc4 	bl	80033a0 <global_stdio_init.part.0>
 8003418:	e7f2      	b.n	8003400 <__sinit+0xc>
 800341a:	bf00      	nop
 800341c:	08003361 	.word	0x08003361
 8003420:	20000254 	.word	0x20000254

08003424 <_fwalk_sglue>:
 8003424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003428:	4607      	mov	r7, r0
 800342a:	4688      	mov	r8, r1
 800342c:	4614      	mov	r4, r2
 800342e:	2600      	movs	r6, #0
 8003430:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003434:	f1b9 0901 	subs.w	r9, r9, #1
 8003438:	d505      	bpl.n	8003446 <_fwalk_sglue+0x22>
 800343a:	6824      	ldr	r4, [r4, #0]
 800343c:	2c00      	cmp	r4, #0
 800343e:	d1f7      	bne.n	8003430 <_fwalk_sglue+0xc>
 8003440:	4630      	mov	r0, r6
 8003442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003446:	89ab      	ldrh	r3, [r5, #12]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d907      	bls.n	800345c <_fwalk_sglue+0x38>
 800344c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003450:	3301      	adds	r3, #1
 8003452:	d003      	beq.n	800345c <_fwalk_sglue+0x38>
 8003454:	4629      	mov	r1, r5
 8003456:	4638      	mov	r0, r7
 8003458:	47c0      	blx	r8
 800345a:	4306      	orrs	r6, r0
 800345c:	3568      	adds	r5, #104	; 0x68
 800345e:	e7e9      	b.n	8003434 <_fwalk_sglue+0x10>

08003460 <_puts_r>:
 8003460:	6a03      	ldr	r3, [r0, #32]
 8003462:	b570      	push	{r4, r5, r6, lr}
 8003464:	6884      	ldr	r4, [r0, #8]
 8003466:	4605      	mov	r5, r0
 8003468:	460e      	mov	r6, r1
 800346a:	b90b      	cbnz	r3, 8003470 <_puts_r+0x10>
 800346c:	f7ff ffc2 	bl	80033f4 <__sinit>
 8003470:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003472:	07db      	lsls	r3, r3, #31
 8003474:	d405      	bmi.n	8003482 <_puts_r+0x22>
 8003476:	89a3      	ldrh	r3, [r4, #12]
 8003478:	0598      	lsls	r0, r3, #22
 800347a:	d402      	bmi.n	8003482 <_puts_r+0x22>
 800347c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800347e:	f000 f99c 	bl	80037ba <__retarget_lock_acquire_recursive>
 8003482:	89a3      	ldrh	r3, [r4, #12]
 8003484:	0719      	lsls	r1, r3, #28
 8003486:	d513      	bpl.n	80034b0 <_puts_r+0x50>
 8003488:	6923      	ldr	r3, [r4, #16]
 800348a:	b18b      	cbz	r3, 80034b0 <_puts_r+0x50>
 800348c:	3e01      	subs	r6, #1
 800348e:	68a3      	ldr	r3, [r4, #8]
 8003490:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003494:	3b01      	subs	r3, #1
 8003496:	60a3      	str	r3, [r4, #8]
 8003498:	b9e9      	cbnz	r1, 80034d6 <_puts_r+0x76>
 800349a:	2b00      	cmp	r3, #0
 800349c:	da2e      	bge.n	80034fc <_puts_r+0x9c>
 800349e:	4622      	mov	r2, r4
 80034a0:	210a      	movs	r1, #10
 80034a2:	4628      	mov	r0, r5
 80034a4:	f000 f87b 	bl	800359e <__swbuf_r>
 80034a8:	3001      	adds	r0, #1
 80034aa:	d007      	beq.n	80034bc <_puts_r+0x5c>
 80034ac:	250a      	movs	r5, #10
 80034ae:	e007      	b.n	80034c0 <_puts_r+0x60>
 80034b0:	4621      	mov	r1, r4
 80034b2:	4628      	mov	r0, r5
 80034b4:	f000 f8b0 	bl	8003618 <__swsetup_r>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d0e7      	beq.n	800348c <_puts_r+0x2c>
 80034bc:	f04f 35ff 	mov.w	r5, #4294967295
 80034c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034c2:	07da      	lsls	r2, r3, #31
 80034c4:	d405      	bmi.n	80034d2 <_puts_r+0x72>
 80034c6:	89a3      	ldrh	r3, [r4, #12]
 80034c8:	059b      	lsls	r3, r3, #22
 80034ca:	d402      	bmi.n	80034d2 <_puts_r+0x72>
 80034cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034ce:	f000 f975 	bl	80037bc <__retarget_lock_release_recursive>
 80034d2:	4628      	mov	r0, r5
 80034d4:	bd70      	pop	{r4, r5, r6, pc}
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	da04      	bge.n	80034e4 <_puts_r+0x84>
 80034da:	69a2      	ldr	r2, [r4, #24]
 80034dc:	429a      	cmp	r2, r3
 80034de:	dc06      	bgt.n	80034ee <_puts_r+0x8e>
 80034e0:	290a      	cmp	r1, #10
 80034e2:	d004      	beq.n	80034ee <_puts_r+0x8e>
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	6022      	str	r2, [r4, #0]
 80034ea:	7019      	strb	r1, [r3, #0]
 80034ec:	e7cf      	b.n	800348e <_puts_r+0x2e>
 80034ee:	4622      	mov	r2, r4
 80034f0:	4628      	mov	r0, r5
 80034f2:	f000 f854 	bl	800359e <__swbuf_r>
 80034f6:	3001      	adds	r0, #1
 80034f8:	d1c9      	bne.n	800348e <_puts_r+0x2e>
 80034fa:	e7df      	b.n	80034bc <_puts_r+0x5c>
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	250a      	movs	r5, #10
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	6022      	str	r2, [r4, #0]
 8003504:	701d      	strb	r5, [r3, #0]
 8003506:	e7db      	b.n	80034c0 <_puts_r+0x60>

08003508 <puts>:
 8003508:	4b02      	ldr	r3, [pc, #8]	; (8003514 <puts+0xc>)
 800350a:	4601      	mov	r1, r0
 800350c:	6818      	ldr	r0, [r3, #0]
 800350e:	f7ff bfa7 	b.w	8003460 <_puts_r>
 8003512:	bf00      	nop
 8003514:	20000064 	.word	0x20000064

08003518 <__sread>:
 8003518:	b510      	push	{r4, lr}
 800351a:	460c      	mov	r4, r1
 800351c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003520:	f000 f8fc 	bl	800371c <_read_r>
 8003524:	2800      	cmp	r0, #0
 8003526:	bfab      	itete	ge
 8003528:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800352a:	89a3      	ldrhlt	r3, [r4, #12]
 800352c:	181b      	addge	r3, r3, r0
 800352e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003532:	bfac      	ite	ge
 8003534:	6563      	strge	r3, [r4, #84]	; 0x54
 8003536:	81a3      	strhlt	r3, [r4, #12]
 8003538:	bd10      	pop	{r4, pc}

0800353a <__swrite>:
 800353a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800353e:	461f      	mov	r7, r3
 8003540:	898b      	ldrh	r3, [r1, #12]
 8003542:	05db      	lsls	r3, r3, #23
 8003544:	4605      	mov	r5, r0
 8003546:	460c      	mov	r4, r1
 8003548:	4616      	mov	r6, r2
 800354a:	d505      	bpl.n	8003558 <__swrite+0x1e>
 800354c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003550:	2302      	movs	r3, #2
 8003552:	2200      	movs	r2, #0
 8003554:	f000 f8d0 	bl	80036f8 <_lseek_r>
 8003558:	89a3      	ldrh	r3, [r4, #12]
 800355a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800355e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003562:	81a3      	strh	r3, [r4, #12]
 8003564:	4632      	mov	r2, r6
 8003566:	463b      	mov	r3, r7
 8003568:	4628      	mov	r0, r5
 800356a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800356e:	f000 b8e7 	b.w	8003740 <_write_r>

08003572 <__sseek>:
 8003572:	b510      	push	{r4, lr}
 8003574:	460c      	mov	r4, r1
 8003576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800357a:	f000 f8bd 	bl	80036f8 <_lseek_r>
 800357e:	1c43      	adds	r3, r0, #1
 8003580:	89a3      	ldrh	r3, [r4, #12]
 8003582:	bf15      	itete	ne
 8003584:	6560      	strne	r0, [r4, #84]	; 0x54
 8003586:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800358a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800358e:	81a3      	strheq	r3, [r4, #12]
 8003590:	bf18      	it	ne
 8003592:	81a3      	strhne	r3, [r4, #12]
 8003594:	bd10      	pop	{r4, pc}

08003596 <__sclose>:
 8003596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800359a:	f000 b89d 	b.w	80036d8 <_close_r>

0800359e <__swbuf_r>:
 800359e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a0:	460e      	mov	r6, r1
 80035a2:	4614      	mov	r4, r2
 80035a4:	4605      	mov	r5, r0
 80035a6:	b118      	cbz	r0, 80035b0 <__swbuf_r+0x12>
 80035a8:	6a03      	ldr	r3, [r0, #32]
 80035aa:	b90b      	cbnz	r3, 80035b0 <__swbuf_r+0x12>
 80035ac:	f7ff ff22 	bl	80033f4 <__sinit>
 80035b0:	69a3      	ldr	r3, [r4, #24]
 80035b2:	60a3      	str	r3, [r4, #8]
 80035b4:	89a3      	ldrh	r3, [r4, #12]
 80035b6:	071a      	lsls	r2, r3, #28
 80035b8:	d525      	bpl.n	8003606 <__swbuf_r+0x68>
 80035ba:	6923      	ldr	r3, [r4, #16]
 80035bc:	b31b      	cbz	r3, 8003606 <__swbuf_r+0x68>
 80035be:	6823      	ldr	r3, [r4, #0]
 80035c0:	6922      	ldr	r2, [r4, #16]
 80035c2:	1a98      	subs	r0, r3, r2
 80035c4:	6963      	ldr	r3, [r4, #20]
 80035c6:	b2f6      	uxtb	r6, r6
 80035c8:	4283      	cmp	r3, r0
 80035ca:	4637      	mov	r7, r6
 80035cc:	dc04      	bgt.n	80035d8 <__swbuf_r+0x3a>
 80035ce:	4621      	mov	r1, r4
 80035d0:	4628      	mov	r0, r5
 80035d2:	f000 fa73 	bl	8003abc <_fflush_r>
 80035d6:	b9e0      	cbnz	r0, 8003612 <__swbuf_r+0x74>
 80035d8:	68a3      	ldr	r3, [r4, #8]
 80035da:	3b01      	subs	r3, #1
 80035dc:	60a3      	str	r3, [r4, #8]
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	6022      	str	r2, [r4, #0]
 80035e4:	701e      	strb	r6, [r3, #0]
 80035e6:	6962      	ldr	r2, [r4, #20]
 80035e8:	1c43      	adds	r3, r0, #1
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d004      	beq.n	80035f8 <__swbuf_r+0x5a>
 80035ee:	89a3      	ldrh	r3, [r4, #12]
 80035f0:	07db      	lsls	r3, r3, #31
 80035f2:	d506      	bpl.n	8003602 <__swbuf_r+0x64>
 80035f4:	2e0a      	cmp	r6, #10
 80035f6:	d104      	bne.n	8003602 <__swbuf_r+0x64>
 80035f8:	4621      	mov	r1, r4
 80035fa:	4628      	mov	r0, r5
 80035fc:	f000 fa5e 	bl	8003abc <_fflush_r>
 8003600:	b938      	cbnz	r0, 8003612 <__swbuf_r+0x74>
 8003602:	4638      	mov	r0, r7
 8003604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003606:	4621      	mov	r1, r4
 8003608:	4628      	mov	r0, r5
 800360a:	f000 f805 	bl	8003618 <__swsetup_r>
 800360e:	2800      	cmp	r0, #0
 8003610:	d0d5      	beq.n	80035be <__swbuf_r+0x20>
 8003612:	f04f 37ff 	mov.w	r7, #4294967295
 8003616:	e7f4      	b.n	8003602 <__swbuf_r+0x64>

08003618 <__swsetup_r>:
 8003618:	b538      	push	{r3, r4, r5, lr}
 800361a:	4b2a      	ldr	r3, [pc, #168]	; (80036c4 <__swsetup_r+0xac>)
 800361c:	4605      	mov	r5, r0
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	460c      	mov	r4, r1
 8003622:	b118      	cbz	r0, 800362c <__swsetup_r+0x14>
 8003624:	6a03      	ldr	r3, [r0, #32]
 8003626:	b90b      	cbnz	r3, 800362c <__swsetup_r+0x14>
 8003628:	f7ff fee4 	bl	80033f4 <__sinit>
 800362c:	89a3      	ldrh	r3, [r4, #12]
 800362e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003632:	0718      	lsls	r0, r3, #28
 8003634:	d422      	bmi.n	800367c <__swsetup_r+0x64>
 8003636:	06d9      	lsls	r1, r3, #27
 8003638:	d407      	bmi.n	800364a <__swsetup_r+0x32>
 800363a:	2309      	movs	r3, #9
 800363c:	602b      	str	r3, [r5, #0]
 800363e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003642:	81a3      	strh	r3, [r4, #12]
 8003644:	f04f 30ff 	mov.w	r0, #4294967295
 8003648:	e034      	b.n	80036b4 <__swsetup_r+0x9c>
 800364a:	0758      	lsls	r0, r3, #29
 800364c:	d512      	bpl.n	8003674 <__swsetup_r+0x5c>
 800364e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003650:	b141      	cbz	r1, 8003664 <__swsetup_r+0x4c>
 8003652:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003656:	4299      	cmp	r1, r3
 8003658:	d002      	beq.n	8003660 <__swsetup_r+0x48>
 800365a:	4628      	mov	r0, r5
 800365c:	f000 f8b0 	bl	80037c0 <_free_r>
 8003660:	2300      	movs	r3, #0
 8003662:	6363      	str	r3, [r4, #52]	; 0x34
 8003664:	89a3      	ldrh	r3, [r4, #12]
 8003666:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800366a:	81a3      	strh	r3, [r4, #12]
 800366c:	2300      	movs	r3, #0
 800366e:	6063      	str	r3, [r4, #4]
 8003670:	6923      	ldr	r3, [r4, #16]
 8003672:	6023      	str	r3, [r4, #0]
 8003674:	89a3      	ldrh	r3, [r4, #12]
 8003676:	f043 0308 	orr.w	r3, r3, #8
 800367a:	81a3      	strh	r3, [r4, #12]
 800367c:	6923      	ldr	r3, [r4, #16]
 800367e:	b94b      	cbnz	r3, 8003694 <__swsetup_r+0x7c>
 8003680:	89a3      	ldrh	r3, [r4, #12]
 8003682:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800368a:	d003      	beq.n	8003694 <__swsetup_r+0x7c>
 800368c:	4621      	mov	r1, r4
 800368e:	4628      	mov	r0, r5
 8003690:	f000 fa62 	bl	8003b58 <__smakebuf_r>
 8003694:	89a0      	ldrh	r0, [r4, #12]
 8003696:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800369a:	f010 0301 	ands.w	r3, r0, #1
 800369e:	d00a      	beq.n	80036b6 <__swsetup_r+0x9e>
 80036a0:	2300      	movs	r3, #0
 80036a2:	60a3      	str	r3, [r4, #8]
 80036a4:	6963      	ldr	r3, [r4, #20]
 80036a6:	425b      	negs	r3, r3
 80036a8:	61a3      	str	r3, [r4, #24]
 80036aa:	6923      	ldr	r3, [r4, #16]
 80036ac:	b943      	cbnz	r3, 80036c0 <__swsetup_r+0xa8>
 80036ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80036b2:	d1c4      	bne.n	800363e <__swsetup_r+0x26>
 80036b4:	bd38      	pop	{r3, r4, r5, pc}
 80036b6:	0781      	lsls	r1, r0, #30
 80036b8:	bf58      	it	pl
 80036ba:	6963      	ldrpl	r3, [r4, #20]
 80036bc:	60a3      	str	r3, [r4, #8]
 80036be:	e7f4      	b.n	80036aa <__swsetup_r+0x92>
 80036c0:	2000      	movs	r0, #0
 80036c2:	e7f7      	b.n	80036b4 <__swsetup_r+0x9c>
 80036c4:	20000064 	.word	0x20000064

080036c8 <memset>:
 80036c8:	4402      	add	r2, r0
 80036ca:	4603      	mov	r3, r0
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d100      	bne.n	80036d2 <memset+0xa>
 80036d0:	4770      	bx	lr
 80036d2:	f803 1b01 	strb.w	r1, [r3], #1
 80036d6:	e7f9      	b.n	80036cc <memset+0x4>

080036d8 <_close_r>:
 80036d8:	b538      	push	{r3, r4, r5, lr}
 80036da:	4d06      	ldr	r5, [pc, #24]	; (80036f4 <_close_r+0x1c>)
 80036dc:	2300      	movs	r3, #0
 80036de:	4604      	mov	r4, r0
 80036e0:	4608      	mov	r0, r1
 80036e2:	602b      	str	r3, [r5, #0]
 80036e4:	f7fd f899 	bl	800081a <_close>
 80036e8:	1c43      	adds	r3, r0, #1
 80036ea:	d102      	bne.n	80036f2 <_close_r+0x1a>
 80036ec:	682b      	ldr	r3, [r5, #0]
 80036ee:	b103      	cbz	r3, 80036f2 <_close_r+0x1a>
 80036f0:	6023      	str	r3, [r4, #0]
 80036f2:	bd38      	pop	{r3, r4, r5, pc}
 80036f4:	20000258 	.word	0x20000258

080036f8 <_lseek_r>:
 80036f8:	b538      	push	{r3, r4, r5, lr}
 80036fa:	4d07      	ldr	r5, [pc, #28]	; (8003718 <_lseek_r+0x20>)
 80036fc:	4604      	mov	r4, r0
 80036fe:	4608      	mov	r0, r1
 8003700:	4611      	mov	r1, r2
 8003702:	2200      	movs	r2, #0
 8003704:	602a      	str	r2, [r5, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	f7fd f8ae 	bl	8000868 <_lseek>
 800370c:	1c43      	adds	r3, r0, #1
 800370e:	d102      	bne.n	8003716 <_lseek_r+0x1e>
 8003710:	682b      	ldr	r3, [r5, #0]
 8003712:	b103      	cbz	r3, 8003716 <_lseek_r+0x1e>
 8003714:	6023      	str	r3, [r4, #0]
 8003716:	bd38      	pop	{r3, r4, r5, pc}
 8003718:	20000258 	.word	0x20000258

0800371c <_read_r>:
 800371c:	b538      	push	{r3, r4, r5, lr}
 800371e:	4d07      	ldr	r5, [pc, #28]	; (800373c <_read_r+0x20>)
 8003720:	4604      	mov	r4, r0
 8003722:	4608      	mov	r0, r1
 8003724:	4611      	mov	r1, r2
 8003726:	2200      	movs	r2, #0
 8003728:	602a      	str	r2, [r5, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	f7fd f83c 	bl	80007a8 <_read>
 8003730:	1c43      	adds	r3, r0, #1
 8003732:	d102      	bne.n	800373a <_read_r+0x1e>
 8003734:	682b      	ldr	r3, [r5, #0]
 8003736:	b103      	cbz	r3, 800373a <_read_r+0x1e>
 8003738:	6023      	str	r3, [r4, #0]
 800373a:	bd38      	pop	{r3, r4, r5, pc}
 800373c:	20000258 	.word	0x20000258

08003740 <_write_r>:
 8003740:	b538      	push	{r3, r4, r5, lr}
 8003742:	4d07      	ldr	r5, [pc, #28]	; (8003760 <_write_r+0x20>)
 8003744:	4604      	mov	r4, r0
 8003746:	4608      	mov	r0, r1
 8003748:	4611      	mov	r1, r2
 800374a:	2200      	movs	r2, #0
 800374c:	602a      	str	r2, [r5, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	f7fd f847 	bl	80007e2 <_write>
 8003754:	1c43      	adds	r3, r0, #1
 8003756:	d102      	bne.n	800375e <_write_r+0x1e>
 8003758:	682b      	ldr	r3, [r5, #0]
 800375a:	b103      	cbz	r3, 800375e <_write_r+0x1e>
 800375c:	6023      	str	r3, [r4, #0]
 800375e:	bd38      	pop	{r3, r4, r5, pc}
 8003760:	20000258 	.word	0x20000258

08003764 <__errno>:
 8003764:	4b01      	ldr	r3, [pc, #4]	; (800376c <__errno+0x8>)
 8003766:	6818      	ldr	r0, [r3, #0]
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	20000064 	.word	0x20000064

08003770 <__libc_init_array>:
 8003770:	b570      	push	{r4, r5, r6, lr}
 8003772:	4d0d      	ldr	r5, [pc, #52]	; (80037a8 <__libc_init_array+0x38>)
 8003774:	4c0d      	ldr	r4, [pc, #52]	; (80037ac <__libc_init_array+0x3c>)
 8003776:	1b64      	subs	r4, r4, r5
 8003778:	10a4      	asrs	r4, r4, #2
 800377a:	2600      	movs	r6, #0
 800377c:	42a6      	cmp	r6, r4
 800377e:	d109      	bne.n	8003794 <__libc_init_array+0x24>
 8003780:	4d0b      	ldr	r5, [pc, #44]	; (80037b0 <__libc_init_array+0x40>)
 8003782:	4c0c      	ldr	r4, [pc, #48]	; (80037b4 <__libc_init_array+0x44>)
 8003784:	f000 fa56 	bl	8003c34 <_init>
 8003788:	1b64      	subs	r4, r4, r5
 800378a:	10a4      	asrs	r4, r4, #2
 800378c:	2600      	movs	r6, #0
 800378e:	42a6      	cmp	r6, r4
 8003790:	d105      	bne.n	800379e <__libc_init_array+0x2e>
 8003792:	bd70      	pop	{r4, r5, r6, pc}
 8003794:	f855 3b04 	ldr.w	r3, [r5], #4
 8003798:	4798      	blx	r3
 800379a:	3601      	adds	r6, #1
 800379c:	e7ee      	b.n	800377c <__libc_init_array+0xc>
 800379e:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a2:	4798      	blx	r3
 80037a4:	3601      	adds	r6, #1
 80037a6:	e7f2      	b.n	800378e <__libc_init_array+0x1e>
 80037a8:	08003cc8 	.word	0x08003cc8
 80037ac:	08003cc8 	.word	0x08003cc8
 80037b0:	08003cc8 	.word	0x08003cc8
 80037b4:	08003ccc 	.word	0x08003ccc

080037b8 <__retarget_lock_init_recursive>:
 80037b8:	4770      	bx	lr

080037ba <__retarget_lock_acquire_recursive>:
 80037ba:	4770      	bx	lr

080037bc <__retarget_lock_release_recursive>:
 80037bc:	4770      	bx	lr
	...

080037c0 <_free_r>:
 80037c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037c2:	2900      	cmp	r1, #0
 80037c4:	d044      	beq.n	8003850 <_free_r+0x90>
 80037c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037ca:	9001      	str	r0, [sp, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f1a1 0404 	sub.w	r4, r1, #4
 80037d2:	bfb8      	it	lt
 80037d4:	18e4      	addlt	r4, r4, r3
 80037d6:	f000 f8df 	bl	8003998 <__malloc_lock>
 80037da:	4a1e      	ldr	r2, [pc, #120]	; (8003854 <_free_r+0x94>)
 80037dc:	9801      	ldr	r0, [sp, #4]
 80037de:	6813      	ldr	r3, [r2, #0]
 80037e0:	b933      	cbnz	r3, 80037f0 <_free_r+0x30>
 80037e2:	6063      	str	r3, [r4, #4]
 80037e4:	6014      	str	r4, [r2, #0]
 80037e6:	b003      	add	sp, #12
 80037e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037ec:	f000 b8da 	b.w	80039a4 <__malloc_unlock>
 80037f0:	42a3      	cmp	r3, r4
 80037f2:	d908      	bls.n	8003806 <_free_r+0x46>
 80037f4:	6825      	ldr	r5, [r4, #0]
 80037f6:	1961      	adds	r1, r4, r5
 80037f8:	428b      	cmp	r3, r1
 80037fa:	bf01      	itttt	eq
 80037fc:	6819      	ldreq	r1, [r3, #0]
 80037fe:	685b      	ldreq	r3, [r3, #4]
 8003800:	1949      	addeq	r1, r1, r5
 8003802:	6021      	streq	r1, [r4, #0]
 8003804:	e7ed      	b.n	80037e2 <_free_r+0x22>
 8003806:	461a      	mov	r2, r3
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	b10b      	cbz	r3, 8003810 <_free_r+0x50>
 800380c:	42a3      	cmp	r3, r4
 800380e:	d9fa      	bls.n	8003806 <_free_r+0x46>
 8003810:	6811      	ldr	r1, [r2, #0]
 8003812:	1855      	adds	r5, r2, r1
 8003814:	42a5      	cmp	r5, r4
 8003816:	d10b      	bne.n	8003830 <_free_r+0x70>
 8003818:	6824      	ldr	r4, [r4, #0]
 800381a:	4421      	add	r1, r4
 800381c:	1854      	adds	r4, r2, r1
 800381e:	42a3      	cmp	r3, r4
 8003820:	6011      	str	r1, [r2, #0]
 8003822:	d1e0      	bne.n	80037e6 <_free_r+0x26>
 8003824:	681c      	ldr	r4, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	6053      	str	r3, [r2, #4]
 800382a:	440c      	add	r4, r1
 800382c:	6014      	str	r4, [r2, #0]
 800382e:	e7da      	b.n	80037e6 <_free_r+0x26>
 8003830:	d902      	bls.n	8003838 <_free_r+0x78>
 8003832:	230c      	movs	r3, #12
 8003834:	6003      	str	r3, [r0, #0]
 8003836:	e7d6      	b.n	80037e6 <_free_r+0x26>
 8003838:	6825      	ldr	r5, [r4, #0]
 800383a:	1961      	adds	r1, r4, r5
 800383c:	428b      	cmp	r3, r1
 800383e:	bf04      	itt	eq
 8003840:	6819      	ldreq	r1, [r3, #0]
 8003842:	685b      	ldreq	r3, [r3, #4]
 8003844:	6063      	str	r3, [r4, #4]
 8003846:	bf04      	itt	eq
 8003848:	1949      	addeq	r1, r1, r5
 800384a:	6021      	streq	r1, [r4, #0]
 800384c:	6054      	str	r4, [r2, #4]
 800384e:	e7ca      	b.n	80037e6 <_free_r+0x26>
 8003850:	b003      	add	sp, #12
 8003852:	bd30      	pop	{r4, r5, pc}
 8003854:	20000260 	.word	0x20000260

08003858 <sbrk_aligned>:
 8003858:	b570      	push	{r4, r5, r6, lr}
 800385a:	4e0e      	ldr	r6, [pc, #56]	; (8003894 <sbrk_aligned+0x3c>)
 800385c:	460c      	mov	r4, r1
 800385e:	6831      	ldr	r1, [r6, #0]
 8003860:	4605      	mov	r5, r0
 8003862:	b911      	cbnz	r1, 800386a <sbrk_aligned+0x12>
 8003864:	f000 f9d6 	bl	8003c14 <_sbrk_r>
 8003868:	6030      	str	r0, [r6, #0]
 800386a:	4621      	mov	r1, r4
 800386c:	4628      	mov	r0, r5
 800386e:	f000 f9d1 	bl	8003c14 <_sbrk_r>
 8003872:	1c43      	adds	r3, r0, #1
 8003874:	d00a      	beq.n	800388c <sbrk_aligned+0x34>
 8003876:	1cc4      	adds	r4, r0, #3
 8003878:	f024 0403 	bic.w	r4, r4, #3
 800387c:	42a0      	cmp	r0, r4
 800387e:	d007      	beq.n	8003890 <sbrk_aligned+0x38>
 8003880:	1a21      	subs	r1, r4, r0
 8003882:	4628      	mov	r0, r5
 8003884:	f000 f9c6 	bl	8003c14 <_sbrk_r>
 8003888:	3001      	adds	r0, #1
 800388a:	d101      	bne.n	8003890 <sbrk_aligned+0x38>
 800388c:	f04f 34ff 	mov.w	r4, #4294967295
 8003890:	4620      	mov	r0, r4
 8003892:	bd70      	pop	{r4, r5, r6, pc}
 8003894:	20000264 	.word	0x20000264

08003898 <_malloc_r>:
 8003898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800389c:	1ccd      	adds	r5, r1, #3
 800389e:	f025 0503 	bic.w	r5, r5, #3
 80038a2:	3508      	adds	r5, #8
 80038a4:	2d0c      	cmp	r5, #12
 80038a6:	bf38      	it	cc
 80038a8:	250c      	movcc	r5, #12
 80038aa:	2d00      	cmp	r5, #0
 80038ac:	4607      	mov	r7, r0
 80038ae:	db01      	blt.n	80038b4 <_malloc_r+0x1c>
 80038b0:	42a9      	cmp	r1, r5
 80038b2:	d905      	bls.n	80038c0 <_malloc_r+0x28>
 80038b4:	230c      	movs	r3, #12
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	2600      	movs	r6, #0
 80038ba:	4630      	mov	r0, r6
 80038bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003994 <_malloc_r+0xfc>
 80038c4:	f000 f868 	bl	8003998 <__malloc_lock>
 80038c8:	f8d8 3000 	ldr.w	r3, [r8]
 80038cc:	461c      	mov	r4, r3
 80038ce:	bb5c      	cbnz	r4, 8003928 <_malloc_r+0x90>
 80038d0:	4629      	mov	r1, r5
 80038d2:	4638      	mov	r0, r7
 80038d4:	f7ff ffc0 	bl	8003858 <sbrk_aligned>
 80038d8:	1c43      	adds	r3, r0, #1
 80038da:	4604      	mov	r4, r0
 80038dc:	d155      	bne.n	800398a <_malloc_r+0xf2>
 80038de:	f8d8 4000 	ldr.w	r4, [r8]
 80038e2:	4626      	mov	r6, r4
 80038e4:	2e00      	cmp	r6, #0
 80038e6:	d145      	bne.n	8003974 <_malloc_r+0xdc>
 80038e8:	2c00      	cmp	r4, #0
 80038ea:	d048      	beq.n	800397e <_malloc_r+0xe6>
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	4631      	mov	r1, r6
 80038f0:	4638      	mov	r0, r7
 80038f2:	eb04 0903 	add.w	r9, r4, r3
 80038f6:	f000 f98d 	bl	8003c14 <_sbrk_r>
 80038fa:	4581      	cmp	r9, r0
 80038fc:	d13f      	bne.n	800397e <_malloc_r+0xe6>
 80038fe:	6821      	ldr	r1, [r4, #0]
 8003900:	1a6d      	subs	r5, r5, r1
 8003902:	4629      	mov	r1, r5
 8003904:	4638      	mov	r0, r7
 8003906:	f7ff ffa7 	bl	8003858 <sbrk_aligned>
 800390a:	3001      	adds	r0, #1
 800390c:	d037      	beq.n	800397e <_malloc_r+0xe6>
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	442b      	add	r3, r5
 8003912:	6023      	str	r3, [r4, #0]
 8003914:	f8d8 3000 	ldr.w	r3, [r8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d038      	beq.n	800398e <_malloc_r+0xf6>
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	42a2      	cmp	r2, r4
 8003920:	d12b      	bne.n	800397a <_malloc_r+0xe2>
 8003922:	2200      	movs	r2, #0
 8003924:	605a      	str	r2, [r3, #4]
 8003926:	e00f      	b.n	8003948 <_malloc_r+0xb0>
 8003928:	6822      	ldr	r2, [r4, #0]
 800392a:	1b52      	subs	r2, r2, r5
 800392c:	d41f      	bmi.n	800396e <_malloc_r+0xd6>
 800392e:	2a0b      	cmp	r2, #11
 8003930:	d917      	bls.n	8003962 <_malloc_r+0xca>
 8003932:	1961      	adds	r1, r4, r5
 8003934:	42a3      	cmp	r3, r4
 8003936:	6025      	str	r5, [r4, #0]
 8003938:	bf18      	it	ne
 800393a:	6059      	strne	r1, [r3, #4]
 800393c:	6863      	ldr	r3, [r4, #4]
 800393e:	bf08      	it	eq
 8003940:	f8c8 1000 	streq.w	r1, [r8]
 8003944:	5162      	str	r2, [r4, r5]
 8003946:	604b      	str	r3, [r1, #4]
 8003948:	4638      	mov	r0, r7
 800394a:	f104 060b 	add.w	r6, r4, #11
 800394e:	f000 f829 	bl	80039a4 <__malloc_unlock>
 8003952:	f026 0607 	bic.w	r6, r6, #7
 8003956:	1d23      	adds	r3, r4, #4
 8003958:	1af2      	subs	r2, r6, r3
 800395a:	d0ae      	beq.n	80038ba <_malloc_r+0x22>
 800395c:	1b9b      	subs	r3, r3, r6
 800395e:	50a3      	str	r3, [r4, r2]
 8003960:	e7ab      	b.n	80038ba <_malloc_r+0x22>
 8003962:	42a3      	cmp	r3, r4
 8003964:	6862      	ldr	r2, [r4, #4]
 8003966:	d1dd      	bne.n	8003924 <_malloc_r+0x8c>
 8003968:	f8c8 2000 	str.w	r2, [r8]
 800396c:	e7ec      	b.n	8003948 <_malloc_r+0xb0>
 800396e:	4623      	mov	r3, r4
 8003970:	6864      	ldr	r4, [r4, #4]
 8003972:	e7ac      	b.n	80038ce <_malloc_r+0x36>
 8003974:	4634      	mov	r4, r6
 8003976:	6876      	ldr	r6, [r6, #4]
 8003978:	e7b4      	b.n	80038e4 <_malloc_r+0x4c>
 800397a:	4613      	mov	r3, r2
 800397c:	e7cc      	b.n	8003918 <_malloc_r+0x80>
 800397e:	230c      	movs	r3, #12
 8003980:	603b      	str	r3, [r7, #0]
 8003982:	4638      	mov	r0, r7
 8003984:	f000 f80e 	bl	80039a4 <__malloc_unlock>
 8003988:	e797      	b.n	80038ba <_malloc_r+0x22>
 800398a:	6025      	str	r5, [r4, #0]
 800398c:	e7dc      	b.n	8003948 <_malloc_r+0xb0>
 800398e:	605b      	str	r3, [r3, #4]
 8003990:	deff      	udf	#255	; 0xff
 8003992:	bf00      	nop
 8003994:	20000260 	.word	0x20000260

08003998 <__malloc_lock>:
 8003998:	4801      	ldr	r0, [pc, #4]	; (80039a0 <__malloc_lock+0x8>)
 800399a:	f7ff bf0e 	b.w	80037ba <__retarget_lock_acquire_recursive>
 800399e:	bf00      	nop
 80039a0:	2000025c 	.word	0x2000025c

080039a4 <__malloc_unlock>:
 80039a4:	4801      	ldr	r0, [pc, #4]	; (80039ac <__malloc_unlock+0x8>)
 80039a6:	f7ff bf09 	b.w	80037bc <__retarget_lock_release_recursive>
 80039aa:	bf00      	nop
 80039ac:	2000025c 	.word	0x2000025c

080039b0 <__sflush_r>:
 80039b0:	898a      	ldrh	r2, [r1, #12]
 80039b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039b6:	4605      	mov	r5, r0
 80039b8:	0710      	lsls	r0, r2, #28
 80039ba:	460c      	mov	r4, r1
 80039bc:	d458      	bmi.n	8003a70 <__sflush_r+0xc0>
 80039be:	684b      	ldr	r3, [r1, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	dc05      	bgt.n	80039d0 <__sflush_r+0x20>
 80039c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	dc02      	bgt.n	80039d0 <__sflush_r+0x20>
 80039ca:	2000      	movs	r0, #0
 80039cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039d2:	2e00      	cmp	r6, #0
 80039d4:	d0f9      	beq.n	80039ca <__sflush_r+0x1a>
 80039d6:	2300      	movs	r3, #0
 80039d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80039dc:	682f      	ldr	r7, [r5, #0]
 80039de:	6a21      	ldr	r1, [r4, #32]
 80039e0:	602b      	str	r3, [r5, #0]
 80039e2:	d032      	beq.n	8003a4a <__sflush_r+0x9a>
 80039e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039e6:	89a3      	ldrh	r3, [r4, #12]
 80039e8:	075a      	lsls	r2, r3, #29
 80039ea:	d505      	bpl.n	80039f8 <__sflush_r+0x48>
 80039ec:	6863      	ldr	r3, [r4, #4]
 80039ee:	1ac0      	subs	r0, r0, r3
 80039f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039f2:	b10b      	cbz	r3, 80039f8 <__sflush_r+0x48>
 80039f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039f6:	1ac0      	subs	r0, r0, r3
 80039f8:	2300      	movs	r3, #0
 80039fa:	4602      	mov	r2, r0
 80039fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039fe:	6a21      	ldr	r1, [r4, #32]
 8003a00:	4628      	mov	r0, r5
 8003a02:	47b0      	blx	r6
 8003a04:	1c43      	adds	r3, r0, #1
 8003a06:	89a3      	ldrh	r3, [r4, #12]
 8003a08:	d106      	bne.n	8003a18 <__sflush_r+0x68>
 8003a0a:	6829      	ldr	r1, [r5, #0]
 8003a0c:	291d      	cmp	r1, #29
 8003a0e:	d82b      	bhi.n	8003a68 <__sflush_r+0xb8>
 8003a10:	4a29      	ldr	r2, [pc, #164]	; (8003ab8 <__sflush_r+0x108>)
 8003a12:	410a      	asrs	r2, r1
 8003a14:	07d6      	lsls	r6, r2, #31
 8003a16:	d427      	bmi.n	8003a68 <__sflush_r+0xb8>
 8003a18:	2200      	movs	r2, #0
 8003a1a:	6062      	str	r2, [r4, #4]
 8003a1c:	04d9      	lsls	r1, r3, #19
 8003a1e:	6922      	ldr	r2, [r4, #16]
 8003a20:	6022      	str	r2, [r4, #0]
 8003a22:	d504      	bpl.n	8003a2e <__sflush_r+0x7e>
 8003a24:	1c42      	adds	r2, r0, #1
 8003a26:	d101      	bne.n	8003a2c <__sflush_r+0x7c>
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	b903      	cbnz	r3, 8003a2e <__sflush_r+0x7e>
 8003a2c:	6560      	str	r0, [r4, #84]	; 0x54
 8003a2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a30:	602f      	str	r7, [r5, #0]
 8003a32:	2900      	cmp	r1, #0
 8003a34:	d0c9      	beq.n	80039ca <__sflush_r+0x1a>
 8003a36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a3a:	4299      	cmp	r1, r3
 8003a3c:	d002      	beq.n	8003a44 <__sflush_r+0x94>
 8003a3e:	4628      	mov	r0, r5
 8003a40:	f7ff febe 	bl	80037c0 <_free_r>
 8003a44:	2000      	movs	r0, #0
 8003a46:	6360      	str	r0, [r4, #52]	; 0x34
 8003a48:	e7c0      	b.n	80039cc <__sflush_r+0x1c>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	47b0      	blx	r6
 8003a50:	1c41      	adds	r1, r0, #1
 8003a52:	d1c8      	bne.n	80039e6 <__sflush_r+0x36>
 8003a54:	682b      	ldr	r3, [r5, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0c5      	beq.n	80039e6 <__sflush_r+0x36>
 8003a5a:	2b1d      	cmp	r3, #29
 8003a5c:	d001      	beq.n	8003a62 <__sflush_r+0xb2>
 8003a5e:	2b16      	cmp	r3, #22
 8003a60:	d101      	bne.n	8003a66 <__sflush_r+0xb6>
 8003a62:	602f      	str	r7, [r5, #0]
 8003a64:	e7b1      	b.n	80039ca <__sflush_r+0x1a>
 8003a66:	89a3      	ldrh	r3, [r4, #12]
 8003a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a6c:	81a3      	strh	r3, [r4, #12]
 8003a6e:	e7ad      	b.n	80039cc <__sflush_r+0x1c>
 8003a70:	690f      	ldr	r7, [r1, #16]
 8003a72:	2f00      	cmp	r7, #0
 8003a74:	d0a9      	beq.n	80039ca <__sflush_r+0x1a>
 8003a76:	0793      	lsls	r3, r2, #30
 8003a78:	680e      	ldr	r6, [r1, #0]
 8003a7a:	bf08      	it	eq
 8003a7c:	694b      	ldreq	r3, [r1, #20]
 8003a7e:	600f      	str	r7, [r1, #0]
 8003a80:	bf18      	it	ne
 8003a82:	2300      	movne	r3, #0
 8003a84:	eba6 0807 	sub.w	r8, r6, r7
 8003a88:	608b      	str	r3, [r1, #8]
 8003a8a:	f1b8 0f00 	cmp.w	r8, #0
 8003a8e:	dd9c      	ble.n	80039ca <__sflush_r+0x1a>
 8003a90:	6a21      	ldr	r1, [r4, #32]
 8003a92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a94:	4643      	mov	r3, r8
 8003a96:	463a      	mov	r2, r7
 8003a98:	4628      	mov	r0, r5
 8003a9a:	47b0      	blx	r6
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	dc06      	bgt.n	8003aae <__sflush_r+0xfe>
 8003aa0:	89a3      	ldrh	r3, [r4, #12]
 8003aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aa6:	81a3      	strh	r3, [r4, #12]
 8003aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8003aac:	e78e      	b.n	80039cc <__sflush_r+0x1c>
 8003aae:	4407      	add	r7, r0
 8003ab0:	eba8 0800 	sub.w	r8, r8, r0
 8003ab4:	e7e9      	b.n	8003a8a <__sflush_r+0xda>
 8003ab6:	bf00      	nop
 8003ab8:	dfbffffe 	.word	0xdfbffffe

08003abc <_fflush_r>:
 8003abc:	b538      	push	{r3, r4, r5, lr}
 8003abe:	690b      	ldr	r3, [r1, #16]
 8003ac0:	4605      	mov	r5, r0
 8003ac2:	460c      	mov	r4, r1
 8003ac4:	b913      	cbnz	r3, 8003acc <_fflush_r+0x10>
 8003ac6:	2500      	movs	r5, #0
 8003ac8:	4628      	mov	r0, r5
 8003aca:	bd38      	pop	{r3, r4, r5, pc}
 8003acc:	b118      	cbz	r0, 8003ad6 <_fflush_r+0x1a>
 8003ace:	6a03      	ldr	r3, [r0, #32]
 8003ad0:	b90b      	cbnz	r3, 8003ad6 <_fflush_r+0x1a>
 8003ad2:	f7ff fc8f 	bl	80033f4 <__sinit>
 8003ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f3      	beq.n	8003ac6 <_fflush_r+0xa>
 8003ade:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003ae0:	07d0      	lsls	r0, r2, #31
 8003ae2:	d404      	bmi.n	8003aee <_fflush_r+0x32>
 8003ae4:	0599      	lsls	r1, r3, #22
 8003ae6:	d402      	bmi.n	8003aee <_fflush_r+0x32>
 8003ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003aea:	f7ff fe66 	bl	80037ba <__retarget_lock_acquire_recursive>
 8003aee:	4628      	mov	r0, r5
 8003af0:	4621      	mov	r1, r4
 8003af2:	f7ff ff5d 	bl	80039b0 <__sflush_r>
 8003af6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003af8:	07da      	lsls	r2, r3, #31
 8003afa:	4605      	mov	r5, r0
 8003afc:	d4e4      	bmi.n	8003ac8 <_fflush_r+0xc>
 8003afe:	89a3      	ldrh	r3, [r4, #12]
 8003b00:	059b      	lsls	r3, r3, #22
 8003b02:	d4e1      	bmi.n	8003ac8 <_fflush_r+0xc>
 8003b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b06:	f7ff fe59 	bl	80037bc <__retarget_lock_release_recursive>
 8003b0a:	e7dd      	b.n	8003ac8 <_fflush_r+0xc>

08003b0c <__swhatbuf_r>:
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	460c      	mov	r4, r1
 8003b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b14:	2900      	cmp	r1, #0
 8003b16:	b096      	sub	sp, #88	; 0x58
 8003b18:	4615      	mov	r5, r2
 8003b1a:	461e      	mov	r6, r3
 8003b1c:	da0d      	bge.n	8003b3a <__swhatbuf_r+0x2e>
 8003b1e:	89a3      	ldrh	r3, [r4, #12]
 8003b20:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003b24:	f04f 0100 	mov.w	r1, #0
 8003b28:	bf0c      	ite	eq
 8003b2a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003b2e:	2340      	movne	r3, #64	; 0x40
 8003b30:	2000      	movs	r0, #0
 8003b32:	6031      	str	r1, [r6, #0]
 8003b34:	602b      	str	r3, [r5, #0]
 8003b36:	b016      	add	sp, #88	; 0x58
 8003b38:	bd70      	pop	{r4, r5, r6, pc}
 8003b3a:	466a      	mov	r2, sp
 8003b3c:	f000 f848 	bl	8003bd0 <_fstat_r>
 8003b40:	2800      	cmp	r0, #0
 8003b42:	dbec      	blt.n	8003b1e <__swhatbuf_r+0x12>
 8003b44:	9901      	ldr	r1, [sp, #4]
 8003b46:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003b4a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003b4e:	4259      	negs	r1, r3
 8003b50:	4159      	adcs	r1, r3
 8003b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b56:	e7eb      	b.n	8003b30 <__swhatbuf_r+0x24>

08003b58 <__smakebuf_r>:
 8003b58:	898b      	ldrh	r3, [r1, #12]
 8003b5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b5c:	079d      	lsls	r5, r3, #30
 8003b5e:	4606      	mov	r6, r0
 8003b60:	460c      	mov	r4, r1
 8003b62:	d507      	bpl.n	8003b74 <__smakebuf_r+0x1c>
 8003b64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b68:	6023      	str	r3, [r4, #0]
 8003b6a:	6123      	str	r3, [r4, #16]
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	6163      	str	r3, [r4, #20]
 8003b70:	b002      	add	sp, #8
 8003b72:	bd70      	pop	{r4, r5, r6, pc}
 8003b74:	ab01      	add	r3, sp, #4
 8003b76:	466a      	mov	r2, sp
 8003b78:	f7ff ffc8 	bl	8003b0c <__swhatbuf_r>
 8003b7c:	9900      	ldr	r1, [sp, #0]
 8003b7e:	4605      	mov	r5, r0
 8003b80:	4630      	mov	r0, r6
 8003b82:	f7ff fe89 	bl	8003898 <_malloc_r>
 8003b86:	b948      	cbnz	r0, 8003b9c <__smakebuf_r+0x44>
 8003b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b8c:	059a      	lsls	r2, r3, #22
 8003b8e:	d4ef      	bmi.n	8003b70 <__smakebuf_r+0x18>
 8003b90:	f023 0303 	bic.w	r3, r3, #3
 8003b94:	f043 0302 	orr.w	r3, r3, #2
 8003b98:	81a3      	strh	r3, [r4, #12]
 8003b9a:	e7e3      	b.n	8003b64 <__smakebuf_r+0xc>
 8003b9c:	89a3      	ldrh	r3, [r4, #12]
 8003b9e:	6020      	str	r0, [r4, #0]
 8003ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba4:	81a3      	strh	r3, [r4, #12]
 8003ba6:	9b00      	ldr	r3, [sp, #0]
 8003ba8:	6163      	str	r3, [r4, #20]
 8003baa:	9b01      	ldr	r3, [sp, #4]
 8003bac:	6120      	str	r0, [r4, #16]
 8003bae:	b15b      	cbz	r3, 8003bc8 <__smakebuf_r+0x70>
 8003bb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bb4:	4630      	mov	r0, r6
 8003bb6:	f000 f81d 	bl	8003bf4 <_isatty_r>
 8003bba:	b128      	cbz	r0, 8003bc8 <__smakebuf_r+0x70>
 8003bbc:	89a3      	ldrh	r3, [r4, #12]
 8003bbe:	f023 0303 	bic.w	r3, r3, #3
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	81a3      	strh	r3, [r4, #12]
 8003bc8:	89a3      	ldrh	r3, [r4, #12]
 8003bca:	431d      	orrs	r5, r3
 8003bcc:	81a5      	strh	r5, [r4, #12]
 8003bce:	e7cf      	b.n	8003b70 <__smakebuf_r+0x18>

08003bd0 <_fstat_r>:
 8003bd0:	b538      	push	{r3, r4, r5, lr}
 8003bd2:	4d07      	ldr	r5, [pc, #28]	; (8003bf0 <_fstat_r+0x20>)
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	4604      	mov	r4, r0
 8003bd8:	4608      	mov	r0, r1
 8003bda:	4611      	mov	r1, r2
 8003bdc:	602b      	str	r3, [r5, #0]
 8003bde:	f7fc fe28 	bl	8000832 <_fstat>
 8003be2:	1c43      	adds	r3, r0, #1
 8003be4:	d102      	bne.n	8003bec <_fstat_r+0x1c>
 8003be6:	682b      	ldr	r3, [r5, #0]
 8003be8:	b103      	cbz	r3, 8003bec <_fstat_r+0x1c>
 8003bea:	6023      	str	r3, [r4, #0]
 8003bec:	bd38      	pop	{r3, r4, r5, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000258 	.word	0x20000258

08003bf4 <_isatty_r>:
 8003bf4:	b538      	push	{r3, r4, r5, lr}
 8003bf6:	4d06      	ldr	r5, [pc, #24]	; (8003c10 <_isatty_r+0x1c>)
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	4608      	mov	r0, r1
 8003bfe:	602b      	str	r3, [r5, #0]
 8003c00:	f7fc fe27 	bl	8000852 <_isatty>
 8003c04:	1c43      	adds	r3, r0, #1
 8003c06:	d102      	bne.n	8003c0e <_isatty_r+0x1a>
 8003c08:	682b      	ldr	r3, [r5, #0]
 8003c0a:	b103      	cbz	r3, 8003c0e <_isatty_r+0x1a>
 8003c0c:	6023      	str	r3, [r4, #0]
 8003c0e:	bd38      	pop	{r3, r4, r5, pc}
 8003c10:	20000258 	.word	0x20000258

08003c14 <_sbrk_r>:
 8003c14:	b538      	push	{r3, r4, r5, lr}
 8003c16:	4d06      	ldr	r5, [pc, #24]	; (8003c30 <_sbrk_r+0x1c>)
 8003c18:	2300      	movs	r3, #0
 8003c1a:	4604      	mov	r4, r0
 8003c1c:	4608      	mov	r0, r1
 8003c1e:	602b      	str	r3, [r5, #0]
 8003c20:	f7fc fe30 	bl	8000884 <_sbrk>
 8003c24:	1c43      	adds	r3, r0, #1
 8003c26:	d102      	bne.n	8003c2e <_sbrk_r+0x1a>
 8003c28:	682b      	ldr	r3, [r5, #0]
 8003c2a:	b103      	cbz	r3, 8003c2e <_sbrk_r+0x1a>
 8003c2c:	6023      	str	r3, [r4, #0]
 8003c2e:	bd38      	pop	{r3, r4, r5, pc}
 8003c30:	20000258 	.word	0x20000258

08003c34 <_init>:
 8003c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c36:	bf00      	nop
 8003c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3a:	bc08      	pop	{r3}
 8003c3c:	469e      	mov	lr, r3
 8003c3e:	4770      	bx	lr

08003c40 <_fini>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	bf00      	nop
 8003c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c46:	bc08      	pop	{r3}
 8003c48:	469e      	mov	lr, r3
 8003c4a:	4770      	bx	lr
